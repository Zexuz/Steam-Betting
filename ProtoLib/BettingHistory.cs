// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoLib/BettingHistory.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunicationHistory {

  /// <summary>Holder for reflection information generated from ProtoLib/BettingHistory.proto</summary>
  public static partial class BettingHistoryReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoLib/BettingHistory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BettingHistoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90b0xpYi9CZXR0aW5nSGlzdG9yeS5wcm90bxIRQ2hhdENvbW11bmlj",
            "YXRpb24iNwoXR2V0R2xvYmFsSGlzdG9yeVJlcXVlc3QSDgoGb2Zmc2V0GAEg",
            "ASgFEgwKBGxpbXQYAiABKAUiSgoZR2V0UGVyc29uYWxIaXN0b3J5UmVxdWVz",
            "dBIOCgZvZmZzZXQYASABKAUSDAoEbGltdBgCIAEoBRIPCgdzdGVhbUlkGAMg",
            "ASgJInoKDU1hdGNoUmVzcG9uc2USOgoLcGFnYWluYXRpb24YASABKAsyJS5D",
            "aGF0Q29tbXVuaWNhdGlvbi5QYWdpbmF0aW9uUmVzcG9uc2USLQoEZGF0YRgC",
            "IAMoCzIfLkNoYXRDb21tdW5pY2F0aW9uLk1hdGNoSGlzdG9yeSIzChJQYWdp",
            "bmF0aW9uUmVzcG9uc2USDQoFdG90YWwYASABKAUSDgoGb2Zmc2V0GAIgASgF",
            "IroBCgxNYXRjaEhpc3RvcnkSDwoHUm91bmRJZBgBIAEoBRIPCgdDcmVhdGVk",
            "GAIgASgJEg0KBVZhbHVlGAQgASgBEicKBldpbm5lchgDIAEoCzIXLkNoYXRD",
            "b21tdW5pY2F0aW9uLlVzZXISJgoFSXRlbXMYBSADKAsyFy5DaGF0Q29tbXVu",
            "aWNhdGlvbi5JdGVtEigKBEJldHMYBiADKAsyGi5DaGF0Q29tbXVuaWNhdGlv",
            "bi5Vc2VyQmV0IjUKBEl0ZW0SDAoETmFtZRgBIAEoCRINCgVWYWx1ZRgCIAEo",
            "ARIQCghJbWFnZVVybBgDIAEoCSJYCgdVc2VyQmV0EiUKBHVzZXIYASABKAsy",
            "Fy5DaGF0Q29tbXVuaWNhdGlvbi5Vc2VyEiYKBUl0ZW1zGAIgAygLMhcuQ2hh",
            "dENvbW11bmljYXRpb24uSXRlbSI3CgRVc2VyEgwKBG5hbWUYASABKAkSDwoH",
            "c3RlYW1JZBgDIAEoCRIQCghpbWFnZVVybBgCIAEoCSINCgtQaW5nUmVxdWVz",
            "dCIOCgxQaW5nUmVzcG9uc2UyqgIKF0JldHRpbmd2MUhpc290cnlTZXJ2aWNl",
            "EmAKEEdldEdsb2JhbEhpc3RvcnkSKi5DaGF0Q29tbXVuaWNhdGlvbi5HZXRH",
            "bG9iYWxIaXN0b3J5UmVxdWVzdBogLkNoYXRDb21tdW5pY2F0aW9uLk1hdGNo",
            "UmVzcG9uc2USZAoSR2V0UGVyc29uYWxIaXN0b3J5EiwuQ2hhdENvbW11bmlj",
            "YXRpb24uR2V0UGVyc29uYWxIaXN0b3J5UmVxdWVzdBogLkNoYXRDb21tdW5p",
            "Y2F0aW9uLk1hdGNoUmVzcG9uc2USRwoEUGluZxIeLkNoYXRDb21tdW5pY2F0",
            "aW9uLlBpbmdSZXF1ZXN0Gh8uQ2hhdENvbW11bmljYXRpb24uUGluZ1Jlc3Bv",
            "bnNlQhqqAhdScGNDb21tdW5pY2F0aW9uSGlzdG9yeWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.GetGlobalHistoryRequest), global::RpcCommunicationHistory.GetGlobalHistoryRequest.Parser, new[]{ "Offset", "Limt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.GetPersonalHistoryRequest), global::RpcCommunicationHistory.GetPersonalHistoryRequest.Parser, new[]{ "Offset", "Limt", "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.MatchResponse), global::RpcCommunicationHistory.MatchResponse.Parser, new[]{ "Pagaination", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.PaginationResponse), global::RpcCommunicationHistory.PaginationResponse.Parser, new[]{ "Total", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.MatchHistory), global::RpcCommunicationHistory.MatchHistory.Parser, new[]{ "RoundId", "Created", "Value", "Winner", "Items", "Bets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.Item), global::RpcCommunicationHistory.Item.Parser, new[]{ "Name", "Value", "ImageUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.UserBet), global::RpcCommunicationHistory.UserBet.Parser, new[]{ "User", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.User), global::RpcCommunicationHistory.User.Parser, new[]{ "Name", "SteamId", "ImageUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.PingRequest), global::RpcCommunicationHistory.PingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationHistory.PingResponse), global::RpcCommunicationHistory.PingResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetGlobalHistoryRequest : pb::IMessage<GetGlobalHistoryRequest> {
    private static readonly pb::MessageParser<GetGlobalHistoryRequest> _parser = new pb::MessageParser<GetGlobalHistoryRequest>(() => new GetGlobalHistoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGlobalHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalHistoryRequest(GetGlobalHistoryRequest other) : this() {
      offset_ = other.offset_;
      limt_ = other.limt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalHistoryRequest Clone() {
      return new GetGlobalHistoryRequest(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limt" field.</summary>
    public const int LimtFieldNumber = 2;
    private int limt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limt {
      get { return limt_; }
      set {
        limt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGlobalHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGlobalHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Limt != other.Limt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Limt != 0) hash ^= Limt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Offset);
      }
      if (Limt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Limt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGlobalHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Limt != 0) {
        Limt = other.Limt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Offset = input.ReadInt32();
            break;
          }
          case 16: {
            Limt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPersonalHistoryRequest : pb::IMessage<GetPersonalHistoryRequest> {
    private static readonly pb::MessageParser<GetPersonalHistoryRequest> _parser = new pb::MessageParser<GetPersonalHistoryRequest>(() => new GetPersonalHistoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPersonalHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPersonalHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPersonalHistoryRequest(GetPersonalHistoryRequest other) : this() {
      offset_ = other.offset_;
      limt_ = other.limt_;
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPersonalHistoryRequest Clone() {
      return new GetPersonalHistoryRequest(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limt" field.</summary>
    public const int LimtFieldNumber = 2;
    private int limt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limt {
      get { return limt_; }
      set {
        limt_ = value;
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 3;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPersonalHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPersonalHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Limt != other.Limt) return false;
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Limt != 0) hash ^= Limt.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Offset);
      }
      if (Limt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limt);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Limt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limt);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPersonalHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Limt != 0) {
        Limt = other.Limt;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Offset = input.ReadInt32();
            break;
          }
          case 16: {
            Limt = input.ReadInt32();
            break;
          }
          case 26: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchResponse : pb::IMessage<MatchResponse> {
    private static readonly pb::MessageParser<MatchResponse> _parser = new pb::MessageParser<MatchResponse>(() => new MatchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResponse(MatchResponse other) : this() {
      Pagaination = other.pagaination_ != null ? other.Pagaination.Clone() : null;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResponse Clone() {
      return new MatchResponse(this);
    }

    /// <summary>Field number for the "pagaination" field.</summary>
    public const int PagainationFieldNumber = 1;
    private global::RpcCommunicationHistory.PaginationResponse pagaination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationHistory.PaginationResponse Pagaination {
      get { return pagaination_; }
      set {
        pagaination_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RpcCommunicationHistory.MatchHistory> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::RpcCommunicationHistory.MatchHistory.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationHistory.MatchHistory> data_ = new pbc::RepeatedField<global::RpcCommunicationHistory.MatchHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationHistory.MatchHistory> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pagaination, other.Pagaination)) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pagaination_ != null) hash ^= Pagaination.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pagaination_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pagaination);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pagaination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pagaination);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.pagaination_ != null) {
        if (pagaination_ == null) {
          pagaination_ = new global::RpcCommunicationHistory.PaginationResponse();
        }
        Pagaination.MergeFrom(other.Pagaination);
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pagaination_ == null) {
              pagaination_ = new global::RpcCommunicationHistory.PaginationResponse();
            }
            input.ReadMessage(pagaination_);
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaginationResponse : pb::IMessage<PaginationResponse> {
    private static readonly pb::MessageParser<PaginationResponse> _parser = new pb::MessageParser<PaginationResponse>(() => new PaginationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaginationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationResponse(PaginationResponse other) : this() {
      total_ = other.total_;
      offset_ = other.offset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationResponse Clone() {
      return new PaginationResponse(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaginationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaginationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Offset != other.Offset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Total);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaginationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadInt32();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchHistory : pb::IMessage<MatchHistory> {
    private static readonly pb::MessageParser<MatchHistory> _parser = new pb::MessageParser<MatchHistory>(() => new MatchHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchHistory(MatchHistory other) : this() {
      roundId_ = other.roundId_;
      created_ = other.created_;
      value_ = other.value_;
      Winner = other.winner_ != null ? other.Winner.Clone() : null;
      items_ = other.items_.Clone();
      bets_ = other.bets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchHistory Clone() {
      return new MatchHistory(this);
    }

    /// <summary>Field number for the "RoundId" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private int roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "Created" field.</summary>
    public const int CreatedFieldNumber = 2;
    private string created_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Created {
      get { return created_; }
      set {
        created_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 4;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "Winner" field.</summary>
    public const int WinnerFieldNumber = 3;
    private global::RpcCommunicationHistory.User winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationHistory.User Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RpcCommunicationHistory.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::RpcCommunicationHistory.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationHistory.Item> items_ = new pbc::RepeatedField<global::RpcCommunicationHistory.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationHistory.Item> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "Bets" field.</summary>
    public const int BetsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RpcCommunicationHistory.UserBet> _repeated_bets_codec
        = pb::FieldCodec.ForMessage(50, global::RpcCommunicationHistory.UserBet.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationHistory.UserBet> bets_ = new pbc::RepeatedField<global::RpcCommunicationHistory.UserBet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationHistory.UserBet> Bets {
      get { return bets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundId != other.RoundId) return false;
      if (Created != other.Created) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(Winner, other.Winner)) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!bets_.Equals(other.bets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundId != 0) hash ^= RoundId.GetHashCode();
      if (Created.Length != 0) hash ^= Created.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (winner_ != null) hash ^= Winner.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= bets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundId);
      }
      if (Created.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Created);
      }
      if (winner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Winner);
      }
      if (Value != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Value);
      }
      items_.WriteTo(output, _repeated_items_codec);
      bets_.WriteTo(output, _repeated_bets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundId);
      }
      if (Created.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Created);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (winner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Winner);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += bets_.CalculateSize(_repeated_bets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchHistory other) {
      if (other == null) {
        return;
      }
      if (other.RoundId != 0) {
        RoundId = other.RoundId;
      }
      if (other.Created.Length != 0) {
        Created = other.Created;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.winner_ != null) {
        if (winner_ == null) {
          winner_ = new global::RpcCommunicationHistory.User();
        }
        Winner.MergeFrom(other.Winner);
      }
      items_.Add(other.items_);
      bets_.Add(other.bets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundId = input.ReadInt32();
            break;
          }
          case 18: {
            Created = input.ReadString();
            break;
          }
          case 26: {
            if (winner_ == null) {
              winner_ = new global::RpcCommunicationHistory.User();
            }
            input.ReadMessage(winner_);
            break;
          }
          case 33: {
            Value = input.ReadDouble();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 50: {
            bets_.AddEntriesFrom(input, _repeated_bets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      imageUrl_ = other.imageUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "ImageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 3;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (ImageUrl != other.ImageUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            ImageUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserBet : pb::IMessage<UserBet> {
    private static readonly pb::MessageParser<UserBet> _parser = new pb::MessageParser<UserBet>(() => new UserBet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBet(UserBet other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBet Clone() {
      return new UserBet(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::RpcCommunicationHistory.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationHistory.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RpcCommunicationHistory.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::RpcCommunicationHistory.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationHistory.Item> items_ = new pbc::RepeatedField<global::RpcCommunicationHistory.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationHistory.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBet other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::RpcCommunicationHistory.User();
        }
        User.MergeFrom(other.User);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::RpcCommunicationHistory.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      name_ = other.name_;
      steamId_ = other.steamId_;
      imageUrl_ = other.imageUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 3;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 2;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SteamId != other.SteamId) return false;
      if (ImageUrl != other.ImageUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImageUrl);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ImageUrl = input.ReadString();
            break;
          }
          case 26: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationHistory.BettingHistoryReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
