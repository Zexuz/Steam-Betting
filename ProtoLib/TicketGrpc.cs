// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/ticket.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace RpcCommunicationTicket {
  /// <summary>
  ///these endpoints is on the nodejs server
  /// </summary>
  public static partial class TicketService
  {
    static readonly string __ServiceName = "TicketCommunication.TicketService";

    static readonly grpc::Marshaller<global::RpcCommunicationTicket.UserCreateTicketRequest> __Marshaller_UserCreateTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.UserCreateTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.SingleTicketResponse> __Marshaller_SingleTicketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.SingleTicketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.UserRespondToTicketRequest> __Marshaller_UserRespondToTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.UserRespondToTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.Steamid> __Marshaller_Steamid = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.Steamid.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.ListTicketsResponse> __Marshaller_ListTicketsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.ListTicketsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.UserCountUnreadTicketsResponse> __Marshaller_UserCountUnreadTicketsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.UserCountUnreadTicketsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.UserMarkTicketAsReadRequest> __Marshaller_UserMarkTicketAsReadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.UserMarkTicketAsReadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.AdminCreateTicketRequest> __Marshaller_AdminCreateTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.AdminCreateTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.AdminRespondToTicketRequest> __Marshaller_AdminRespondToTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.AdminRespondToTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest> __Marshaller_AdminChangeStatusOnTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest> __Marshaller_AdminGetTicketsOnQueryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::RpcCommunicationTicket.UserCreateTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_UserCreateTicket = new grpc::Method<global::RpcCommunicationTicket.UserCreateTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserCreateTicket",
        __Marshaller_UserCreateTicketRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.UserRespondToTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_UserRespondToTicket = new grpc::Method<global::RpcCommunicationTicket.UserRespondToTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserRespondToTicket",
        __Marshaller_UserRespondToTicketRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.Steamid, global::RpcCommunicationTicket.ListTicketsResponse> __Method_UserGetAllTickets = new grpc::Method<global::RpcCommunicationTicket.Steamid, global::RpcCommunicationTicket.ListTicketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserGetAllTickets",
        __Marshaller_Steamid,
        __Marshaller_ListTicketsResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.Steamid, global::RpcCommunicationTicket.UserCountUnreadTicketsResponse> __Method_UserCountUnreadTickets = new grpc::Method<global::RpcCommunicationTicket.Steamid, global::RpcCommunicationTicket.UserCountUnreadTicketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserCountUnreadTickets",
        __Marshaller_Steamid,
        __Marshaller_UserCountUnreadTicketsResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.UserMarkTicketAsReadRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_UserMarkTicketAsRead = new grpc::Method<global::RpcCommunicationTicket.UserMarkTicketAsReadRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserMarkTicketAsRead",
        __Marshaller_UserMarkTicketAsReadRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.EmptyMessage, global::RpcCommunicationTicket.EmptyMessage> __Method_Ping = new grpc::Method<global::RpcCommunicationTicket.EmptyMessage, global::RpcCommunicationTicket.EmptyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_EmptyMessage,
        __Marshaller_EmptyMessage);

    static readonly grpc::Method<global::RpcCommunicationTicket.AdminCreateTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_AdminCreateTicket = new grpc::Method<global::RpcCommunicationTicket.AdminCreateTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminCreateTicket",
        __Marshaller_AdminCreateTicketRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.AdminRespondToTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_AdminRespondToTicket = new grpc::Method<global::RpcCommunicationTicket.AdminRespondToTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminRespondToTicket",
        __Marshaller_AdminRespondToTicketRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse> __Method_AdminChangeStatusOnTicket = new grpc::Method<global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest, global::RpcCommunicationTicket.SingleTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminChangeStatusOnTicket",
        __Marshaller_AdminChangeStatusOnTicketRequest,
        __Marshaller_SingleTicketResponse);

    static readonly grpc::Method<global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest, global::RpcCommunicationTicket.ListTicketsResponse> __Method_AdminGetTicketsOnQuery = new grpc::Method<global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest, global::RpcCommunicationTicket.ListTicketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminGetTicketsOnQuery",
        __Marshaller_AdminGetTicketsOnQueryRequest,
        __Marshaller_ListTicketsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TicketService</summary>
    public abstract partial class TicketServiceBase
    {
      /// <summary>
      ///USER
      ///Skapa en ny ticket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> UserCreateTicket(global::RpcCommunicationTicket.UserCreateTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Svara p√• ticket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> UserRespondToTicket(global::RpcCommunicationTicket.UserRespondToTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Retunerar alla tickets p√• anv√§ndaren
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.ListTicketsResponse> UserGetAllTickets(global::RpcCommunicationTicket.Steamid request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Antal tickets p√• anv√§ndaren som har read = false. tex. 2st notifikationer i headern.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.UserCountUnreadTicketsResponse> UserCountUnreadTickets(global::RpcCommunicationTicket.Steamid request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Markera ticketen som "read = true", dvs ingen notifikation i headern tex.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> UserMarkTicketAsRead(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.EmptyMessage> Ping(global::RpcCommunicationTicket.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///ADMIN
      ///Skapar en ny ticket, detta √§r f√∂r att vi t.ex. kontakta n√•gon eller kunna skapa en ticket √•t n√•gon som spammar i chatten.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> AdminCreateTicket(global::RpcCommunicationTicket.AdminCreateTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Svara p√• en ticket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> AdminRespondToTicket(global::RpcCommunicationTicket.AdminRespondToTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///√Ñndra status p√• ticket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.SingleTicketResponse> AdminChangeStatusOnTicket(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Lista tickets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationTicket.ListTicketsResponse> AdminGetTicketsOnQuery(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TicketService</summary>
    public partial class TicketServiceClient : grpc::ClientBase<TicketServiceClient>
    {
      /// <summary>Creates a new client for TicketService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TicketServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TicketService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TicketServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TicketServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TicketServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///USER
      ///Skapa en ny ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserCreateTicket(global::RpcCommunicationTicket.UserCreateTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserCreateTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///USER
      ///Skapa en ny ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserCreateTicket(global::RpcCommunicationTicket.UserCreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserCreateTicket, null, options, request);
      }
      /// <summary>
      ///USER
      ///Skapa en ny ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserCreateTicketAsync(global::RpcCommunicationTicket.UserCreateTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserCreateTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///USER
      ///Skapa en ny ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserCreateTicketAsync(global::RpcCommunicationTicket.UserCreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserCreateTicket, null, options, request);
      }
      /// <summary>
      ///Svara p√• ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserRespondToTicket(global::RpcCommunicationTicket.UserRespondToTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRespondToTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Svara p√• ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserRespondToTicket(global::RpcCommunicationTicket.UserRespondToTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserRespondToTicket, null, options, request);
      }
      /// <summary>
      ///Svara p√• ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserRespondToTicketAsync(global::RpcCommunicationTicket.UserRespondToTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRespondToTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Svara p√• ticket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserRespondToTicketAsync(global::RpcCommunicationTicket.UserRespondToTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserRespondToTicket, null, options, request);
      }
      /// <summary>
      ///Retunerar alla tickets p√• anv√§ndaren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.ListTicketsResponse UserGetAllTickets(global::RpcCommunicationTicket.Steamid request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGetAllTickets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Retunerar alla tickets p√• anv√§ndaren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.ListTicketsResponse UserGetAllTickets(global::RpcCommunicationTicket.Steamid request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserGetAllTickets, null, options, request);
      }
      /// <summary>
      ///Retunerar alla tickets p√• anv√§ndaren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.ListTicketsResponse> UserGetAllTicketsAsync(global::RpcCommunicationTicket.Steamid request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGetAllTicketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Retunerar alla tickets p√• anv√§ndaren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.ListTicketsResponse> UserGetAllTicketsAsync(global::RpcCommunicationTicket.Steamid request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserGetAllTickets, null, options, request);
      }
      /// <summary>
      ///Antal tickets p√• anv√§ndaren som har read = false. tex. 2st notifikationer i headern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.UserCountUnreadTicketsResponse UserCountUnreadTickets(global::RpcCommunicationTicket.Steamid request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserCountUnreadTickets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Antal tickets p√• anv√§ndaren som har read = false. tex. 2st notifikationer i headern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.UserCountUnreadTicketsResponse UserCountUnreadTickets(global::RpcCommunicationTicket.Steamid request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserCountUnreadTickets, null, options, request);
      }
      /// <summary>
      ///Antal tickets p√• anv√§ndaren som har read = false. tex. 2st notifikationer i headern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.UserCountUnreadTicketsResponse> UserCountUnreadTicketsAsync(global::RpcCommunicationTicket.Steamid request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserCountUnreadTicketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Antal tickets p√• anv√§ndaren som har read = false. tex. 2st notifikationer i headern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.UserCountUnreadTicketsResponse> UserCountUnreadTicketsAsync(global::RpcCommunicationTicket.Steamid request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserCountUnreadTickets, null, options, request);
      }
      /// <summary>
      ///Markera ticketen som "read = true", dvs ingen notifikation i headern tex.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserMarkTicketAsRead(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserMarkTicketAsRead(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Markera ticketen som "read = true", dvs ingen notifikation i headern tex.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse UserMarkTicketAsRead(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserMarkTicketAsRead, null, options, request);
      }
      /// <summary>
      ///Markera ticketen som "read = true", dvs ingen notifikation i headern tex.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserMarkTicketAsReadAsync(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserMarkTicketAsReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Markera ticketen som "read = true", dvs ingen notifikation i headern tex.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> UserMarkTicketAsReadAsync(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserMarkTicketAsRead, null, options, request);
      }
      public virtual global::RpcCommunicationTicket.EmptyMessage Ping(global::RpcCommunicationTicket.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationTicket.EmptyMessage Ping(global::RpcCommunicationTicket.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.EmptyMessage> PingAsync(global::RpcCommunicationTicket.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.EmptyMessage> PingAsync(global::RpcCommunicationTicket.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      ///ADMIN
      ///Skapar en ny ticket, detta √§r f√∂r att vi t.ex. kontakta n√•gon eller kunna skapa en ticket √•t n√•gon som spammar i chatten.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminCreateTicket(global::RpcCommunicationTicket.AdminCreateTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminCreateTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///ADMIN
      ///Skapar en ny ticket, detta √§r f√∂r att vi t.ex. kontakta n√•gon eller kunna skapa en ticket √•t n√•gon som spammar i chatten.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminCreateTicket(global::RpcCommunicationTicket.AdminCreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminCreateTicket, null, options, request);
      }
      /// <summary>
      ///ADMIN
      ///Skapar en ny ticket, detta √§r f√∂r att vi t.ex. kontakta n√•gon eller kunna skapa en ticket √•t n√•gon som spammar i chatten.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminCreateTicketAsync(global::RpcCommunicationTicket.AdminCreateTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminCreateTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///ADMIN
      ///Skapar en ny ticket, detta √§r f√∂r att vi t.ex. kontakta n√•gon eller kunna skapa en ticket √•t n√•gon som spammar i chatten.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminCreateTicketAsync(global::RpcCommunicationTicket.AdminCreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminCreateTicket, null, options, request);
      }
      /// <summary>
      ///Svara p√• en ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminRespondToTicket(global::RpcCommunicationTicket.AdminRespondToTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminRespondToTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Svara p√• en ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminRespondToTicket(global::RpcCommunicationTicket.AdminRespondToTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminRespondToTicket, null, options, request);
      }
      /// <summary>
      ///Svara p√• en ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminRespondToTicketAsync(global::RpcCommunicationTicket.AdminRespondToTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminRespondToTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Svara p√• en ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminRespondToTicketAsync(global::RpcCommunicationTicket.AdminRespondToTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminRespondToTicket, null, options, request);
      }
      /// <summary>
      ///√Ñndra status p√• ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminChangeStatusOnTicket(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminChangeStatusOnTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///√Ñndra status p√• ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.SingleTicketResponse AdminChangeStatusOnTicket(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminChangeStatusOnTicket, null, options, request);
      }
      /// <summary>
      ///√Ñndra status p√• ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminChangeStatusOnTicketAsync(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminChangeStatusOnTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///√Ñndra status p√• ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.SingleTicketResponse> AdminChangeStatusOnTicketAsync(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminChangeStatusOnTicket, null, options, request);
      }
      /// <summary>
      ///Lista tickets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.ListTicketsResponse AdminGetTicketsOnQuery(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminGetTicketsOnQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Lista tickets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationTicket.ListTicketsResponse AdminGetTicketsOnQuery(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminGetTicketsOnQuery, null, options, request);
      }
      /// <summary>
      ///Lista tickets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.ListTicketsResponse> AdminGetTicketsOnQueryAsync(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AdminGetTicketsOnQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Lista tickets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationTicket.ListTicketsResponse> AdminGetTicketsOnQueryAsync(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminGetTicketsOnQuery, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TicketServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TicketServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TicketServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UserCreateTicket, serviceImpl.UserCreateTicket)
          .AddMethod(__Method_UserRespondToTicket, serviceImpl.UserRespondToTicket)
          .AddMethod(__Method_UserGetAllTickets, serviceImpl.UserGetAllTickets)
          .AddMethod(__Method_UserCountUnreadTickets, serviceImpl.UserCountUnreadTickets)
          .AddMethod(__Method_UserMarkTicketAsRead, serviceImpl.UserMarkTicketAsRead)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_AdminCreateTicket, serviceImpl.AdminCreateTicket)
          .AddMethod(__Method_AdminRespondToTicket, serviceImpl.AdminRespondToTicket)
          .AddMethod(__Method_AdminChangeStatusOnTicket, serviceImpl.AdminChangeStatusOnTicket)
          .AddMethod(__Method_AdminGetTicketsOnQuery, serviceImpl.AdminGetTicketsOnQuery).Build();
    }

  }
}
#endregion
