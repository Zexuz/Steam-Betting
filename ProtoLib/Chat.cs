// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunicationChat {

  /// <summary>Holder for reflection information generated from protofiles/chat.proto</summary>
  public static partial class ChatReflection {

    #region Descriptor
    /// <summary>File descriptor for protofiles/chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90b2ZpbGVzL2NoYXQucHJvdG8SEUNoYXRDb21tdW5pY2F0aW9uIg4K",
            "DEVtcHR5TWVzc2FnZSJRChpHZXRNZXNzYWdlc09uUGFyYW1zUmVxdWVzdBIP",
            "CgdzdGVhbUlkGAEgASgJEhEKCXN0YXJ0VGltZRgCIAEoCRIPCgdlbmRUaW1l",
            "GAMgASgJIkcKEE1lc3NhZ2VzUmVzcG9uc2USMwoLY2hhdE1lc3NhZ2UYASAD",
            "KAsyHi5DaGF0Q29tbXVuaWNhdGlvbi5DaGF0TWVzc2FnZSIyChhHZXRMYXRl",
            "c3RNZXNzYWdlc1JlcXVlc3QSFgoObWVzc2FnZXNBbW91bnQYASABKAUieQoU",
            "SW5zZXJ0TWVzc2FnZVJlcXVlc3QSMwoLY2hhdE1lc3NhZ2UYASABKAsyHi5D",
            "aGF0Q29tbXVuaWNhdGlvbi5DaGF0TWVzc2FnZRIXCg9hbnRpU3BhbVNlY29u",
            "ZHMYAiABKAUSEwoLaWdub3JlUnVsZXMYAyABKAgigQEKFUluc2VydE1lc3Nh",
            "Z2VSZXNwb25zZRI1CgtjaGF0TWVzc2FnZRgBIAEoCzIeLkNoYXRDb21tdW5p",
            "Y2F0aW9uLkNoYXRNZXNzYWdlSAASKQoFZXJyb3IYAiABKAsyGC5DaGF0Q29t",
            "bXVuaWNhdGlvbi5FcnJvckgAQgYKBERhdGEiQwoPTXV0ZVVzZXJSZXF1ZXN0",
            "Eg8KB3N0ZWFtSWQYASABKAkSDwoHc2Vjb25kcxgCIAEoBRIOCgZyZWFzb24Y",
            "AyABKAkiRAoQTXV0ZVVzZXJSZXNwb25zZRIPCgdzdGVhbUlkGAEgASgJEg8K",
            "B2V4cGlyZXMYAiABKAUSDgoGcmVhc29uGAMgASgJIiQKEVVuTXV0ZVVzZXJS",
            "ZXF1ZXN0Eg8KB3N0ZWFtSWQYASABKAkiRwoSTXV0ZWRVc2Vyc1Jlc3BvbnNl",
            "EjEKCm11dGVkVXNlcnMYASADKAsyHS5DaGF0Q29tbXVuaWNhdGlvbi5NdXRl",
            "ZFVzZXJzInEKC0NoYXRNZXNzYWdlEgwKBG5hbWUYASABKAkSDQoFaW1hZ2UY",
            "AiABKAkSDwoHbWVzc2FnZRgDIAEoCRIQCgh1c2VyVHlwZRgEIAEoCRIPCgdz",
            "dGVhbUlkGAUgASgJEhEKCXRpbWVzdGFtcBgGIAEoCSIYCgVFcnJvchIPCgdt",
            "ZXNzYWdlGAEgASgJImIKCk11dGVkVXNlcnMSDwoHc3RlYW1JZBgBIAEoCRIP",
            "CgdleHBpcmVzGAIgASgFEg4KBnJlYXNvbhgDIAEoCRIPCgdzZWNvbmRzGAQg",
            "ASgFEhEKCXRpbWVzdGFtcBgFIAEoCTKeBQoLQ2hhdFNlcnZpY2USSgoEUGlu",
            "ZxIfLkNoYXRDb21tdW5pY2F0aW9uLkVtcHR5TWVzc2FnZRofLkNoYXRDb21t",
            "dW5pY2F0aW9uLkVtcHR5TWVzc2FnZSIAEmQKDUluc2VydE1lc3NhZ2USJy5D",
            "aGF0Q29tbXVuaWNhdGlvbi5JbnNlcnRNZXNzYWdlUmVxdWVzdBooLkNoYXRD",
            "b21tdW5pY2F0aW9uLkluc2VydE1lc3NhZ2VSZXNwb25zZSIAEmcKEUdldExh",
            "dGVzdE1lc3NhZ2VzEisuQ2hhdENvbW11bmljYXRpb24uR2V0TGF0ZXN0TWVz",
            "c2FnZXNSZXF1ZXN0GiMuQ2hhdENvbW11bmljYXRpb24uTWVzc2FnZXNSZXNw",
            "b25zZSIAElUKCE11dGVVc2VyEiIuQ2hhdENvbW11bmljYXRpb24uTXV0ZVVz",
            "ZXJSZXF1ZXN0GiMuQ2hhdENvbW11bmljYXRpb24uTXV0ZVVzZXJSZXNwb25z",
            "ZSIAElkKDUdldE11dGVkVXNlcnMSHy5DaGF0Q29tbXVuaWNhdGlvbi5FbXB0",
            "eU1lc3NhZ2UaJS5DaGF0Q29tbXVuaWNhdGlvbi5NdXRlZFVzZXJzUmVzcG9u",
            "c2UiABJVCgpVbk11dGVVc2VyEiQuQ2hhdENvbW11bmljYXRpb24uVW5NdXRl",
            "VXNlclJlcXVlc3QaHy5DaGF0Q29tbXVuaWNhdGlvbi5FbXB0eU1lc3NhZ2Ui",
            "ABJrChNHZXRNZXNzYWdlc09uUGFyYW1zEi0uQ2hhdENvbW11bmljYXRpb24u",
            "R2V0TWVzc2FnZXNPblBhcmFtc1JlcXVlc3QaIy5DaGF0Q29tbXVuaWNhdGlv",
            "bi5NZXNzYWdlc1Jlc3BvbnNlIgBCF6oCFFJwY0NvbW11bmljYXRpb25DaGF0",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.EmptyMessage), global::RpcCommunicationChat.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.GetMessagesOnParamsRequest), global::RpcCommunicationChat.GetMessagesOnParamsRequest.Parser, new[]{ "SteamId", "StartTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.MessagesResponse), global::RpcCommunicationChat.MessagesResponse.Parser, new[]{ "ChatMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.GetLatestMessagesRequest), global::RpcCommunicationChat.GetLatestMessagesRequest.Parser, new[]{ "MessagesAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.InsertMessageRequest), global::RpcCommunicationChat.InsertMessageRequest.Parser, new[]{ "ChatMessage", "AntiSpamSeconds", "IgnoreRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.InsertMessageResponse), global::RpcCommunicationChat.InsertMessageResponse.Parser, new[]{ "ChatMessage", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.MuteUserRequest), global::RpcCommunicationChat.MuteUserRequest.Parser, new[]{ "SteamId", "Seconds", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.MuteUserResponse), global::RpcCommunicationChat.MuteUserResponse.Parser, new[]{ "SteamId", "Expires", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.UnMuteUserRequest), global::RpcCommunicationChat.UnMuteUserRequest.Parser, new[]{ "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.MutedUsersResponse), global::RpcCommunicationChat.MutedUsersResponse.Parser, new[]{ "MutedUsers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.ChatMessage), global::RpcCommunicationChat.ChatMessage.Parser, new[]{ "Name", "Image", "Message", "UserType", "SteamId", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.Error), global::RpcCommunicationChat.Error.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationChat.MutedUsers), global::RpcCommunicationChat.MutedUsers.Parser, new[]{ "SteamId", "Expires", "Reason", "Seconds", "Timestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///None field is required
  /// </summary>
  public sealed partial class GetMessagesOnParamsRequest : pb::IMessage<GetMessagesOnParamsRequest> {
    private static readonly pb::MessageParser<GetMessagesOnParamsRequest> _parser = new pb::MessageParser<GetMessagesOnParamsRequest>(() => new GetMessagesOnParamsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMessagesOnParamsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMessagesOnParamsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMessagesOnParamsRequest(GetMessagesOnParamsRequest other) : this() {
      steamId_ = other.steamId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMessagesOnParamsRequest Clone() {
      return new GetMessagesOnParamsRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private string startTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private string endTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMessagesOnParamsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMessagesOnParamsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMessagesOnParamsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            StartTime = input.ReadString();
            break;
          }
          case 26: {
            EndTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessagesResponse : pb::IMessage<MessagesResponse> {
    private static readonly pb::MessageParser<MessagesResponse> _parser = new pb::MessageParser<MessagesResponse>(() => new MessagesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesResponse(MessagesResponse other) : this() {
      chatMessage_ = other.chatMessage_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesResponse Clone() {
      return new MessagesResponse(this);
    }

    /// <summary>Field number for the "chatMessage" field.</summary>
    public const int ChatMessageFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunicationChat.ChatMessage> _repeated_chatMessage_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunicationChat.ChatMessage.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationChat.ChatMessage> chatMessage_ = new pbc::RepeatedField<global::RpcCommunicationChat.ChatMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationChat.ChatMessage> ChatMessage {
      get { return chatMessage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chatMessage_.Equals(other.chatMessage_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chatMessage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chatMessage_.WriteTo(output, _repeated_chatMessage_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chatMessage_.CalculateSize(_repeated_chatMessage_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagesResponse other) {
      if (other == null) {
        return;
      }
      chatMessage_.Add(other.chatMessage_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chatMessage_.AddEntriesFrom(input, _repeated_chatMessage_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLatestMessagesRequest : pb::IMessage<GetLatestMessagesRequest> {
    private static readonly pb::MessageParser<GetLatestMessagesRequest> _parser = new pb::MessageParser<GetLatestMessagesRequest>(() => new GetLatestMessagesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLatestMessagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLatestMessagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLatestMessagesRequest(GetLatestMessagesRequest other) : this() {
      messagesAmount_ = other.messagesAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLatestMessagesRequest Clone() {
      return new GetLatestMessagesRequest(this);
    }

    /// <summary>Field number for the "messagesAmount" field.</summary>
    public const int MessagesAmountFieldNumber = 1;
    private int messagesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessagesAmount {
      get { return messagesAmount_; }
      set {
        messagesAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLatestMessagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLatestMessagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessagesAmount != other.MessagesAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessagesAmount != 0) hash ^= MessagesAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessagesAmount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessagesAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessagesAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessagesAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLatestMessagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessagesAmount != 0) {
        MessagesAmount = other.MessagesAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessagesAmount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertMessageRequest : pb::IMessage<InsertMessageRequest> {
    private static readonly pb::MessageParser<InsertMessageRequest> _parser = new pb::MessageParser<InsertMessageRequest>(() => new InsertMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageRequest(InsertMessageRequest other) : this() {
      ChatMessage = other.chatMessage_ != null ? other.ChatMessage.Clone() : null;
      antiSpamSeconds_ = other.antiSpamSeconds_;
      ignoreRules_ = other.ignoreRules_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageRequest Clone() {
      return new InsertMessageRequest(this);
    }

    /// <summary>Field number for the "chatMessage" field.</summary>
    public const int ChatMessageFieldNumber = 1;
    private global::RpcCommunicationChat.ChatMessage chatMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationChat.ChatMessage ChatMessage {
      get { return chatMessage_; }
      set {
        chatMessage_ = value;
      }
    }

    /// <summary>Field number for the "antiSpamSeconds" field.</summary>
    public const int AntiSpamSecondsFieldNumber = 2;
    private int antiSpamSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AntiSpamSeconds {
      get { return antiSpamSeconds_; }
      set {
        antiSpamSeconds_ = value;
      }
    }

    /// <summary>Field number for the "ignoreRules" field.</summary>
    public const int IgnoreRulesFieldNumber = 3;
    private bool ignoreRules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreRules {
      get { return ignoreRules_; }
      set {
        ignoreRules_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (AntiSpamSeconds != other.AntiSpamSeconds) return false;
      if (IgnoreRules != other.IgnoreRules) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chatMessage_ != null) hash ^= ChatMessage.GetHashCode();
      if (AntiSpamSeconds != 0) hash ^= AntiSpamSeconds.GetHashCode();
      if (IgnoreRules != false) hash ^= IgnoreRules.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chatMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChatMessage);
      }
      if (AntiSpamSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AntiSpamSeconds);
      }
      if (IgnoreRules != false) {
        output.WriteRawTag(24);
        output.WriteBool(IgnoreRules);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chatMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (AntiSpamSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AntiSpamSeconds);
      }
      if (IgnoreRules != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.chatMessage_ != null) {
        if (chatMessage_ == null) {
          chatMessage_ = new global::RpcCommunicationChat.ChatMessage();
        }
        ChatMessage.MergeFrom(other.ChatMessage);
      }
      if (other.AntiSpamSeconds != 0) {
        AntiSpamSeconds = other.AntiSpamSeconds;
      }
      if (other.IgnoreRules != false) {
        IgnoreRules = other.IgnoreRules;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (chatMessage_ == null) {
              chatMessage_ = new global::RpcCommunicationChat.ChatMessage();
            }
            input.ReadMessage(chatMessage_);
            break;
          }
          case 16: {
            AntiSpamSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            IgnoreRules = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertMessageResponse : pb::IMessage<InsertMessageResponse> {
    private static readonly pb::MessageParser<InsertMessageResponse> _parser = new pb::MessageParser<InsertMessageResponse>(() => new InsertMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageResponse(InsertMessageResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertMessageResponse Clone() {
      return new InsertMessageResponse(this);
    }

    /// <summary>Field number for the "chatMessage" field.</summary>
    public const int ChatMessageFieldNumber = 1;
    /// <summary>
    ///Broadcast to all, including "original message sender"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationChat.ChatMessage ChatMessage {
      get { return dataCase_ == DataOneofCase.ChatMessage ? (global::RpcCommunicationChat.ChatMessage) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    /// <summary>
    ///Send to "original message sender" only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationChat.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunicationChat.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      ChatMessage = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.ChatMessage) {
        output.WriteRawTag(10);
        output.WriteMessage(ChatMessage);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertMessageResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunicationChat.ChatMessage subBuilder = new global::RpcCommunicationChat.ChatMessage();
            if (dataCase_ == DataOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunicationChat.Error subBuilder = new global::RpcCommunicationChat.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///      MuteUser       //
  /// </summary>
  public sealed partial class MuteUserRequest : pb::IMessage<MuteUserRequest> {
    private static readonly pb::MessageParser<MuteUserRequest> _parser = new pb::MessageParser<MuteUserRequest>(() => new MuteUserRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MuteUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserRequest(MuteUserRequest other) : this() {
      steamId_ = other.steamId_;
      seconds_ = other.seconds_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserRequest Clone() {
      return new MuteUserRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 2;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MuteUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MuteUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (Seconds != other.Seconds) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (Seconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seconds);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MuteUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 16: {
            Seconds = input.ReadInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Send back to admin for confirmation, maybe also to the banned user?
  /// </summary>
  public sealed partial class MuteUserResponse : pb::IMessage<MuteUserResponse> {
    private static readonly pb::MessageParser<MuteUserResponse> _parser = new pb::MessageParser<MuteUserResponse>(() => new MuteUserResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MuteUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserResponse(MuteUserResponse other) : this() {
      steamId_ = other.steamId_;
      expires_ = other.expires_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteUserResponse Clone() {
      return new MuteUserResponse(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expires" field.</summary>
    public const int ExpiresFieldNumber = 2;
    private int expires_;
    /// <summary>
    ///seconds until mute expires
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Expires {
      get { return expires_; }
      set {
        expires_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MuteUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MuteUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (Expires != other.Expires) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Expires != 0) hash ^= Expires.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (Expires != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Expires);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Expires != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Expires);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MuteUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Expires != 0) {
        Expires = other.Expires;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 16: {
            Expires = input.ReadInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnMuteUserRequest : pb::IMessage<UnMuteUserRequest> {
    private static readonly pb::MessageParser<UnMuteUserRequest> _parser = new pb::MessageParser<UnMuteUserRequest>(() => new UnMuteUserRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnMuteUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteUserRequest(UnMuteUserRequest other) : this() {
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteUserRequest Clone() {
      return new UnMuteUserRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnMuteUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnMuteUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnMuteUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MutedUsersResponse : pb::IMessage<MutedUsersResponse> {
    private static readonly pb::MessageParser<MutedUsersResponse> _parser = new pb::MessageParser<MutedUsersResponse>(() => new MutedUsersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutedUsersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsersResponse(MutedUsersResponse other) : this() {
      mutedUsers_ = other.mutedUsers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsersResponse Clone() {
      return new MutedUsersResponse(this);
    }

    /// <summary>Field number for the "mutedUsers" field.</summary>
    public const int MutedUsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunicationChat.MutedUsers> _repeated_mutedUsers_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunicationChat.MutedUsers.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationChat.MutedUsers> mutedUsers_ = new pbc::RepeatedField<global::RpcCommunicationChat.MutedUsers>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationChat.MutedUsers> MutedUsers {
      get { return mutedUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutedUsersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutedUsersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mutedUsers_.Equals(other.mutedUsers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mutedUsers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mutedUsers_.WriteTo(output, _repeated_mutedUsers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mutedUsers_.CalculateSize(_repeated_mutedUsers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutedUsersResponse other) {
      if (other == null) {
        return;
      }
      mutedUsers_.Add(other.mutedUsers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mutedUsers_.AddEntriesFrom(input, _repeated_mutedUsers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      name_ = other.name_;
      image_ = other.image_;
      message_ = other.message_;
      userType_ = other.userType_;
      steamId_ = other.steamId_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 4;
    private string userType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserType {
      get { return userType_; }
      set {
        userType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 5;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private string timestamp_ = "";
    /// <summary>
    ///Only on response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Image != other.Image) return false;
      if (Message != other.Message) return false;
      if (UserType != other.UserType) return false;
      if (SteamId != other.SteamId) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (UserType.Length != 0) hash ^= UserType.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Image);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (UserType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserType);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SteamId);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UserType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserType);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.UserType.Length != 0) {
        UserType = other.UserType;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Image = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            UserType = input.ReadString();
            break;
          }
          case 42: {
            SteamId = input.ReadString();
            break;
          }
          case 50: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MutedUsers : pb::IMessage<MutedUsers> {
    private static readonly pb::MessageParser<MutedUsers> _parser = new pb::MessageParser<MutedUsers>(() => new MutedUsers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutedUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsers(MutedUsers other) : this() {
      steamId_ = other.steamId_;
      expires_ = other.expires_;
      reason_ = other.reason_;
      seconds_ = other.seconds_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutedUsers Clone() {
      return new MutedUsers(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expires" field.</summary>
    public const int ExpiresFieldNumber = 2;
    private int expires_;
    /// <summary>
    ///seconds until mute expires
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Expires {
      get { return expires_; }
      set {
        expires_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 4;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutedUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutedUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (Expires != other.Expires) return false;
      if (Reason != other.Reason) return false;
      if (Seconds != other.Seconds) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Expires != 0) hash ^= Expires.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (Expires != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Expires);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (Seconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seconds);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Expires != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Expires);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutedUsers other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Expires != 0) {
        Expires = other.Expires;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 16: {
            Expires = input.ReadInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
          case 32: {
            Seconds = input.ReadInt32();
            break;
          }
          case 42: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
