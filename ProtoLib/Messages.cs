// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunication {

  /// <summary>Holder for reflection information generated from protofiles/messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for protofiles/messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlwcm90b2ZpbGVzL21lc3NhZ2VzLnByb3RvEhZXZWJzb2NrZXRDb21tdW5p",
            "Y2F0aW9uIi0KGkdldFBsYXllckJhY2tncm91bmRSZXF1ZXN0Eg8KB3N0ZWFt",
            "SWQYASABKAkibgobR2V0UGxheWVyQmFja2dyb3VuZFJlc3BvbnNlEhcKDWJh",
            "Y2tncm91bmRVcmwYASABKAlIABIuCgVlcnJvchgCIAEoCzIdLldlYnNvY2tl",
            "dENvbW11bmljYXRpb24uRXJyb3JIAEIGCgREYXRhIg4KDEVtcHR5TWVzc2Fn",
            "ZSJCChZHZXRCb3RMb2dpbkluZm9SZXF1ZXN0EigKA2JvdBgBIAEoCzIbLldl",
            "YnNvY2tldENvbW11bmljYXRpb24uQm90IoUBChdHZXRCb3RMb2dpbkluZm9S",
            "ZXNwb25zZRIyCgdib3RJbmZvGAEgASgLMh8uV2Vic29ja2V0Q29tbXVuaWNh",
            "dGlvbi5Cb3RJbmZvSAASLgoFZXJyb3IYAiABKAsyHS5XZWJzb2NrZXRDb21t",
            "dW5pY2F0aW9uLkVycm9ySABCBgoERGF0YSKUAQoHQm90SW5mbxIoCgNib3QY",
            "ASABKAsyGy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkJvdBIQCghwYXNzd29y",
            "ZBgCIAEoCRIQCghhdXRoQ29kZRgDIAEoCRIRCglhY2NvdW50SWQYBCABKAkS",
            "EQoJdHJhZGVMaW5rGAUgASgJEhUKDXN0YXR1c01lc3NhZ2UYBiABKAkigwEK",
            "E0dldE9mZmVyTG9nZ1JlcXVlc3QSDwoHc3RlYW1JZBgBIAEoCRISCgpzdGF0",
            "dXNDb2RlGAIgASgFEg8KB29mZmVySWQYAyABKAkSKAoDYm90GAQgASgLMhsu",
            "V2Vic29ja2V0Q29tbXVuaWNhdGlvbi5Cb3QSDAoEcGFnZRgFIAEoBSI5ChVH",
            "ZXRPcHNraW5zTG9nZ1JlcXVlc3QSEgoKc3RhdHVzQ29kZRgBIAEoBRIMCgRw",
            "YWdlGAIgASgFIicKF0dldEV4Y2VwdGlvbkxvZ2dSZXF1ZXN0EgwKBHBhZ2UY",
            "ASABKAUiXwoRR2V0Qm90TG9nZ1JlcXVlc3QSEgoKc3RhdHVzQ29kZRgBIAEo",
            "BRIoCgNib3QYAiABKAsyGy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkJvdBIM",
            "CgRwYWdlGAMgASgFIocBChRHZXRPZmZlckxvZ2dSZXNwb25zZRI4CgRkYXRh",
            "GAEgAygLMiouV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5PZmZlclN0YXR1c1Jl",
            "cXVlc3QSNQoFcGFnZXMYAiABKAsyJi5XZWJzb2NrZXRDb21tdW5pY2F0aW9u",
            "LlBhZ2luYXRpb25JbmZvIpYBChZHZXRPcHNraW5zTG9nZ1Jlc3BvbnNlEkUK",
            "BGRhdGEYASADKAsyNy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLlNlbGxJdGVt",
            "c0Zyb21PcHNraW5zQm90UmVzcG9uc2USNQoFcGFnZXMYAiABKAsyJi5XZWJz",
            "b2NrZXRDb21tdW5pY2F0aW9uLlBhZ2luYXRpb25JbmZvIoIBChhHZXRFeGNl",
            "cHRpb25Mb2dnUmVzcG9uc2USLwoEZGF0YRgBIAMoCzIhLldlYnNvY2tldENv",
            "bW11bmljYXRpb24uRXhjZXB0aW9uEjUKBXBhZ2VzGAIgASgLMiYuV2Vic29j",
            "a2V0Q29tbXVuaWNhdGlvbi5QYWdpbmF0aW9uSW5mbyKKAQoSR2V0Qm90TG9n",
            "Z1Jlc3BvbnNlEj0KBGRhdGEYASADKAsyLy5XZWJzb2NrZXRDb21tdW5pY2F0",
            "aW9uLkJvdFN0YXR1c0NoYW5nZWRSZXF1ZXN0EjUKBXBhZ2VzGAIgASgLMiYu",
            "V2Vic29ja2V0Q29tbXVuaWNhdGlvbi5QYWdpbmF0aW9uSW5mbyJbCg5QYWdp",
            "bmF0aW9uSW5mbxINCgV0b3RhbBgBIAEoBRINCgVsaW1pdBgCIAEoBRIOCgZv",
            "ZmZzZXQYAyABKAUSDAoEcGFnZRgEIAEoBRINCgVwYWdlcxgFIAEoBSI0CglF",
            "eGNlcHRpb24SFAoMZXJyb3JNZXNzYWdlGAEgASgJEhEKCXRpbWVzdGFtcBgC",
            "IAEoCSIeChxBY2NvdW50QmFsYW5jZU9wc2tpbnNSZXF1ZXN0IqABCh1BY2Nv",
            "dW50QmFsYW5jZU9wc2tpbnNSZXNwb25zZRJHCg5hY2NvdW50QmFsYW5jZRgB",
            "IAEoCzItLldlYnNvY2tldENvbW11bmljYXRpb24uT3Bza2luc0FjY291bnRC",
            "YWxhbmNlSAASLgoFZXJyb3IYAiABKAsyHS5XZWJzb2NrZXRDb21tdW5pY2F0",
            "aW9uLkVycm9ySABCBgoERGF0YSKCAQoVT3Bza2luc0FjY291bnRCYWxhbmNl",
            "EhQKDHRvdGFsQmFsYW5jZRgBIAEoBRIdChVwZW5kaW5nQ2FzaG91dEJhbGFu",
            "Y2UYAiABKAUSGAoQZGVwb3NpdGVkQmFsYW5jZRgDIAEoBRIaChJjYXNob3V0",
            "YWJsZUJhbGFuY2UYBCABKAUiKwoZV2l0aGRyYXdCdGNPcHNraW5zUmVxdWVz",
            "dBIOCgZhbW91bnQYASABKAUiZwoaV2l0aGRyYXdCdGNPcHNraW5zUmVzcG9u",
            "c2USEQoHc3VjY2VzcxgBIAEoCEgAEi4KBWVycm9yGAIgASgLMh0uV2Vic29j",
            "a2V0Q29tbXVuaWNhdGlvbi5FcnJvckgAQgYKBERhdGEijQEKElN0ZWFtU3Rh",
            "dHVzUmVxdWVzdBISCgpzdGF0dXNDb2RlGAEgASgFEhUKDXN0YXR1c01lc3Nh",
            "Z2UYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRIoCgNib3QYBCABKAsyGy5XZWJz",
            "b2NrZXRDb21tdW5pY2F0aW9uLkJvdBIRCgl0aW1lc3RhbXAYBSABKAkiFQoT",
            "U3RlYW1TdGF0dXNSZXNwb25zZSKSAQoXQm90U3RhdHVzQ2hhbmdlZFJlcXVl",
            "c3QSEgoKc3RhdHVzQ29kZRgBIAEoBRIVCg1zdGF0dXNNZXNzYWdlGAIgASgJ",
            "EigKA2JvdBgDIAEoCzIbLldlYnNvY2tldENvbW11bmljYXRpb24uQm90Eg8K",
            "B21lc3NhZ2UYBCABKAkSEQoJdGltZXN0YW1wGAUgASgJIhoKGEJvdFN0YXR1",
            "c0NoYW5nZWRSZXNwb25zZSKQAQobT3Bza2luc1N0YXR1c0NoYW5nZWRSZXF1",
            "ZXN0EhIKCnN0YXR1c0NvZGUYASABKAUSFQoNc3RhdHVzTWVzc2FnZRgCIAEo",
            "CRIzCgVlcnJvchgDIAEoCzIkLldlYnNvY2tldENvbW11bmljYXRpb24ub3Bz",
            "a2luc0Vycm9yEhEKCXRpbWVzdGFtcBgEIAEoCSIeChxPcHNraW5zU3RhdHVz",
            "Q2hhbmdlZFJlc3BvbnNlIicKFEdldFBsYXllckluZm9SZXF1ZXN0Eg8KB3N0",
            "ZWFtSWQYASABKAkiiQEKFUdldFBsYXllckluZm9SZXNwb25zZRI4CgpwbGF5",
            "ZXJJbmZvGAEgASgLMiIuV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5QbGF5ZXJJ",
            "bmZvSAASLgoFZXJyb3IYAiABKAsyHS5XZWJzb2NrZXRDb21tdW5pY2F0aW9u",
            "LkVycm9ySABCBgoERGF0YSL9AQoKUGxheWVySW5mbxIPCgdzdGVhbUlkGAEg",
            "ASgJEhMKC3BlcnNvbmFOYW1lGAIgASgJEg4KBmF2YXRhchgDIAEoCRIUCgxh",
            "dmF0YXJNZWRpdW0YBCABKAkSEgoKYXZhdGFyRnVsbBgFIAEoCRITCgtvbmxp",
            "bmVTdGF0ZRgGIAEoCRIbChNwcm9maWxlUHJpdmFjeVN0YXRlGAcgASgJEhUK",
            "DXRyYWRlQmFuU3RhdGUYCCABKAkSGAoQaXNMaW1pdGVkQWNjb3VudBgJIAEo",
            "CBIXCg9ncm91cHNTdGVhbWlkNjQYCiADKAkSEwoLbWVtYmVyU2luY2UYCyAB",
            "KAki0wIKEk9mZmVyU3RhdHVzUmVxdWVzdBISCgpzdGF0dXNDb2RlGAEgASgF",
            "EhUKDXN0YXR1c01lc3NhZ2UYAiABKAkSDwoHc3RlYW1JZBgDIAEoCRIoCgNi",
            "b3QYBCABKAsyGy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkJvdBI5CgVlcnJv",
            "chgFIAEoCzIoLldlYnNvY2tldENvbW11bmljYXRpb24uT2ZmZXJTdGF0dXNF",
            "cnJvckgAEj0KCW9mZmVyU2VuZBgGIAEoCzIoLldlYnNvY2tldENvbW11bmlj",
            "YXRpb24uT2ZmZXJTdGF0dXNPZmZlckgAEhEKCXRpbWVzdGFtcBgHIAEoCRIw",
            "CgppbnB1dEl0ZW1zGAggAygLMhwuV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5J",
            "dGVtEhAKCHNlbmRJdGVtGAkgASgIQgYKBERhdGEiIwoQT2ZmZXJTdGF0dXNF",
            "cnJvchIPCgdtZXNzYWdlGAEgASgJIkoKEE9mZmVyU3RhdHVzT2ZmZXISNgoK",
            "c3RlYW1PZmZlchgDIAEoCzIiLldlYnNvY2tldENvbW11bmljYXRpb24uU3Rl",
            "YW1PZmZlciIqChNPZmZlclN0YXR1c1Jlc3BvbnNlEhMKC2l0SXNIYW5kbGVk",
            "GAEgASgIIqEBCh9HZXRQbGF5ZXJTdGVhbUludmVudG9yeVJlc3BvbnNlEkYK",
            "D3BsYXllckludmVudG9yeRgBIAEoCzIrLldlYnNvY2tldENvbW11bmljYXRp",
            "b24uUGxheWVyUmVzcG9uc2VJdGVtc0gAEi4KBWVycm9yGAIgASgLMh0uV2Vi",
            "c29ja2V0Q29tbXVuaWNhdGlvbi5FcnJvckgAQgYKBERhdGEibgoeR2V0UGxh",
            "eWVyU3RlYW1JbnZlbnRvcnlSZXF1ZXN0Eg8KB3N0ZWFtSWQYASABKAkSOwoQ",
            "aW52ZW50b3J5VG9GZXRjaBgCIAEoCzIhLldlYnNvY2tldENvbW11bmljYXRp",
            "b24uSW52ZW50b3J5IkIKE1BsYXllclJlc3BvbnNlSXRlbXMSKwoFaXRlbXMY",
            "ASADKAsyHC5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkl0ZW0iLQoJSW52ZW50",
            "b3J5Eg0KBWFwcElkGAEgASgFEhEKCWNvbnRleHRJZBgCIAEoCSKgAQoQTWFr",
            "ZU9mZmVyUmVxdWVzdBIqCgR1c2VyGAEgASgLMhwuV2Vic29ja2V0Q29tbXVu",
            "aWNhdGlvbi5Vc2VyEg8KB2JvdE5hbWUYAiABKAkSDwoHbWVzc2FnZRgDIAEo",
            "CRIRCglzZW5kSXRlbXMYBCABKAgSKwoFaXRlbXMYBSADKAsyHC5XZWJzb2Nr",
            "ZXRDb21tdW5pY2F0aW9uLkl0ZW0i4QEKEU1ha2VPZmZlclJlc3BvbnNlEigK",
            "A2JvdBgBIAEoCzIbLldlYnNvY2tldENvbW11bmljYXRpb24uQm90Eg8KB3N0",
            "ZWFtSWQYAiABKAkSEgoKc3RhdHVzQ29kZRgDIAEoBRIVCg1zdGF0dXNNZXNz",
            "YWdlGAQgASgJEi4KBW9mZmVyGAUgASgLMh0uV2Vic29ja2V0Q29tbXVuaWNh",
            "dGlvbi5PZmZlckgAEi4KBWVycm9yGAYgASgLMh0uV2Vic29ja2V0Q29tbXVu",
            "aWNhdGlvbi5FcnJvckgAQgYKBERhdGEiPwoFT2ZmZXISNgoKc3RlYW1PZmZl",
            "chgDIAEoCzIiLldlYnNvY2tldENvbW11bmljYXRpb24uU3RlYW1PZmZlciIq",
            "CgRVc2VyEg8KB3N0ZWFtSWQYASABKAkSEQoJdHJhZGVMaW5rGAIgASgJIs4C",
            "CgpTdGVhbU9mZmVyEjAKB3BhcnRuZXIYASABKAsyHy5XZWJzb2NrZXRDb21t",
            "dW5pY2F0aW9uLlBhcnRuZXISCgoCaWQYAiABKAkSDwoHbWVzc2FnZRgDIAEo",
            "CRINCgVzdGF0ZRgEIAEoBRIxCgtpdGVtc1RvR2l2ZRgFIAMoCzIcLldlYnNv",
            "Y2tldENvbW11bmljYXRpb24uSXRlbRI0Cg5pdGVtc1RvUmVjZWl2ZRgGIAMo",
            "CzIcLldlYnNvY2tldENvbW11bmljYXRpb24uSXRlbRISCgppc091ck9mZmVy",
            "GAcgASgIEhcKD3VuaXh0aW1lQ3JlYXRlZBgIIAEoCRIXCg91bml4dGltZVVw",
            "ZGF0ZWQYCSABKAkSFwoPdW5peHRpbWVFeHBpcmVzGAogASgJEhoKEmNvbmZp",
            "cm1hdGlvbk1ldGhvZBgLIAEoBSJOCgdQYXJ0bmVyEhAKCHVuaXZlcnNlGAEg",
            "ASgFEgwKBHR5cGUYAiABKAUSEAoIaW5zdGFuY2UYAyABKAUSEQoJYWNjb3Vu",
            "dElkGAQgASgFIuUCCgRJdGVtEg0KBWFwcElkGAEgASgFEhEKCWNvbnRleHRJ",
            "ZBgCIAEoCRIPCgdhc3NldElkGAMgASgJEg8KB2NsYXNzSWQYBCABKAkSEgoK",
            "aW5zdGFuY2VJZBgFIAEoCRIOCgZhbW91bnQYBiABKAUSDwoHaWNvblVybBgH",
            "IAEoCRIUCgxpY29uVXJsTGFyZ2UYCCABKAkSDAoEbmFtZRgJIAEoCRIWCg5t",
            "YXJrZXRIYXNoTmFtZRgKIAEoCRISCgptYXJrZXROYW1lGAsgASgJEhEKCW5h",
            "bWVDb2xvchgMIAEoCRIXCg9iYWNrZ3JvdW5kQ29sb3IYDSABKAkSDAoEdHlw",
            "ZRgOIAEoCRIQCgh0cmFkYWJsZRgPIAEoCBISCgptYXJrZXRhYmxlGBAgASgI",
            "EhEKCWNvbW1vZGl0eRgRIAEoCBIhChltYXJrZXRUcmFkYWJsZVJlc3RyaWN0",
            "aW9uGBIgASgFIhUKE1N0YXJ0QWxsQm90c1JlcXVlc3QiLwoUU3RhcnRBbGxC",
            "b3RzUmVzcG9uc2USFwoPcmVzcG9uc2VNZXNzYWdlGAEgASgJIhQKElN0b3BB",
            "bGxCb3RzUmVxdWVzdCIuChNTdG9wQWxsQm90c1Jlc3BvbnNlEhcKD3Jlc3Bv",
            "bnNlTWVzc2FnZRgBIAEoCSJCCh5TZWxsSXRlbXNGcm9tT3Bza2luc0JvdFJl",
            "cXVlc3QSDQoFYXBwSWQYASABKAUSEQoJY29udGV4dElkGAIgASgJItUBCh9T",
            "ZWxsSXRlbXNGcm9tT3Bza2luc0JvdFJlc3BvbnNlEhIKCnN0YXR1c0NvZGUY",
            "ASABKAUSFQoNc3RhdHVzTWVzc2FnZRgCIAEoCRI1CgVlcnJvchgDIAEoCzIk",
            "LldlYnNvY2tldENvbW11bmljYXRpb24ub3Bza2luc0Vycm9ySAASNQoFaXRl",
            "bXMYBCABKAsyJC5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLm9wc2tpbnNJdGVt",
            "c0gAEhEKCXRpbWVzdGFtcBgFIAEoCUIGCgREYXRhIloKDG9wc2tpbnNFcnJv",
            "chIPCgdtZXNzYWdlGAEgASgJEjkKDXJlamVjdGVkSXRlbXMYAiADKAsyIi5X",
            "ZWJzb2NrZXRDb21tdW5pY2F0aW9uLk9wc2tpbkl0ZW0ihAEKDG9wc2tpbnNJ",
            "dGVtcxI5Cg1hY2NlcHRlZEl0ZW1zGAMgAygLMiIuV2Vic29ja2V0Q29tbXVu",
            "aWNhdGlvbi5PcHNraW5JdGVtEjkKDXJlamVjdGVkSXRlbXMYBCADKAsyIi5X",
            "ZWJzb2NrZXRDb21tdW5pY2F0aW9uLk9wc2tpbkl0ZW0ivgEKCk9wc2tpbkl0",
            "ZW0SDwoHY2xhc3NJZBgBIAEoCRISCgppbnN0YW5jZUlkGAIgASgJEg8KB2Fz",
            "c2V0SWQYAyABKAkSGgoSaW5zdGFudHNlbGxDcmVkaXRzGAQgASgFEhgKEGlu",
            "c3RhbnRzZWxsTW9uZXkYBSABKAUSDgoGYW1vdW50GAYgASgFEhEKCWNvbnRl",
            "eHRJZBgHIAEoCRINCgVhcHBJZBgIIAEoBRISCgplcnJNZXNzYWdlGAkgASgJ",
            "IsYBChNvcHNraW5zUmVqZWN0ZWRJdGVtEg0KBWFwcElkGAEgASgFEhEKCWNv",
            "bnRleHRJZBgCIAEoCRIPCgdhc3NldElkGAMgASgJEg8KB2NsYXNzSWQYBCAB",
            "KAkSEQoJaW5zdGFjZUlkGAUgASgJEg4KBmFtb3VudBgGIAEoBRISCgplcnJN",
            "ZXNzYWdlGAcgASgJEhoKEmluc3RhbnRTZWxsQ3JlZGl0cxgIIAEoBRIYChBp",
            "bnN0YW50U2VsbE1vbmV5GAkgASgFIrIBChNvcHNraW5zQWNjZXB0ZWRJdGVt",
            "Eg0KBWFwcElkGAEgASgFEhEKCWNvbnRleHRJZBgCIAEoCRIPCgdhc3NldElk",
            "GAMgASgJEg8KB2NsYXNzSWQYBCABKAkSEQoJaW5zdGFjZUlkGAUgASgJEg4K",
            "BmFtb3VudBgGIAEoBRIaChJpbnN0YW50U2VsbENyZWRpdHMYByABKAUSGAoQ",
            "aW5zdGFudFNlbGxNb25leRgIIAEoBSIYCgVFcnJvchIPCgdtZXNzYWdlGAEg",
            "ASgJIloKA0JvdBIQCgh1c2VybmFtZRgBIAEoCRIPCgdzdGVhbUlkGAIgASgJ",
            "EjAKB2JvdFR5cGUYAyABKA4yHy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLmJv",
            "dFR5cGUqMwoHYm90VHlwZRIKCgZub3RTZXQQABIPCgtvZmZlclZlbmRvchAB",
            "EgsKB29wc2tpbnMQAjLfDQoMU3RlYW1TZXJ2aWNlEowBChdHZXRQbGF5ZXJT",
            "dGVhbUludmVudG9yeRI2LldlYnNvY2tldENvbW11bmljYXRpb24uR2V0UGxh",
            "eWVyU3RlYW1JbnZlbnRvcnlSZXF1ZXN0GjcuV2Vic29ja2V0Q29tbXVuaWNh",
            "dGlvbi5HZXRQbGF5ZXJTdGVhbUludmVudG9yeVJlc3BvbnNlIgASYgoJTWFr",
            "ZU9mZmVyEiguV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5NYWtlT2ZmZXJSZXF1",
            "ZXN0GikuV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5NYWtlT2ZmZXJSZXNwb25z",
            "ZSIAEm4KDUdldFBsYXllckluZm8SLC5XZWJzb2NrZXRDb21tdW5pY2F0aW9u",
            "LkdldFBsYXllckluZm9SZXF1ZXN0Gi0uV2Vic29ja2V0Q29tbXVuaWNhdGlv",
            "bi5HZXRQbGF5ZXJJbmZvUmVzcG9uc2UiABKAAQoTR2V0UGxheWVyQmFja2dy",
            "b3VuZBIyLldlYnNvY2tldENvbW11bmljYXRpb24uR2V0UGxheWVyQmFja2dy",
            "b3VuZFJlcXVlc3QaMy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkdldFBsYXll",
            "ckJhY2tncm91bmRSZXNwb25zZSIAEn4KCVNlbGxJdGVtcxI2LldlYnNvY2tl",
            "dENvbW11bmljYXRpb24uU2VsbEl0ZW1zRnJvbU9wc2tpbnNCb3RSZXF1ZXN0",
            "GjcuV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5TZWxsSXRlbXNGcm9tT3Bza2lu",
            "c0JvdFJlc3BvbnNlIgASfQoSV2l0aGRyYXdCdGNPcHNraW5zEjEuV2Vic29j",
            "a2V0Q29tbXVuaWNhdGlvbi5XaXRoZHJhd0J0Y09wc2tpbnNSZXF1ZXN0GjIu",
            "V2Vic29ja2V0Q29tbXVuaWNhdGlvbi5XaXRoZHJhd0J0Y09wc2tpbnNSZXNw",
            "b25zZSIAEoYBChVBY2NvdW50QmFsYW5jZU9wc2tpbnMSNC5XZWJzb2NrZXRD",
            "b21tdW5pY2F0aW9uLkFjY291bnRCYWxhbmNlT3Bza2luc1JlcXVlc3QaNS5X",
            "ZWJzb2NrZXRDb21tdW5pY2F0aW9uLkFjY291bnRCYWxhbmNlT3Bza2luc1Jl",
            "c3BvbnNlIgASawoMU3RhcnRBbGxCb3RzEisuV2Vic29ja2V0Q29tbXVuaWNh",
            "dGlvbi5TdGFydEFsbEJvdHNSZXF1ZXN0GiwuV2Vic29ja2V0Q29tbXVuaWNh",
            "dGlvbi5TdGFydEFsbEJvdHNSZXNwb25zZSIAEmgKC1N0b3BBbGxCb3RzEiou",
            "V2Vic29ja2V0Q29tbXVuaWNhdGlvbi5TdG9wQWxsQm90c1JlcXVlc3QaKy5X",
            "ZWJzb2NrZXRDb21tdW5pY2F0aW9uLlN0b3BBbGxCb3RzUmVzcG9uc2UiABJr",
            "CgxHZXRPZmZlckxvZ2cSKy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkdldE9m",
            "ZmVyTG9nZ1JlcXVlc3QaLC5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkdldE9m",
            "ZmVyTG9nZ1Jlc3BvbnNlIgAScQoOR2V0T3Bza2luc0xvZ2cSLS5XZWJzb2Nr",
            "ZXRDb21tdW5pY2F0aW9uLkdldE9wc2tpbnNMb2dnUmVxdWVzdBouLldlYnNv",
            "Y2tldENvbW11bmljYXRpb24uR2V0T3Bza2luc0xvZ2dSZXNwb25zZSIAEncK",
            "EEdldEV4Y2VwdGlvbkxvZ2cSLy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkdl",
            "dEV4Y2VwdGlvbkxvZ2dSZXF1ZXN0GjAuV2Vic29ja2V0Q29tbXVuaWNhdGlv",
            "bi5HZXRFeGNlcHRpb25Mb2dnUmVzcG9uc2UiABJlCgpHZXRCb3RMb2dnEiku",
            "V2Vic29ja2V0Q29tbXVuaWNhdGlvbi5HZXRCb3RMb2dnUmVxdWVzdBoqLldl",
            "YnNvY2tldENvbW11bmljYXRpb24uR2V0Qm90TG9nZ1Jlc3BvbnNlIgASdAoP",
            "R2V0Qm90TG9naW5JbmZvEi4uV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5HZXRC",
            "b3RMb2dpbkluZm9SZXF1ZXN0Gi8uV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5H",
            "ZXRCb3RMb2dpbkluZm9SZXNwb25zZSIAElQKBFBpbmcSJC5XZWJzb2NrZXRD",
            "b21tdW5pY2F0aW9uLkVtcHR5TWVzc2FnZRokLldlYnNvY2tldENvbW11bmlj",
            "YXRpb24uRW1wdHlNZXNzYWdlIgAy8AMKDVN0YXR1c0NoYW5nZWQSbwoST2Zm",
            "ZXJTdGF0dXNDaGFuZ2VkEiouV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5PZmZl",
            "clN0YXR1c1JlcXVlc3QaKy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLk9mZmVy",
            "U3RhdHVzUmVzcG9uc2UiABJvChJTdGVhbVN0YXR1c0NoYW5nZWQSKi5XZWJz",
            "b2NrZXRDb21tdW5pY2F0aW9uLlN0ZWFtU3RhdHVzUmVxdWVzdBorLldlYnNv",
            "Y2tldENvbW11bmljYXRpb24uU3RlYW1TdGF0dXNSZXNwb25zZSIAEncKEEJv",
            "dFN0YXR1c0NoYW5nZWQSLy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLkJvdFN0",
            "YXR1c0NoYW5nZWRSZXF1ZXN0GjAuV2Vic29ja2V0Q29tbXVuaWNhdGlvbi5C",
            "b3RTdGF0dXNDaGFuZ2VkUmVzcG9uc2UiABKDAQoUT3Bza2luc1N0YXR1c0No",
            "YW5nZWQSMy5XZWJzb2NrZXRDb21tdW5pY2F0aW9uLk9wc2tpbnNTdGF0dXND",
            "aGFuZ2VkUmVxdWVzdBo0LldlYnNvY2tldENvbW11bmljYXRpb24uT3Bza2lu",
            "c1N0YXR1c0NoYW5nZWRSZXNwb25zZSIAQhOqAhBScGNDb21tdW5pY2F0aW9u",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RpcCommunication.botType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerBackgroundRequest), global::RpcCommunication.GetPlayerBackgroundRequest.Parser, new[]{ "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerBackgroundResponse), global::RpcCommunication.GetPlayerBackgroundResponse.Parser, new[]{ "BackgroundUrl", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.EmptyMessage), global::RpcCommunication.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetBotLoginInfoRequest), global::RpcCommunication.GetBotLoginInfoRequest.Parser, new[]{ "Bot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetBotLoginInfoResponse), global::RpcCommunication.GetBotLoginInfoResponse.Parser, new[]{ "BotInfo", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.BotInfo), global::RpcCommunication.BotInfo.Parser, new[]{ "Bot", "Password", "AuthCode", "AccountId", "TradeLink", "StatusMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetOfferLoggRequest), global::RpcCommunication.GetOfferLoggRequest.Parser, new[]{ "SteamId", "StatusCode", "OfferId", "Bot", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetOpskinsLoggRequest), global::RpcCommunication.GetOpskinsLoggRequest.Parser, new[]{ "StatusCode", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetExceptionLoggRequest), global::RpcCommunication.GetExceptionLoggRequest.Parser, new[]{ "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetBotLoggRequest), global::RpcCommunication.GetBotLoggRequest.Parser, new[]{ "StatusCode", "Bot", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetOfferLoggResponse), global::RpcCommunication.GetOfferLoggResponse.Parser, new[]{ "Data", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetOpskinsLoggResponse), global::RpcCommunication.GetOpskinsLoggResponse.Parser, new[]{ "Data", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetExceptionLoggResponse), global::RpcCommunication.GetExceptionLoggResponse.Parser, new[]{ "Data", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetBotLoggResponse), global::RpcCommunication.GetBotLoggResponse.Parser, new[]{ "Data", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.PaginationInfo), global::RpcCommunication.PaginationInfo.Parser, new[]{ "Total", "Limit", "Offset", "Page", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Exception), global::RpcCommunication.Exception.Parser, new[]{ "ErrorMessage", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.AccountBalanceOpskinsRequest), global::RpcCommunication.AccountBalanceOpskinsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.AccountBalanceOpskinsResponse), global::RpcCommunication.AccountBalanceOpskinsResponse.Parser, new[]{ "AccountBalance", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OpskinsAccountBalance), global::RpcCommunication.OpskinsAccountBalance.Parser, new[]{ "TotalBalance", "PendingCashoutBalance", "DepositedBalance", "CashoutableBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.WithdrawBtcOpskinsRequest), global::RpcCommunication.WithdrawBtcOpskinsRequest.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.WithdrawBtcOpskinsResponse), global::RpcCommunication.WithdrawBtcOpskinsResponse.Parser, new[]{ "Success", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.SteamStatusRequest), global::RpcCommunication.SteamStatusRequest.Parser, new[]{ "StatusCode", "StatusMessage", "Message", "Bot", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.SteamStatusResponse), global::RpcCommunication.SteamStatusResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.BotStatusChangedRequest), global::RpcCommunication.BotStatusChangedRequest.Parser, new[]{ "StatusCode", "StatusMessage", "Bot", "Message", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.BotStatusChangedResponse), global::RpcCommunication.BotStatusChangedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OpskinsStatusChangedRequest), global::RpcCommunication.OpskinsStatusChangedRequest.Parser, new[]{ "StatusCode", "StatusMessage", "Error", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OpskinsStatusChangedResponse), global::RpcCommunication.OpskinsStatusChangedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerInfoRequest), global::RpcCommunication.GetPlayerInfoRequest.Parser, new[]{ "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerInfoResponse), global::RpcCommunication.GetPlayerInfoResponse.Parser, new[]{ "PlayerInfo", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.PlayerInfo), global::RpcCommunication.PlayerInfo.Parser, new[]{ "SteamId", "PersonaName", "Avatar", "AvatarMedium", "AvatarFull", "OnlineState", "ProfilePrivacyState", "TradeBanState", "IsLimitedAccount", "GroupsSteamid64", "MemberSince" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OfferStatusRequest), global::RpcCommunication.OfferStatusRequest.Parser, new[]{ "StatusCode", "StatusMessage", "SteamId", "Bot", "Error", "OfferSend", "Timestamp", "InputItems", "SendItem" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OfferStatusError), global::RpcCommunication.OfferStatusError.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OfferStatusOffer), global::RpcCommunication.OfferStatusOffer.Parser, new[]{ "SteamOffer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OfferStatusResponse), global::RpcCommunication.OfferStatusResponse.Parser, new[]{ "ItIsHandled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerSteamInventoryResponse), global::RpcCommunication.GetPlayerSteamInventoryResponse.Parser, new[]{ "PlayerInventory", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.GetPlayerSteamInventoryRequest), global::RpcCommunication.GetPlayerSteamInventoryRequest.Parser, new[]{ "SteamId", "InventoryToFetch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.PlayerResponseItems), global::RpcCommunication.PlayerResponseItems.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Inventory), global::RpcCommunication.Inventory.Parser, new[]{ "AppId", "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.MakeOfferRequest), global::RpcCommunication.MakeOfferRequest.Parser, new[]{ "User", "BotName", "Message", "SendItems", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.MakeOfferResponse), global::RpcCommunication.MakeOfferResponse.Parser, new[]{ "Bot", "SteamId", "StatusCode", "StatusMessage", "Offer", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Offer), global::RpcCommunication.Offer.Parser, new[]{ "SteamOffer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.User), global::RpcCommunication.User.Parser, new[]{ "SteamId", "TradeLink" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.SteamOffer), global::RpcCommunication.SteamOffer.Parser, new[]{ "Partner", "Id", "Message", "State", "ItemsToGive", "ItemsToReceive", "IsOurOffer", "UnixtimeCreated", "UnixtimeUpdated", "UnixtimeExpires", "ConfirmationMethod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Partner), global::RpcCommunication.Partner.Parser, new[]{ "Universe", "Type", "Instance", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Item), global::RpcCommunication.Item.Parser, new[]{ "AppId", "ContextId", "AssetId", "ClassId", "InstanceId", "Amount", "IconUrl", "IconUrlLarge", "Name", "MarketHashName", "MarketName", "NameColor", "BackgroundColor", "Type", "Tradable", "Marketable", "Commodity", "MarketTradableRestriction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.StartAllBotsRequest), global::RpcCommunication.StartAllBotsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.StartAllBotsResponse), global::RpcCommunication.StartAllBotsResponse.Parser, new[]{ "ResponseMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.StopAllBotsRequest), global::RpcCommunication.StopAllBotsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.StopAllBotsResponse), global::RpcCommunication.StopAllBotsResponse.Parser, new[]{ "ResponseMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.SellItemsFromOpskinsBotRequest), global::RpcCommunication.SellItemsFromOpskinsBotRequest.Parser, new[]{ "AppId", "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.SellItemsFromOpskinsBotResponse), global::RpcCommunication.SellItemsFromOpskinsBotResponse.Parser, new[]{ "StatusCode", "StatusMessage", "Error", "Items", "Timestamp" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.opskinsError), global::RpcCommunication.opskinsError.Parser, new[]{ "Message", "RejectedItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.opskinsItems), global::RpcCommunication.opskinsItems.Parser, new[]{ "AcceptedItems", "RejectedItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.OpskinItem), global::RpcCommunication.OpskinItem.Parser, new[]{ "ClassId", "InstanceId", "AssetId", "InstantsellCredits", "InstantsellMoney", "Amount", "ContextId", "AppId", "ErrMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.opskinsRejectedItem), global::RpcCommunication.opskinsRejectedItem.Parser, new[]{ "AppId", "ContextId", "AssetId", "ClassId", "InstaceId", "Amount", "ErrMessage", "InstantSellCredits", "InstantSellMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.opskinsAcceptedItem), global::RpcCommunication.opskinsAcceptedItem.Parser, new[]{ "AppId", "ContextId", "AssetId", "ClassId", "InstaceId", "Amount", "InstantSellCredits", "InstantSellMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Error), global::RpcCommunication.Error.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunication.Bot), global::RpcCommunication.Bot.Parser, new[]{ "Username", "SteamId", "BotType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum botType {
    [pbr::OriginalName("notSet")] NotSet = 0,
    [pbr::OriginalName("offerVendor")] OfferVendor = 1,
    [pbr::OriginalName("opskins")] Opskins = 2,
  }

  #endregion

  #region Messages
  public sealed partial class GetPlayerBackgroundRequest : pb::IMessage<GetPlayerBackgroundRequest> {
    private static readonly pb::MessageParser<GetPlayerBackgroundRequest> _parser = new pb::MessageParser<GetPlayerBackgroundRequest>(() => new GetPlayerBackgroundRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerBackgroundRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundRequest(GetPlayerBackgroundRequest other) : this() {
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundRequest Clone() {
      return new GetPlayerBackgroundRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerBackgroundRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerBackgroundRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerBackgroundRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerBackgroundResponse : pb::IMessage<GetPlayerBackgroundResponse> {
    private static readonly pb::MessageParser<GetPlayerBackgroundResponse> _parser = new pb::MessageParser<GetPlayerBackgroundResponse>(() => new GetPlayerBackgroundResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerBackgroundResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundResponse(GetPlayerBackgroundResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.BackgroundUrl:
          BackgroundUrl = other.BackgroundUrl;
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBackgroundResponse Clone() {
      return new GetPlayerBackgroundResponse(this);
    }

    /// <summary>Field number for the "backgroundUrl" field.</summary>
    public const int BackgroundUrlFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundUrl {
      get { return dataCase_ == DataOneofCase.BackgroundUrl ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.BackgroundUrl;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      BackgroundUrl = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerBackgroundResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerBackgroundResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackgroundUrl != other.BackgroundUrl) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.BackgroundUrl) hash ^= BackgroundUrl.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.BackgroundUrl) {
        output.WriteRawTag(10);
        output.WriteString(BackgroundUrl);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.BackgroundUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundUrl);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerBackgroundResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.BackgroundUrl:
          BackgroundUrl = other.BackgroundUrl;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BackgroundUrl = input.ReadString();
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBotLoginInfoRequest : pb::IMessage<GetBotLoginInfoRequest> {
    private static readonly pb::MessageParser<GetBotLoginInfoRequest> _parser = new pb::MessageParser<GetBotLoginInfoRequest>(() => new GetBotLoginInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBotLoginInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoRequest(GetBotLoginInfoRequest other) : this() {
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoRequest Clone() {
      return new GetBotLoginInfoRequest(this);
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 1;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBotLoginInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBotLoginInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bot, other.Bot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bot_ != null) hash ^= Bot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBotLoginInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBotLoginInfoResponse : pb::IMessage<GetBotLoginInfoResponse> {
    private static readonly pb::MessageParser<GetBotLoginInfoResponse> _parser = new pb::MessageParser<GetBotLoginInfoResponse>(() => new GetBotLoginInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBotLoginInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoResponse(GetBotLoginInfoResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.BotInfo:
          BotInfo = other.BotInfo.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoginInfoResponse Clone() {
      return new GetBotLoginInfoResponse(this);
    }

    /// <summary>Field number for the "botInfo" field.</summary>
    public const int BotInfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.BotInfo BotInfo {
      get { return dataCase_ == DataOneofCase.BotInfo ? (global::RpcCommunication.BotInfo) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.BotInfo;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      BotInfo = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBotLoginInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBotLoginInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BotInfo, other.BotInfo)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.BotInfo) hash ^= BotInfo.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.BotInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(BotInfo);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.BotInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BotInfo);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBotLoginInfoResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.BotInfo:
          BotInfo = other.BotInfo;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunication.BotInfo subBuilder = new global::RpcCommunication.BotInfo();
            if (dataCase_ == DataOneofCase.BotInfo) {
              subBuilder.MergeFrom(BotInfo);
            }
            input.ReadMessage(subBuilder);
            BotInfo = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BotInfo : pb::IMessage<BotInfo> {
    private static readonly pb::MessageParser<BotInfo> _parser = new pb::MessageParser<BotInfo>(() => new BotInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotInfo(BotInfo other) : this() {
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      password_ = other.password_;
      authCode_ = other.authCode_;
      accountId_ = other.accountId_;
      tradeLink_ = other.tradeLink_;
      statusMessage_ = other.statusMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotInfo Clone() {
      return new BotInfo(this);
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 1;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authCode" field.</summary>
    public const int AuthCodeFieldNumber = 3;
    private string authCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthCode {
      get { return authCode_; }
      set {
        authCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradeLink" field.</summary>
    public const int TradeLinkFieldNumber = 5;
    private string tradeLink_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeLink {
      get { return tradeLink_; }
      set {
        tradeLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 6;
    private string statusMessage_ = "";
    /// <summary>
    ///Either all info if bot is online, or just login info if offline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bot, other.Bot)) return false;
      if (Password != other.Password) return false;
      if (AuthCode != other.AuthCode) return false;
      if (AccountId != other.AccountId) return false;
      if (TradeLink != other.TradeLink) return false;
      if (StatusMessage != other.StatusMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (AuthCode.Length != 0) hash ^= AuthCode.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (TradeLink.Length != 0) hash ^= TradeLink.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bot);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (AuthCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthCode);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountId);
      }
      if (TradeLink.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TradeLink);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StatusMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AuthCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthCode);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (TradeLink.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeLink);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotInfo other) {
      if (other == null) {
        return;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.AuthCode.Length != 0) {
        AuthCode = other.AuthCode;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.TradeLink.Length != 0) {
        TradeLink = other.TradeLink;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            AuthCode = input.ReadString();
            break;
          }
          case 34: {
            AccountId = input.ReadString();
            break;
          }
          case 42: {
            TradeLink = input.ReadString();
            break;
          }
          case 50: {
            StatusMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOfferLoggRequest : pb::IMessage<GetOfferLoggRequest> {
    private static readonly pb::MessageParser<GetOfferLoggRequest> _parser = new pb::MessageParser<GetOfferLoggRequest>(() => new GetOfferLoggRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOfferLoggRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggRequest(GetOfferLoggRequest other) : this() {
      steamId_ = other.steamId_;
      statusCode_ = other.statusCode_;
      offerId_ = other.offerId_;
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggRequest Clone() {
      return new GetOfferLoggRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Search params
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 3;
    private string offerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferId {
      get { return offerId_; }
      set {
        offerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 4;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 5;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOfferLoggRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOfferLoggRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (StatusCode != other.StatusCode) return false;
      if (OfferId != other.OfferId) return false;
      if (!object.Equals(Bot, other.Bot)) return false;
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (OfferId.Length != 0) hash ^= OfferId.GetHashCode();
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StatusCode);
      }
      if (OfferId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OfferId);
      }
      if (bot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bot);
      }
      if (Page != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (OfferId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferId);
      }
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOfferLoggRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.OfferId.Length != 0) {
        OfferId = other.OfferId;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 16: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 26: {
            OfferId = input.ReadString();
            break;
          }
          case 34: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 40: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOpskinsLoggRequest : pb::IMessage<GetOpskinsLoggRequest> {
    private static readonly pb::MessageParser<GetOpskinsLoggRequest> _parser = new pb::MessageParser<GetOpskinsLoggRequest>(() => new GetOpskinsLoggRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOpskinsLoggRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggRequest(GetOpskinsLoggRequest other) : this() {
      statusCode_ = other.statusCode_;
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggRequest Clone() {
      return new GetOpskinsLoggRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOpskinsLoggRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOpskinsLoggRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOpskinsLoggRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExceptionLoggRequest : pb::IMessage<GetExceptionLoggRequest> {
    private static readonly pb::MessageParser<GetExceptionLoggRequest> _parser = new pb::MessageParser<GetExceptionLoggRequest>(() => new GetExceptionLoggRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExceptionLoggRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggRequest(GetExceptionLoggRequest other) : this() {
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggRequest Clone() {
      return new GetExceptionLoggRequest(this);
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExceptionLoggRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExceptionLoggRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExceptionLoggRequest other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBotLoggRequest : pb::IMessage<GetBotLoggRequest> {
    private static readonly pb::MessageParser<GetBotLoggRequest> _parser = new pb::MessageParser<GetBotLoggRequest>(() => new GetBotLoggRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBotLoggRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggRequest(GetBotLoggRequest other) : this() {
      statusCode_ = other.statusCode_;
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggRequest Clone() {
      return new GetBotLoggRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 2;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBotLoggRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBotLoggRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (!object.Equals(Bot, other.Bot)) return false;
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (bot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bot);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBotLoggRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 24: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOfferLoggResponse : pb::IMessage<GetOfferLoggResponse> {
    private static readonly pb::MessageParser<GetOfferLoggResponse> _parser = new pb::MessageParser<GetOfferLoggResponse>(() => new GetOfferLoggResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOfferLoggResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggResponse(GetOfferLoggResponse other) : this() {
      data_ = other.data_.Clone();
      Pages = other.pages_ != null ? other.Pages.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOfferLoggResponse Clone() {
      return new GetOfferLoggResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunication.OfferStatusRequest> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunication.OfferStatusRequest.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.OfferStatusRequest> data_ = new pbc::RepeatedField<global::RpcCommunication.OfferStatusRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.OfferStatusRequest> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 2;
    private global::RpcCommunication.PaginationInfo pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PaginationInfo Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOfferLoggResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOfferLoggResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(Pages, other.Pages)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (pages_ != null) hash ^= Pages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (pages_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (pages_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOfferLoggResponse other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.pages_ != null) {
        if (pages_ == null) {
          pages_ = new global::RpcCommunication.PaginationInfo();
        }
        Pages.MergeFrom(other.Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            if (pages_ == null) {
              pages_ = new global::RpcCommunication.PaginationInfo();
            }
            input.ReadMessage(pages_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOpskinsLoggResponse : pb::IMessage<GetOpskinsLoggResponse> {
    private static readonly pb::MessageParser<GetOpskinsLoggResponse> _parser = new pb::MessageParser<GetOpskinsLoggResponse>(() => new GetOpskinsLoggResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOpskinsLoggResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggResponse(GetOpskinsLoggResponse other) : this() {
      data_ = other.data_.Clone();
      Pages = other.pages_ != null ? other.Pages.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpskinsLoggResponse Clone() {
      return new GetOpskinsLoggResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunication.SellItemsFromOpskinsBotResponse> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunication.SellItemsFromOpskinsBotResponse.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.SellItemsFromOpskinsBotResponse> data_ = new pbc::RepeatedField<global::RpcCommunication.SellItemsFromOpskinsBotResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.SellItemsFromOpskinsBotResponse> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 2;
    private global::RpcCommunication.PaginationInfo pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PaginationInfo Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOpskinsLoggResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOpskinsLoggResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(Pages, other.Pages)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (pages_ != null) hash ^= Pages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (pages_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (pages_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOpskinsLoggResponse other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.pages_ != null) {
        if (pages_ == null) {
          pages_ = new global::RpcCommunication.PaginationInfo();
        }
        Pages.MergeFrom(other.Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            if (pages_ == null) {
              pages_ = new global::RpcCommunication.PaginationInfo();
            }
            input.ReadMessage(pages_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExceptionLoggResponse : pb::IMessage<GetExceptionLoggResponse> {
    private static readonly pb::MessageParser<GetExceptionLoggResponse> _parser = new pb::MessageParser<GetExceptionLoggResponse>(() => new GetExceptionLoggResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExceptionLoggResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggResponse(GetExceptionLoggResponse other) : this() {
      data_ = other.data_.Clone();
      Pages = other.pages_ != null ? other.Pages.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExceptionLoggResponse Clone() {
      return new GetExceptionLoggResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunication.Exception> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunication.Exception.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Exception> data_ = new pbc::RepeatedField<global::RpcCommunication.Exception>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Exception> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 2;
    private global::RpcCommunication.PaginationInfo pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PaginationInfo Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExceptionLoggResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExceptionLoggResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(Pages, other.Pages)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (pages_ != null) hash ^= Pages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (pages_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (pages_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExceptionLoggResponse other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.pages_ != null) {
        if (pages_ == null) {
          pages_ = new global::RpcCommunication.PaginationInfo();
        }
        Pages.MergeFrom(other.Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            if (pages_ == null) {
              pages_ = new global::RpcCommunication.PaginationInfo();
            }
            input.ReadMessage(pages_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBotLoggResponse : pb::IMessage<GetBotLoggResponse> {
    private static readonly pb::MessageParser<GetBotLoggResponse> _parser = new pb::MessageParser<GetBotLoggResponse>(() => new GetBotLoggResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBotLoggResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggResponse(GetBotLoggResponse other) : this() {
      data_ = other.data_.Clone();
      Pages = other.pages_ != null ? other.Pages.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBotLoggResponse Clone() {
      return new GetBotLoggResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunication.BotStatusChangedRequest> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunication.BotStatusChangedRequest.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.BotStatusChangedRequest> data_ = new pbc::RepeatedField<global::RpcCommunication.BotStatusChangedRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.BotStatusChangedRequest> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 2;
    private global::RpcCommunication.PaginationInfo pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PaginationInfo Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBotLoggResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBotLoggResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(Pages, other.Pages)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (pages_ != null) hash ^= Pages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (pages_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (pages_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBotLoggResponse other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.pages_ != null) {
        if (pages_ == null) {
          pages_ = new global::RpcCommunication.PaginationInfo();
        }
        Pages.MergeFrom(other.Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            if (pages_ == null) {
              pages_ = new global::RpcCommunication.PaginationInfo();
            }
            input.ReadMessage(pages_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaginationInfo : pb::IMessage<PaginationInfo> {
    private static readonly pb::MessageParser<PaginationInfo> _parser = new pb::MessageParser<PaginationInfo>(() => new PaginationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaginationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationInfo(PaginationInfo other) : this() {
      total_ = other.total_;
      limit_ = other.limit_;
      offset_ = other.offset_;
      page_ = other.page_;
      pages_ = other.pages_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaginationInfo Clone() {
      return new PaginationInfo(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 4;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 5;
    private int pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaginationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaginationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      if (Page != other.Page) return false;
      if (Pages != other.Pages) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (Pages != 0) hash ^= Pages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Total);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Offset);
      }
      if (Page != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Page);
      }
      if (Pages != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (Pages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaginationInfo other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.Pages != 0) {
        Pages = other.Pages;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            Offset = input.ReadInt32();
            break;
          }
          case 32: {
            Page = input.ReadInt32();
            break;
          }
          case 40: {
            Pages = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Exception : pb::IMessage<Exception> {
    private static readonly pb::MessageParser<Exception> _parser = new pb::MessageParser<Exception>(() => new Exception());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exception> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception(Exception other) : this() {
      errorMessage_ = other.errorMessage_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception Clone() {
      return new Exception(this);
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 1;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exception);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exception other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorMessage != other.ErrorMessage) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrorMessage);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exception other) {
      if (other == null) {
        return;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 18: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountBalanceOpskinsRequest : pb::IMessage<AccountBalanceOpskinsRequest> {
    private static readonly pb::MessageParser<AccountBalanceOpskinsRequest> _parser = new pb::MessageParser<AccountBalanceOpskinsRequest>(() => new AccountBalanceOpskinsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalanceOpskinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsRequest(AccountBalanceOpskinsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsRequest Clone() {
      return new AccountBalanceOpskinsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalanceOpskinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalanceOpskinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalanceOpskinsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AccountBalanceOpskinsResponse : pb::IMessage<AccountBalanceOpskinsResponse> {
    private static readonly pb::MessageParser<AccountBalanceOpskinsResponse> _parser = new pb::MessageParser<AccountBalanceOpskinsResponse>(() => new AccountBalanceOpskinsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalanceOpskinsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsResponse(AccountBalanceOpskinsResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.AccountBalance:
          AccountBalance = other.AccountBalance.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceOpskinsResponse Clone() {
      return new AccountBalanceOpskinsResponse(this);
    }

    /// <summary>Field number for the "accountBalance" field.</summary>
    public const int AccountBalanceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.OpskinsAccountBalance AccountBalance {
      get { return dataCase_ == DataOneofCase.AccountBalance ? (global::RpcCommunication.OpskinsAccountBalance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.AccountBalance;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      AccountBalance = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalanceOpskinsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalanceOpskinsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountBalance, other.AccountBalance)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.AccountBalance) hash ^= AccountBalance.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.AccountBalance) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountBalance);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.AccountBalance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountBalance);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalanceOpskinsResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.AccountBalance:
          AccountBalance = other.AccountBalance;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunication.OpskinsAccountBalance subBuilder = new global::RpcCommunication.OpskinsAccountBalance();
            if (dataCase_ == DataOneofCase.AccountBalance) {
              subBuilder.MergeFrom(AccountBalance);
            }
            input.ReadMessage(subBuilder);
            AccountBalance = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpskinsAccountBalance : pb::IMessage<OpskinsAccountBalance> {
    private static readonly pb::MessageParser<OpskinsAccountBalance> _parser = new pb::MessageParser<OpskinsAccountBalance>(() => new OpskinsAccountBalance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpskinsAccountBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsAccountBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsAccountBalance(OpskinsAccountBalance other) : this() {
      totalBalance_ = other.totalBalance_;
      pendingCashoutBalance_ = other.pendingCashoutBalance_;
      depositedBalance_ = other.depositedBalance_;
      cashoutableBalance_ = other.cashoutableBalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsAccountBalance Clone() {
      return new OpskinsAccountBalance(this);
    }

    /// <summary>Field number for the "totalBalance" field.</summary>
    public const int TotalBalanceFieldNumber = 1;
    private int totalBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "pendingCashoutBalance" field.</summary>
    public const int PendingCashoutBalanceFieldNumber = 2;
    private int pendingCashoutBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PendingCashoutBalance {
      get { return pendingCashoutBalance_; }
      set {
        pendingCashoutBalance_ = value;
      }
    }

    /// <summary>Field number for the "depositedBalance" field.</summary>
    public const int DepositedBalanceFieldNumber = 3;
    private int depositedBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DepositedBalance {
      get { return depositedBalance_; }
      set {
        depositedBalance_ = value;
      }
    }

    /// <summary>Field number for the "cashoutableBalance" field.</summary>
    public const int CashoutableBalanceFieldNumber = 4;
    private int cashoutableBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CashoutableBalance {
      get { return cashoutableBalance_; }
      set {
        cashoutableBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpskinsAccountBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpskinsAccountBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalBalance != other.TotalBalance) return false;
      if (PendingCashoutBalance != other.PendingCashoutBalance) return false;
      if (DepositedBalance != other.DepositedBalance) return false;
      if (CashoutableBalance != other.CashoutableBalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalBalance != 0) hash ^= TotalBalance.GetHashCode();
      if (PendingCashoutBalance != 0) hash ^= PendingCashoutBalance.GetHashCode();
      if (DepositedBalance != 0) hash ^= DepositedBalance.GetHashCode();
      if (CashoutableBalance != 0) hash ^= CashoutableBalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalBalance != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalBalance);
      }
      if (PendingCashoutBalance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PendingCashoutBalance);
      }
      if (DepositedBalance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DepositedBalance);
      }
      if (CashoutableBalance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CashoutableBalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBalance);
      }
      if (PendingCashoutBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PendingCashoutBalance);
      }
      if (DepositedBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DepositedBalance);
      }
      if (CashoutableBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CashoutableBalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpskinsAccountBalance other) {
      if (other == null) {
        return;
      }
      if (other.TotalBalance != 0) {
        TotalBalance = other.TotalBalance;
      }
      if (other.PendingCashoutBalance != 0) {
        PendingCashoutBalance = other.PendingCashoutBalance;
      }
      if (other.DepositedBalance != 0) {
        DepositedBalance = other.DepositedBalance;
      }
      if (other.CashoutableBalance != 0) {
        CashoutableBalance = other.CashoutableBalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalBalance = input.ReadInt32();
            break;
          }
          case 16: {
            PendingCashoutBalance = input.ReadInt32();
            break;
          }
          case 24: {
            DepositedBalance = input.ReadInt32();
            break;
          }
          case 32: {
            CashoutableBalance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawBtcOpskinsRequest : pb::IMessage<WithdrawBtcOpskinsRequest> {
    private static readonly pb::MessageParser<WithdrawBtcOpskinsRequest> _parser = new pb::MessageParser<WithdrawBtcOpskinsRequest>(() => new WithdrawBtcOpskinsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawBtcOpskinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsRequest(WithdrawBtcOpskinsRequest other) : this() {
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsRequest Clone() {
      return new WithdrawBtcOpskinsRequest(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private int amount_;
    /// <summary>
    ///in cents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawBtcOpskinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawBtcOpskinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawBtcOpskinsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawBtcOpskinsResponse : pb::IMessage<WithdrawBtcOpskinsResponse> {
    private static readonly pb::MessageParser<WithdrawBtcOpskinsResponse> _parser = new pb::MessageParser<WithdrawBtcOpskinsResponse>(() => new WithdrawBtcOpskinsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawBtcOpskinsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsResponse(WithdrawBtcOpskinsResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.Success:
          Success = other.Success;
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawBtcOpskinsResponse Clone() {
      return new WithdrawBtcOpskinsResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return dataCase_ == DataOneofCase.Success ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Success = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawBtcOpskinsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawBtcOpskinsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.Success) hash ^= Success.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.Success) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawBtcOpskinsResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.Success:
          Success = other.Success;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///      Steam Status    //
  /// </summary>
  public sealed partial class SteamStatusRequest : pb::IMessage<SteamStatusRequest> {
    private static readonly pb::MessageParser<SteamStatusRequest> _parser = new pb::MessageParser<SteamStatusRequest>(() => new SteamStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusRequest(SteamStatusRequest other) : this() {
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      message_ = other.message_;
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusRequest Clone() {
      return new SteamStatusRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 4;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Bot, other.Bot)) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (bot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bot);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 42: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SteamStatusResponse : pb::IMessage<SteamStatusResponse> {
    private static readonly pb::MessageParser<SteamStatusResponse> _parser = new pb::MessageParser<SteamStatusResponse>(() => new SteamStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusResponse(SteamStatusResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamStatusResponse Clone() {
      return new SteamStatusResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamStatusResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///      Bot Status      //
  /// </summary>
  public sealed partial class BotStatusChangedRequest : pb::IMessage<BotStatusChangedRequest> {
    private static readonly pb::MessageParser<BotStatusChangedRequest> _parser = new pb::MessageParser<BotStatusChangedRequest>(() => new BotStatusChangedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotStatusChangedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedRequest(BotStatusChangedRequest other) : this() {
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      message_ = other.message_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedRequest Clone() {
      return new BotStatusChangedRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 3;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotStatusChangedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotStatusChangedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (!object.Equals(Bot, other.Bot)) return false;
      if (Message != other.Message) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (bot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bot);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotStatusChangedRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
          case 26: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 42: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BotStatusChangedResponse : pb::IMessage<BotStatusChangedResponse> {
    private static readonly pb::MessageParser<BotStatusChangedResponse> _parser = new pb::MessageParser<BotStatusChangedResponse>(() => new BotStatusChangedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotStatusChangedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedResponse(BotStatusChangedResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotStatusChangedResponse Clone() {
      return new BotStatusChangedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotStatusChangedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotStatusChangedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotStatusChangedResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///      Opskins        //
  /// </summary>
  public sealed partial class OpskinsStatusChangedRequest : pb::IMessage<OpskinsStatusChangedRequest> {
    private static readonly pb::MessageParser<OpskinsStatusChangedRequest> _parser = new pb::MessageParser<OpskinsStatusChangedRequest>(() => new OpskinsStatusChangedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpskinsStatusChangedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedRequest(OpskinsStatusChangedRequest other) : this() {
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      Error = other.error_ != null ? other.Error.Clone() : null;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedRequest Clone() {
      return new OpskinsStatusChangedRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::RpcCommunication.opskinsError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.opskinsError Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpskinsStatusChangedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpskinsStatusChangedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpskinsStatusChangedRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::RpcCommunication.opskinsError();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::RpcCommunication.opskinsError();
            }
            input.ReadMessage(error_);
            break;
          }
          case 34: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpskinsStatusChangedResponse : pb::IMessage<OpskinsStatusChangedResponse> {
    private static readonly pb::MessageParser<OpskinsStatusChangedResponse> _parser = new pb::MessageParser<OpskinsStatusChangedResponse>(() => new OpskinsStatusChangedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpskinsStatusChangedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedResponse(OpskinsStatusChangedResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinsStatusChangedResponse Clone() {
      return new OpskinsStatusChangedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpskinsStatusChangedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpskinsStatusChangedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpskinsStatusChangedResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///      GetPlayerInfo       //
  /// </summary>
  public sealed partial class GetPlayerInfoRequest : pb::IMessage<GetPlayerInfoRequest> {
    private static readonly pb::MessageParser<GetPlayerInfoRequest> _parser = new pb::MessageParser<GetPlayerInfoRequest>(() => new GetPlayerInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoRequest(GetPlayerInfoRequest other) : this() {
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoRequest Clone() {
      return new GetPlayerInfoRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerInfoResponse : pb::IMessage<GetPlayerInfoResponse> {
    private static readonly pb::MessageParser<GetPlayerInfoResponse> _parser = new pb::MessageParser<GetPlayerInfoResponse>(() => new GetPlayerInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoResponse(GetPlayerInfoResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.PlayerInfo:
          PlayerInfo = other.PlayerInfo.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerInfoResponse Clone() {
      return new GetPlayerInfoResponse(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PlayerInfo PlayerInfo {
      get { return dataCase_ == DataOneofCase.PlayerInfo ? (global::RpcCommunication.PlayerInfo) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlayerInfo;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      PlayerInfo = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.PlayerInfo) hash ^= PlayerInfo.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.PlayerInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.PlayerInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerInfoResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.PlayerInfo:
          PlayerInfo = other.PlayerInfo;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunication.PlayerInfo subBuilder = new global::RpcCommunication.PlayerInfo();
            if (dataCase_ == DataOneofCase.PlayerInfo) {
              subBuilder.MergeFrom(PlayerInfo);
            }
            input.ReadMessage(subBuilder);
            PlayerInfo = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      steamId_ = other.steamId_;
      personaName_ = other.personaName_;
      avatar_ = other.avatar_;
      avatarMedium_ = other.avatarMedium_;
      avatarFull_ = other.avatarFull_;
      onlineState_ = other.onlineState_;
      profilePrivacyState_ = other.profilePrivacyState_;
      tradeBanState_ = other.tradeBanState_;
      isLimitedAccount_ = other.isLimitedAccount_;
      groupsSteamid64_ = other.groupsSteamid64_.Clone();
      memberSince_ = other.memberSince_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "personaName" field.</summary>
    public const int PersonaNameFieldNumber = 2;
    private string personaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersonaName {
      get { return personaName_; }
      set {
        personaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarMedium" field.</summary>
    public const int AvatarMediumFieldNumber = 4;
    private string avatarMedium_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarMedium {
      get { return avatarMedium_; }
      set {
        avatarMedium_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarFull" field.</summary>
    public const int AvatarFullFieldNumber = 5;
    private string avatarFull_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarFull {
      get { return avatarFull_; }
      set {
        avatarFull_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlineState" field.</summary>
    public const int OnlineStateFieldNumber = 6;
    private string onlineState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OnlineState {
      get { return onlineState_; }
      set {
        onlineState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profilePrivacyState" field.</summary>
    public const int ProfilePrivacyStateFieldNumber = 7;
    private string profilePrivacyState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfilePrivacyState {
      get { return profilePrivacyState_; }
      set {
        profilePrivacyState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradeBanState" field.</summary>
    public const int TradeBanStateFieldNumber = 8;
    private string tradeBanState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeBanState {
      get { return tradeBanState_; }
      set {
        tradeBanState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLimitedAccount" field.</summary>
    public const int IsLimitedAccountFieldNumber = 9;
    private bool isLimitedAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLimitedAccount {
      get { return isLimitedAccount_; }
      set {
        isLimitedAccount_ = value;
      }
    }

    /// <summary>Field number for the "groupsSteamid64" field.</summary>
    public const int GroupsSteamid64FieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_groupsSteamid64_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> groupsSteamid64_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupsSteamid64 {
      get { return groupsSteamid64_; }
    }

    /// <summary>Field number for the "memberSince" field.</summary>
    public const int MemberSinceFieldNumber = 11;
    private string memberSince_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemberSince {
      get { return memberSince_; }
      set {
        memberSince_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (PersonaName != other.PersonaName) return false;
      if (Avatar != other.Avatar) return false;
      if (AvatarMedium != other.AvatarMedium) return false;
      if (AvatarFull != other.AvatarFull) return false;
      if (OnlineState != other.OnlineState) return false;
      if (ProfilePrivacyState != other.ProfilePrivacyState) return false;
      if (TradeBanState != other.TradeBanState) return false;
      if (IsLimitedAccount != other.IsLimitedAccount) return false;
      if(!groupsSteamid64_.Equals(other.groupsSteamid64_)) return false;
      if (MemberSince != other.MemberSince) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (PersonaName.Length != 0) hash ^= PersonaName.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (AvatarMedium.Length != 0) hash ^= AvatarMedium.GetHashCode();
      if (AvatarFull.Length != 0) hash ^= AvatarFull.GetHashCode();
      if (OnlineState.Length != 0) hash ^= OnlineState.GetHashCode();
      if (ProfilePrivacyState.Length != 0) hash ^= ProfilePrivacyState.GetHashCode();
      if (TradeBanState.Length != 0) hash ^= TradeBanState.GetHashCode();
      if (IsLimitedAccount != false) hash ^= IsLimitedAccount.GetHashCode();
      hash ^= groupsSteamid64_.GetHashCode();
      if (MemberSince.Length != 0) hash ^= MemberSince.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (PersonaName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PersonaName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (AvatarMedium.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarMedium);
      }
      if (AvatarFull.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvatarFull);
      }
      if (OnlineState.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OnlineState);
      }
      if (ProfilePrivacyState.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProfilePrivacyState);
      }
      if (TradeBanState.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TradeBanState);
      }
      if (IsLimitedAccount != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsLimitedAccount);
      }
      groupsSteamid64_.WriteTo(output, _repeated_groupsSteamid64_codec);
      if (MemberSince.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MemberSince);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (PersonaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersonaName);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (AvatarMedium.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarMedium);
      }
      if (AvatarFull.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarFull);
      }
      if (OnlineState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnlineState);
      }
      if (ProfilePrivacyState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfilePrivacyState);
      }
      if (TradeBanState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeBanState);
      }
      if (IsLimitedAccount != false) {
        size += 1 + 1;
      }
      size += groupsSteamid64_.CalculateSize(_repeated_groupsSteamid64_codec);
      if (MemberSince.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemberSince);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.PersonaName.Length != 0) {
        PersonaName = other.PersonaName;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.AvatarMedium.Length != 0) {
        AvatarMedium = other.AvatarMedium;
      }
      if (other.AvatarFull.Length != 0) {
        AvatarFull = other.AvatarFull;
      }
      if (other.OnlineState.Length != 0) {
        OnlineState = other.OnlineState;
      }
      if (other.ProfilePrivacyState.Length != 0) {
        ProfilePrivacyState = other.ProfilePrivacyState;
      }
      if (other.TradeBanState.Length != 0) {
        TradeBanState = other.TradeBanState;
      }
      if (other.IsLimitedAccount != false) {
        IsLimitedAccount = other.IsLimitedAccount;
      }
      groupsSteamid64_.Add(other.groupsSteamid64_);
      if (other.MemberSince.Length != 0) {
        MemberSince = other.MemberSince;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            PersonaName = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 34: {
            AvatarMedium = input.ReadString();
            break;
          }
          case 42: {
            AvatarFull = input.ReadString();
            break;
          }
          case 50: {
            OnlineState = input.ReadString();
            break;
          }
          case 58: {
            ProfilePrivacyState = input.ReadString();
            break;
          }
          case 66: {
            TradeBanState = input.ReadString();
            break;
          }
          case 72: {
            IsLimitedAccount = input.ReadBool();
            break;
          }
          case 82: {
            groupsSteamid64_.AddEntriesFrom(input, _repeated_groupsSteamid64_codec);
            break;
          }
          case 90: {
            MemberSince = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Offer Status Request //
  /// </summary>
  public sealed partial class OfferStatusRequest : pb::IMessage<OfferStatusRequest> {
    private static readonly pb::MessageParser<OfferStatusRequest> _parser = new pb::MessageParser<OfferStatusRequest>(() => new OfferStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfferStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusRequest(OfferStatusRequest other) : this() {
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      steamId_ = other.steamId_;
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      timestamp_ = other.timestamp_;
      inputItems_ = other.inputItems_.Clone();
      sendItem_ = other.sendItem_;
      switch (other.DataCase) {
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case DataOneofCase.OfferSend:
          OfferSend = other.OfferSend.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusRequest Clone() {
      return new OfferStatusRequest(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 3;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 4;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.OfferStatusError Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.OfferStatusError) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    /// <summary>Field number for the "offerSend" field.</summary>
    public const int OfferSendFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.OfferStatusOffer OfferSend {
      get { return dataCase_ == DataOneofCase.OfferSend ? (global::RpcCommunication.OfferStatusOffer) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.OfferSend;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private string timestamp_ = "";
    /// <summary>
    ///Below is extradata for logs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputItems" field.</summary>
    public const int InputItemsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::RpcCommunication.Item> _repeated_inputItems_codec
        = pb::FieldCodec.ForMessage(66, global::RpcCommunication.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Item> inputItems_ = new pbc::RepeatedField<global::RpcCommunication.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Item> InputItems {
      get { return inputItems_; }
    }

    /// <summary>Field number for the "sendItem" field.</summary>
    public const int SendItemFieldNumber = 9;
    private bool sendItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendItem {
      get { return sendItem_; }
      set {
        sendItem_ = value;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Error = 5,
      OfferSend = 6,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfferStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfferStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (SteamId != other.SteamId) return false;
      if (!object.Equals(Bot, other.Bot)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(OfferSend, other.OfferSend)) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!inputItems_.Equals(other.inputItems_)) return false;
      if (SendItem != other.SendItem) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      if (dataCase_ == DataOneofCase.OfferSend) hash ^= OfferSend.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      hash ^= inputItems_.GetHashCode();
      if (SendItem != false) hash ^= SendItem.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SteamId);
      }
      if (bot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bot);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(42);
        output.WriteMessage(Error);
      }
      if (dataCase_ == DataOneofCase.OfferSend) {
        output.WriteRawTag(50);
        output.WriteMessage(OfferSend);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timestamp);
      }
      inputItems_.WriteTo(output, _repeated_inputItems_codec);
      if (SendItem != false) {
        output.WriteRawTag(72);
        output.WriteBool(SendItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (dataCase_ == DataOneofCase.OfferSend) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferSend);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      size += inputItems_.CalculateSize(_repeated_inputItems_codec);
      if (SendItem != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfferStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      inputItems_.Add(other.inputItems_);
      if (other.SendItem != false) {
        SendItem = other.SendItem;
      }
      switch (other.DataCase) {
        case DataOneofCase.Error:
          Error = other.Error;
          break;
        case DataOneofCase.OfferSend:
          OfferSend = other.OfferSend;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
          case 26: {
            SteamId = input.ReadString();
            break;
          }
          case 34: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 42: {
            global::RpcCommunication.OfferStatusError subBuilder = new global::RpcCommunication.OfferStatusError();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 50: {
            global::RpcCommunication.OfferStatusOffer subBuilder = new global::RpcCommunication.OfferStatusOffer();
            if (dataCase_ == DataOneofCase.OfferSend) {
              subBuilder.MergeFrom(OfferSend);
            }
            input.ReadMessage(subBuilder);
            OfferSend = subBuilder;
            break;
          }
          case 58: {
            Timestamp = input.ReadString();
            break;
          }
          case 66: {
            inputItems_.AddEntriesFrom(input, _repeated_inputItems_codec);
            break;
          }
          case 72: {
            SendItem = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OfferStatusError : pb::IMessage<OfferStatusError> {
    private static readonly pb::MessageParser<OfferStatusError> _parser = new pb::MessageParser<OfferStatusError>(() => new OfferStatusError());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfferStatusError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusError(OfferStatusError other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusError Clone() {
      return new OfferStatusError(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfferStatusError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfferStatusError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfferStatusError other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OfferStatusOffer : pb::IMessage<OfferStatusOffer> {
    private static readonly pb::MessageParser<OfferStatusOffer> _parser = new pb::MessageParser<OfferStatusOffer>(() => new OfferStatusOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfferStatusOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusOffer(OfferStatusOffer other) : this() {
      SteamOffer = other.steamOffer_ != null ? other.SteamOffer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusOffer Clone() {
      return new OfferStatusOffer(this);
    }

    /// <summary>Field number for the "steamOffer" field.</summary>
    public const int SteamOfferFieldNumber = 3;
    private global::RpcCommunication.SteamOffer steamOffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.SteamOffer SteamOffer {
      get { return steamOffer_; }
      set {
        steamOffer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfferStatusOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfferStatusOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SteamOffer, other.SteamOffer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (steamOffer_ != null) hash ^= SteamOffer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (steamOffer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SteamOffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (steamOffer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteamOffer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfferStatusOffer other) {
      if (other == null) {
        return;
      }
      if (other.steamOffer_ != null) {
        if (steamOffer_ == null) {
          steamOffer_ = new global::RpcCommunication.SteamOffer();
        }
        SteamOffer.MergeFrom(other.SteamOffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (steamOffer_ == null) {
              steamOffer_ = new global::RpcCommunication.SteamOffer();
            }
            input.ReadMessage(steamOffer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OfferStatusResponse : pb::IMessage<OfferStatusResponse> {
    private static readonly pb::MessageParser<OfferStatusResponse> _parser = new pb::MessageParser<OfferStatusResponse>(() => new OfferStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfferStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusResponse(OfferStatusResponse other) : this() {
      itIsHandled_ = other.itIsHandled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfferStatusResponse Clone() {
      return new OfferStatusResponse(this);
    }

    /// <summary>Field number for the "itIsHandled" field.</summary>
    public const int ItIsHandledFieldNumber = 1;
    private bool itIsHandled_;
    /// <summary>
    ///Send this back to the bot to notify the bot that it's handled. (Making sure c# is online and not an crazy error occured) This if so we don't miss and offerstatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ItIsHandled {
      get { return itIsHandled_; }
      set {
        itIsHandled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfferStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfferStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItIsHandled != other.ItIsHandled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItIsHandled != false) hash ^= ItIsHandled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItIsHandled != false) {
        output.WriteRawTag(8);
        output.WriteBool(ItIsHandled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItIsHandled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfferStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.ItIsHandled != false) {
        ItIsHandled = other.ItIsHandled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItIsHandled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///      Get Player Inventory //
  /// </summary>
  public sealed partial class GetPlayerSteamInventoryResponse : pb::IMessage<GetPlayerSteamInventoryResponse> {
    private static readonly pb::MessageParser<GetPlayerSteamInventoryResponse> _parser = new pb::MessageParser<GetPlayerSteamInventoryResponse>(() => new GetPlayerSteamInventoryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerSteamInventoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryResponse(GetPlayerSteamInventoryResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.PlayerInventory:
          PlayerInventory = other.PlayerInventory.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryResponse Clone() {
      return new GetPlayerSteamInventoryResponse(this);
    }

    /// <summary>Field number for the "playerInventory" field.</summary>
    public const int PlayerInventoryFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.PlayerResponseItems PlayerInventory {
      get { return dataCase_ == DataOneofCase.PlayerInventory ? (global::RpcCommunication.PlayerResponseItems) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlayerInventory;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      PlayerInventory = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerSteamInventoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerSteamInventoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInventory, other.PlayerInventory)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.PlayerInventory) hash ^= PlayerInventory.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.PlayerInventory) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInventory);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.PlayerInventory) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInventory);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerSteamInventoryResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.PlayerInventory:
          PlayerInventory = other.PlayerInventory;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunication.PlayerResponseItems subBuilder = new global::RpcCommunication.PlayerResponseItems();
            if (dataCase_ == DataOneofCase.PlayerInventory) {
              subBuilder.MergeFrom(PlayerInventory);
            }
            input.ReadMessage(subBuilder);
            PlayerInventory = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerSteamInventoryRequest : pb::IMessage<GetPlayerSteamInventoryRequest> {
    private static readonly pb::MessageParser<GetPlayerSteamInventoryRequest> _parser = new pb::MessageParser<GetPlayerSteamInventoryRequest>(() => new GetPlayerSteamInventoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerSteamInventoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryRequest(GetPlayerSteamInventoryRequest other) : this() {
      steamId_ = other.steamId_;
      InventoryToFetch = other.inventoryToFetch_ != null ? other.InventoryToFetch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerSteamInventoryRequest Clone() {
      return new GetPlayerSteamInventoryRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inventoryToFetch" field.</summary>
    public const int InventoryToFetchFieldNumber = 2;
    private global::RpcCommunication.Inventory inventoryToFetch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Inventory InventoryToFetch {
      get { return inventoryToFetch_; }
      set {
        inventoryToFetch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerSteamInventoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerSteamInventoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (!object.Equals(InventoryToFetch, other.InventoryToFetch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (inventoryToFetch_ != null) hash ^= InventoryToFetch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (inventoryToFetch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InventoryToFetch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (inventoryToFetch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InventoryToFetch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerSteamInventoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.inventoryToFetch_ != null) {
        if (inventoryToFetch_ == null) {
          inventoryToFetch_ = new global::RpcCommunication.Inventory();
        }
        InventoryToFetch.MergeFrom(other.InventoryToFetch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            if (inventoryToFetch_ == null) {
              inventoryToFetch_ = new global::RpcCommunication.Inventory();
            }
            input.ReadMessage(inventoryToFetch_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerResponseItems : pb::IMessage<PlayerResponseItems> {
    private static readonly pb::MessageParser<PlayerResponseItems> _parser = new pb::MessageParser<PlayerResponseItems>(() => new PlayerResponseItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerResponseItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResponseItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResponseItems(PlayerResponseItems other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResponseItems Clone() {
      return new PlayerResponseItems(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunication.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunication.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Item> items_ = new pbc::RepeatedField<global::RpcCommunication.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerResponseItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerResponseItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerResponseItems other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Inventory : pb::IMessage<Inventory> {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory(Inventory other) : this() {
      appId_ = other.appId_;
      contextId_ = other.contextId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (ContextId != other.ContextId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///      Make Offer      //
  /// </summary>
  public sealed partial class MakeOfferRequest : pb::IMessage<MakeOfferRequest> {
    private static readonly pb::MessageParser<MakeOfferRequest> _parser = new pb::MessageParser<MakeOfferRequest>(() => new MakeOfferRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeOfferRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferRequest(MakeOfferRequest other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      botName_ = other.botName_;
      message_ = other.message_;
      sendItems_ = other.sendItems_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferRequest Clone() {
      return new MakeOfferRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::RpcCommunication.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "botName" field.</summary>
    public const int BotNameFieldNumber = 2;
    private string botName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BotName {
      get { return botName_; }
      set {
        botName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendItems" field.</summary>
    public const int SendItemsFieldNumber = 4;
    private bool sendItems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendItems {
      get { return sendItems_; }
      set {
        sendItems_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RpcCommunication.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::RpcCommunication.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Item> items_ = new pbc::RepeatedField<global::RpcCommunication.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeOfferRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeOfferRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (BotName != other.BotName) return false;
      if (Message != other.Message) return false;
      if (SendItems != other.SendItems) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (BotName.Length != 0) hash ^= BotName.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SendItems != false) hash ^= SendItems.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (BotName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BotName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (SendItems != false) {
        output.WriteRawTag(32);
        output.WriteBool(SendItems);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (BotName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BotName);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SendItems != false) {
        size += 1 + 1;
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeOfferRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::RpcCommunication.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.BotName.Length != 0) {
        BotName = other.BotName;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SendItems != false) {
        SendItems = other.SendItems;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::RpcCommunication.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            BotName = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            SendItems = input.ReadBool();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeOfferResponse : pb::IMessage<MakeOfferResponse> {
    private static readonly pb::MessageParser<MakeOfferResponse> _parser = new pb::MessageParser<MakeOfferResponse>(() => new MakeOfferResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeOfferResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferResponse(MakeOfferResponse other) : this() {
      Bot = other.bot_ != null ? other.Bot.Clone() : null;
      steamId_ = other.steamId_;
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      switch (other.DataCase) {
        case DataOneofCase.Offer:
          Offer = other.Offer.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeOfferResponse Clone() {
      return new MakeOfferResponse(this);
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 1;
    private global::RpcCommunication.Bot bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Bot Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 3;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 4;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Offer Offer {
      get { return dataCase_ == DataOneofCase.Offer ? (global::RpcCommunication.Offer) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Offer;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Offer = 5,
      Error = 6,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeOfferResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeOfferResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bot, other.Bot)) return false;
      if (SteamId != other.SteamId) return false;
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (!object.Equals(Offer, other.Offer)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bot_ != null) hash ^= Bot.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (dataCase_ == DataOneofCase.Offer) hash ^= Offer.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bot);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StatusMessage);
      }
      if (dataCase_ == DataOneofCase.Offer) {
        output.WriteRawTag(42);
        output.WriteMessage(Offer);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(50);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bot);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (dataCase_ == DataOneofCase.Offer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeOfferResponse other) {
      if (other == null) {
        return;
      }
      if (other.bot_ != null) {
        if (bot_ == null) {
          bot_ = new global::RpcCommunication.Bot();
        }
        Bot.MergeFrom(other.Bot);
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      switch (other.DataCase) {
        case DataOneofCase.Offer:
          Offer = other.Offer;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bot_ == null) {
              bot_ = new global::RpcCommunication.Bot();
            }
            input.ReadMessage(bot_);
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
          case 24: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 34: {
            StatusMessage = input.ReadString();
            break;
          }
          case 42: {
            global::RpcCommunication.Offer subBuilder = new global::RpcCommunication.Offer();
            if (dataCase_ == DataOneofCase.Offer) {
              subBuilder.MergeFrom(Offer);
            }
            input.ReadMessage(subBuilder);
            Offer = subBuilder;
            break;
          }
          case 50: {
            global::RpcCommunication.Error subBuilder = new global::RpcCommunication.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Offer : pb::IMessage<Offer> {
    private static readonly pb::MessageParser<Offer> _parser = new pb::MessageParser<Offer>(() => new Offer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Offer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offer(Offer other) : this() {
      SteamOffer = other.steamOffer_ != null ? other.SteamOffer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offer Clone() {
      return new Offer(this);
    }

    /// <summary>Field number for the "steamOffer" field.</summary>
    public const int SteamOfferFieldNumber = 3;
    private global::RpcCommunication.SteamOffer steamOffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.SteamOffer SteamOffer {
      get { return steamOffer_; }
      set {
        steamOffer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Offer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Offer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SteamOffer, other.SteamOffer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (steamOffer_ != null) hash ^= SteamOffer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (steamOffer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SteamOffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (steamOffer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteamOffer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Offer other) {
      if (other == null) {
        return;
      }
      if (other.steamOffer_ != null) {
        if (steamOffer_ == null) {
          steamOffer_ = new global::RpcCommunication.SteamOffer();
        }
        SteamOffer.MergeFrom(other.SteamOffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (steamOffer_ == null) {
              steamOffer_ = new global::RpcCommunication.SteamOffer();
            }
            input.ReadMessage(steamOffer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      steamId_ = other.steamId_;
      tradeLink_ = other.tradeLink_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradeLink" field.</summary>
    public const int TradeLinkFieldNumber = 2;
    private string tradeLink_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeLink {
      get { return tradeLink_; }
      set {
        tradeLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (TradeLink != other.TradeLink) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (TradeLink.Length != 0) hash ^= TradeLink.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (TradeLink.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TradeLink);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (TradeLink.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeLink);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.TradeLink.Length != 0) {
        TradeLink = other.TradeLink;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            TradeLink = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SteamOffer : pb::IMessage<SteamOffer> {
    private static readonly pb::MessageParser<SteamOffer> _parser = new pb::MessageParser<SteamOffer>(() => new SteamOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamOffer(SteamOffer other) : this() {
      Partner = other.partner_ != null ? other.Partner.Clone() : null;
      id_ = other.id_;
      message_ = other.message_;
      state_ = other.state_;
      itemsToGive_ = other.itemsToGive_.Clone();
      itemsToReceive_ = other.itemsToReceive_.Clone();
      isOurOffer_ = other.isOurOffer_;
      unixtimeCreated_ = other.unixtimeCreated_;
      unixtimeUpdated_ = other.unixtimeUpdated_;
      unixtimeExpires_ = other.unixtimeExpires_;
      confirmationMethod_ = other.confirmationMethod_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamOffer Clone() {
      return new SteamOffer(this);
    }

    /// <summary>Field number for the "partner" field.</summary>
    public const int PartnerFieldNumber = 1;
    private global::RpcCommunication.Partner partner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.Partner Partner {
      get { return partner_; }
      set {
        partner_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "itemsToGive" field.</summary>
    public const int ItemsToGiveFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RpcCommunication.Item> _repeated_itemsToGive_codec
        = pb::FieldCodec.ForMessage(42, global::RpcCommunication.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Item> itemsToGive_ = new pbc::RepeatedField<global::RpcCommunication.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Item> ItemsToGive {
      get { return itemsToGive_; }
    }

    /// <summary>Field number for the "itemsToReceive" field.</summary>
    public const int ItemsToReceiveFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RpcCommunication.Item> _repeated_itemsToReceive_codec
        = pb::FieldCodec.ForMessage(50, global::RpcCommunication.Item.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.Item> itemsToReceive_ = new pbc::RepeatedField<global::RpcCommunication.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.Item> ItemsToReceive {
      get { return itemsToReceive_; }
    }

    /// <summary>Field number for the "isOurOffer" field.</summary>
    public const int IsOurOfferFieldNumber = 7;
    private bool isOurOffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOurOffer {
      get { return isOurOffer_; }
      set {
        isOurOffer_ = value;
      }
    }

    /// <summary>Field number for the "unixtimeCreated" field.</summary>
    public const int UnixtimeCreatedFieldNumber = 8;
    private string unixtimeCreated_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnixtimeCreated {
      get { return unixtimeCreated_; }
      set {
        unixtimeCreated_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unixtimeUpdated" field.</summary>
    public const int UnixtimeUpdatedFieldNumber = 9;
    private string unixtimeUpdated_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnixtimeUpdated {
      get { return unixtimeUpdated_; }
      set {
        unixtimeUpdated_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unixtimeExpires" field.</summary>
    public const int UnixtimeExpiresFieldNumber = 10;
    private string unixtimeExpires_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnixtimeExpires {
      get { return unixtimeExpires_; }
      set {
        unixtimeExpires_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confirmationMethod" field.</summary>
    public const int ConfirmationMethodFieldNumber = 11;
    private int confirmationMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfirmationMethod {
      get { return confirmationMethod_; }
      set {
        confirmationMethod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Partner, other.Partner)) return false;
      if (Id != other.Id) return false;
      if (Message != other.Message) return false;
      if (State != other.State) return false;
      if(!itemsToGive_.Equals(other.itemsToGive_)) return false;
      if(!itemsToReceive_.Equals(other.itemsToReceive_)) return false;
      if (IsOurOffer != other.IsOurOffer) return false;
      if (UnixtimeCreated != other.UnixtimeCreated) return false;
      if (UnixtimeUpdated != other.UnixtimeUpdated) return false;
      if (UnixtimeExpires != other.UnixtimeExpires) return false;
      if (ConfirmationMethod != other.ConfirmationMethod) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partner_ != null) hash ^= Partner.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= itemsToGive_.GetHashCode();
      hash ^= itemsToReceive_.GetHashCode();
      if (IsOurOffer != false) hash ^= IsOurOffer.GetHashCode();
      if (UnixtimeCreated.Length != 0) hash ^= UnixtimeCreated.GetHashCode();
      if (UnixtimeUpdated.Length != 0) hash ^= UnixtimeUpdated.GetHashCode();
      if (UnixtimeExpires.Length != 0) hash ^= UnixtimeExpires.GetHashCode();
      if (ConfirmationMethod != 0) hash ^= ConfirmationMethod.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Partner);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      itemsToGive_.WriteTo(output, _repeated_itemsToGive_codec);
      itemsToReceive_.WriteTo(output, _repeated_itemsToReceive_codec);
      if (IsOurOffer != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsOurOffer);
      }
      if (UnixtimeCreated.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UnixtimeCreated);
      }
      if (UnixtimeUpdated.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UnixtimeUpdated);
      }
      if (UnixtimeExpires.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UnixtimeExpires);
      }
      if (ConfirmationMethod != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConfirmationMethod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += itemsToGive_.CalculateSize(_repeated_itemsToGive_codec);
      size += itemsToReceive_.CalculateSize(_repeated_itemsToReceive_codec);
      if (IsOurOffer != false) {
        size += 1 + 1;
      }
      if (UnixtimeCreated.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnixtimeCreated);
      }
      if (UnixtimeUpdated.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnixtimeUpdated);
      }
      if (UnixtimeExpires.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnixtimeExpires);
      }
      if (ConfirmationMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfirmationMethod);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamOffer other) {
      if (other == null) {
        return;
      }
      if (other.partner_ != null) {
        if (partner_ == null) {
          partner_ = new global::RpcCommunication.Partner();
        }
        Partner.MergeFrom(other.Partner);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.State != 0) {
        State = other.State;
      }
      itemsToGive_.Add(other.itemsToGive_);
      itemsToReceive_.Add(other.itemsToReceive_);
      if (other.IsOurOffer != false) {
        IsOurOffer = other.IsOurOffer;
      }
      if (other.UnixtimeCreated.Length != 0) {
        UnixtimeCreated = other.UnixtimeCreated;
      }
      if (other.UnixtimeUpdated.Length != 0) {
        UnixtimeUpdated = other.UnixtimeUpdated;
      }
      if (other.UnixtimeExpires.Length != 0) {
        UnixtimeExpires = other.UnixtimeExpires;
      }
      if (other.ConfirmationMethod != 0) {
        ConfirmationMethod = other.ConfirmationMethod;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (partner_ == null) {
              partner_ = new global::RpcCommunication.Partner();
            }
            input.ReadMessage(partner_);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 42: {
            itemsToGive_.AddEntriesFrom(input, _repeated_itemsToGive_codec);
            break;
          }
          case 50: {
            itemsToReceive_.AddEntriesFrom(input, _repeated_itemsToReceive_codec);
            break;
          }
          case 56: {
            IsOurOffer = input.ReadBool();
            break;
          }
          case 66: {
            UnixtimeCreated = input.ReadString();
            break;
          }
          case 74: {
            UnixtimeUpdated = input.ReadString();
            break;
          }
          case 82: {
            UnixtimeExpires = input.ReadString();
            break;
          }
          case 88: {
            ConfirmationMethod = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Partner : pb::IMessage<Partner> {
    private static readonly pb::MessageParser<Partner> _parser = new pb::MessageParser<Partner>(() => new Partner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Partner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner(Partner other) : this() {
      universe_ = other.universe_;
      type_ = other.type_;
      instance_ = other.instance_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner Clone() {
      return new Partner(this);
    }

    /// <summary>Field number for the "universe" field.</summary>
    public const int UniverseFieldNumber = 1;
    private int universe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Universe {
      get { return universe_; }
      set {
        universe_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private int instance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private int accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Partner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Partner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Universe != other.Universe) return false;
      if (Type != other.Type) return false;
      if (Instance != other.Instance) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Universe != 0) hash ^= Universe.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Instance != 0) hash ^= Instance.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Universe != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Universe);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Instance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Instance);
      }
      if (AccountId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Universe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Universe);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Instance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Instance);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Partner other) {
      if (other == null) {
        return;
      }
      if (other.Universe != 0) {
        Universe = other.Universe;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Instance != 0) {
        Instance = other.Instance;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Universe = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Instance = input.ReadInt32();
            break;
          }
          case 32: {
            AccountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      appId_ = other.appId_;
      contextId_ = other.contextId_;
      assetId_ = other.assetId_;
      classId_ = other.classId_;
      instanceId_ = other.instanceId_;
      amount_ = other.amount_;
      iconUrl_ = other.iconUrl_;
      iconUrlLarge_ = other.iconUrlLarge_;
      name_ = other.name_;
      marketHashName_ = other.marketHashName_;
      marketName_ = other.marketName_;
      nameColor_ = other.nameColor_;
      backgroundColor_ = other.backgroundColor_;
      type_ = other.type_;
      tradable_ = other.tradable_;
      marketable_ = other.marketable_;
      commodity_ = other.commodity_;
      marketTradableRestriction_ = other.marketTradableRestriction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 4;
    private string classId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 5;
    private string instanceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "iconUrl" field.</summary>
    public const int IconUrlFieldNumber = 7;
    private string iconUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconUrl {
      get { return iconUrl_; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconUrlLarge" field.</summary>
    public const int IconUrlLargeFieldNumber = 8;
    private string iconUrlLarge_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconUrlLarge {
      get { return iconUrlLarge_; }
      set {
        iconUrlLarge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "marketHashName" field.</summary>
    public const int MarketHashNameFieldNumber = 10;
    private string marketHashName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketHashName {
      get { return marketHashName_; }
      set {
        marketHashName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "marketName" field.</summary>
    public const int MarketNameFieldNumber = 11;
    private string marketName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketName {
      get { return marketName_; }
      set {
        marketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nameColor" field.</summary>
    public const int NameColorFieldNumber = 12;
    private string nameColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameColor {
      get { return nameColor_; }
      set {
        nameColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundColor" field.</summary>
    public const int BackgroundColorFieldNumber = 13;
    private string backgroundColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 14;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradable" field.</summary>
    public const int TradableFieldNumber = 15;
    private bool tradable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tradable {
      get { return tradable_; }
      set {
        tradable_ = value;
      }
    }

    /// <summary>Field number for the "marketable" field.</summary>
    public const int MarketableFieldNumber = 16;
    private bool marketable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Marketable {
      get { return marketable_; }
      set {
        marketable_ = value;
      }
    }

    /// <summary>Field number for the "commodity" field.</summary>
    public const int CommodityFieldNumber = 17;
    private bool commodity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Commodity {
      get { return commodity_; }
      set {
        commodity_ = value;
      }
    }

    /// <summary>Field number for the "marketTradableRestriction" field.</summary>
    public const int MarketTradableRestrictionFieldNumber = 18;
    private int marketTradableRestriction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketTradableRestriction {
      get { return marketTradableRestriction_; }
      set {
        marketTradableRestriction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (ContextId != other.ContextId) return false;
      if (AssetId != other.AssetId) return false;
      if (ClassId != other.ClassId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (Amount != other.Amount) return false;
      if (IconUrl != other.IconUrl) return false;
      if (IconUrlLarge != other.IconUrlLarge) return false;
      if (Name != other.Name) return false;
      if (MarketHashName != other.MarketHashName) return false;
      if (MarketName != other.MarketName) return false;
      if (NameColor != other.NameColor) return false;
      if (BackgroundColor != other.BackgroundColor) return false;
      if (Type != other.Type) return false;
      if (Tradable != other.Tradable) return false;
      if (Marketable != other.Marketable) return false;
      if (Commodity != other.Commodity) return false;
      if (MarketTradableRestriction != other.MarketTradableRestriction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (IconUrl.Length != 0) hash ^= IconUrl.GetHashCode();
      if (IconUrlLarge.Length != 0) hash ^= IconUrlLarge.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MarketHashName.Length != 0) hash ^= MarketHashName.GetHashCode();
      if (MarketName.Length != 0) hash ^= MarketName.GetHashCode();
      if (NameColor.Length != 0) hash ^= NameColor.GetHashCode();
      if (BackgroundColor.Length != 0) hash ^= BackgroundColor.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Tradable != false) hash ^= Tradable.GetHashCode();
      if (Marketable != false) hash ^= Marketable.GetHashCode();
      if (Commodity != false) hash ^= Commodity.GetHashCode();
      if (MarketTradableRestriction != 0) hash ^= MarketTradableRestriction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassId);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstanceId);
      }
      if (Amount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Amount);
      }
      if (IconUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IconUrl);
      }
      if (IconUrlLarge.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IconUrlLarge);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (MarketHashName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MarketHashName);
      }
      if (MarketName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MarketName);
      }
      if (NameColor.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NameColor);
      }
      if (BackgroundColor.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(BackgroundColor);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Type);
      }
      if (Tradable != false) {
        output.WriteRawTag(120);
        output.WriteBool(Tradable);
      }
      if (Marketable != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Marketable);
      }
      if (Commodity != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Commodity);
      }
      if (MarketTradableRestriction != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MarketTradableRestriction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (IconUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (IconUrlLarge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrlLarge);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MarketHashName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketHashName);
      }
      if (MarketName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketName);
      }
      if (NameColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameColor);
      }
      if (BackgroundColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundColor);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Tradable != false) {
        size += 1 + 1;
      }
      if (Marketable != false) {
        size += 2 + 1;
      }
      if (Commodity != false) {
        size += 2 + 1;
      }
      if (MarketTradableRestriction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketTradableRestriction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.IconUrl.Length != 0) {
        IconUrl = other.IconUrl;
      }
      if (other.IconUrlLarge.Length != 0) {
        IconUrlLarge = other.IconUrlLarge;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MarketHashName.Length != 0) {
        MarketHashName = other.MarketHashName;
      }
      if (other.MarketName.Length != 0) {
        MarketName = other.MarketName;
      }
      if (other.NameColor.Length != 0) {
        NameColor = other.NameColor;
      }
      if (other.BackgroundColor.Length != 0) {
        BackgroundColor = other.BackgroundColor;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Tradable != false) {
        Tradable = other.Tradable;
      }
      if (other.Marketable != false) {
        Marketable = other.Marketable;
      }
      if (other.Commodity != false) {
        Commodity = other.Commodity;
      }
      if (other.MarketTradableRestriction != 0) {
        MarketTradableRestriction = other.MarketTradableRestriction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            ClassId = input.ReadString();
            break;
          }
          case 42: {
            InstanceId = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt32();
            break;
          }
          case 58: {
            IconUrl = input.ReadString();
            break;
          }
          case 66: {
            IconUrlLarge = input.ReadString();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            MarketHashName = input.ReadString();
            break;
          }
          case 90: {
            MarketName = input.ReadString();
            break;
          }
          case 98: {
            NameColor = input.ReadString();
            break;
          }
          case 106: {
            BackgroundColor = input.ReadString();
            break;
          }
          case 114: {
            Type = input.ReadString();
            break;
          }
          case 120: {
            Tradable = input.ReadBool();
            break;
          }
          case 128: {
            Marketable = input.ReadBool();
            break;
          }
          case 136: {
            Commodity = input.ReadBool();
            break;
          }
          case 144: {
            MarketTradableRestriction = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Start All Bots //
  /// </summary>
  public sealed partial class StartAllBotsRequest : pb::IMessage<StartAllBotsRequest> {
    private static readonly pb::MessageParser<StartAllBotsRequest> _parser = new pb::MessageParser<StartAllBotsRequest>(() => new StartAllBotsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartAllBotsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsRequest(StartAllBotsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsRequest Clone() {
      return new StartAllBotsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartAllBotsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartAllBotsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartAllBotsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StartAllBotsResponse : pb::IMessage<StartAllBotsResponse> {
    private static readonly pb::MessageParser<StartAllBotsResponse> _parser = new pb::MessageParser<StartAllBotsResponse>(() => new StartAllBotsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartAllBotsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsResponse(StartAllBotsResponse other) : this() {
      responseMessage_ = other.responseMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAllBotsResponse Clone() {
      return new StartAllBotsResponse(this);
    }

    /// <summary>Field number for the "responseMessage" field.</summary>
    public const int ResponseMessageFieldNumber = 1;
    private string responseMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseMessage {
      get { return responseMessage_; }
      set {
        responseMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartAllBotsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartAllBotsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseMessage != other.ResponseMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResponseMessage.Length != 0) hash ^= ResponseMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResponseMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResponseMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResponseMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartAllBotsResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResponseMessage.Length != 0) {
        ResponseMessage = other.ResponseMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResponseMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Stop All Bots //
  /// </summary>
  public sealed partial class StopAllBotsRequest : pb::IMessage<StopAllBotsRequest> {
    private static readonly pb::MessageParser<StopAllBotsRequest> _parser = new pb::MessageParser<StopAllBotsRequest>(() => new StopAllBotsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopAllBotsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsRequest(StopAllBotsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsRequest Clone() {
      return new StopAllBotsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopAllBotsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopAllBotsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopAllBotsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StopAllBotsResponse : pb::IMessage<StopAllBotsResponse> {
    private static readonly pb::MessageParser<StopAllBotsResponse> _parser = new pb::MessageParser<StopAllBotsResponse>(() => new StopAllBotsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopAllBotsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsResponse(StopAllBotsResponse other) : this() {
      responseMessage_ = other.responseMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAllBotsResponse Clone() {
      return new StopAllBotsResponse(this);
    }

    /// <summary>Field number for the "responseMessage" field.</summary>
    public const int ResponseMessageFieldNumber = 1;
    private string responseMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseMessage {
      get { return responseMessage_; }
      set {
        responseMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopAllBotsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopAllBotsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseMessage != other.ResponseMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResponseMessage.Length != 0) hash ^= ResponseMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResponseMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResponseMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResponseMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopAllBotsResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResponseMessage.Length != 0) {
        ResponseMessage = other.ResponseMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResponseMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///      Sell items      //
  /// </summary>
  public sealed partial class SellItemsFromOpskinsBotRequest : pb::IMessage<SellItemsFromOpskinsBotRequest> {
    private static readonly pb::MessageParser<SellItemsFromOpskinsBotRequest> _parser = new pb::MessageParser<SellItemsFromOpskinsBotRequest>(() => new SellItemsFromOpskinsBotRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellItemsFromOpskinsBotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotRequest(SellItemsFromOpskinsBotRequest other) : this() {
      appId_ = other.appId_;
      contextId_ = other.contextId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotRequest Clone() {
      return new SellItemsFromOpskinsBotRequest(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellItemsFromOpskinsBotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellItemsFromOpskinsBotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (ContextId != other.ContextId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellItemsFromOpskinsBotRequest other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellItemsFromOpskinsBotResponse : pb::IMessage<SellItemsFromOpskinsBotResponse> {
    private static readonly pb::MessageParser<SellItemsFromOpskinsBotResponse> _parser = new pb::MessageParser<SellItemsFromOpskinsBotResponse>(() => new SellItemsFromOpskinsBotResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellItemsFromOpskinsBotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotResponse(SellItemsFromOpskinsBotResponse other) : this() {
      statusCode_ = other.statusCode_;
      statusMessage_ = other.statusMessage_;
      timestamp_ = other.timestamp_;
      switch (other.DataCase) {
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case DataOneofCase.Items:
          Items = other.Items.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItemsFromOpskinsBotResponse Clone() {
      return new SellItemsFromOpskinsBotResponse(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "statusMessage" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.opskinsError Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunication.opskinsError) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.opskinsItems Items {
      get { return dataCase_ == DataOneofCase.Items ? (global::RpcCommunication.opskinsItems) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Items;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Error = 3,
      Items = 4,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellItemsFromOpskinsBotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellItemsFromOpskinsBotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      if (dataCase_ == DataOneofCase.Items) hash ^= Items.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      if (dataCase_ == DataOneofCase.Items) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (dataCase_ == DataOneofCase.Items) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellItemsFromOpskinsBotResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      switch (other.DataCase) {
        case DataOneofCase.Error:
          Error = other.Error;
          break;
        case DataOneofCase.Items:
          Items = other.Items;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
          case 26: {
            global::RpcCommunication.opskinsError subBuilder = new global::RpcCommunication.opskinsError();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 34: {
            global::RpcCommunication.opskinsItems subBuilder = new global::RpcCommunication.opskinsItems();
            if (dataCase_ == DataOneofCase.Items) {
              subBuilder.MergeFrom(Items);
            }
            input.ReadMessage(subBuilder);
            Items = subBuilder;
            break;
          }
          case 42: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class opskinsError : pb::IMessage<opskinsError> {
    private static readonly pb::MessageParser<opskinsError> _parser = new pb::MessageParser<opskinsError>(() => new opskinsError());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<opskinsError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsError(opskinsError other) : this() {
      message_ = other.message_;
      rejectedItems_ = other.rejectedItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsError Clone() {
      return new opskinsError(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rejectedItems" field.</summary>
    public const int RejectedItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RpcCommunication.OpskinItem> _repeated_rejectedItems_codec
        = pb::FieldCodec.ForMessage(18, global::RpcCommunication.OpskinItem.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.OpskinItem> rejectedItems_ = new pbc::RepeatedField<global::RpcCommunication.OpskinItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.OpskinItem> RejectedItems {
      get { return rejectedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as opskinsError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(opskinsError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if(!rejectedItems_.Equals(other.rejectedItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= rejectedItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      rejectedItems_.WriteTo(output, _repeated_rejectedItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += rejectedItems_.CalculateSize(_repeated_rejectedItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(opskinsError other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      rejectedItems_.Add(other.rejectedItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            rejectedItems_.AddEntriesFrom(input, _repeated_rejectedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class opskinsItems : pb::IMessage<opskinsItems> {
    private static readonly pb::MessageParser<opskinsItems> _parser = new pb::MessageParser<opskinsItems>(() => new opskinsItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<opskinsItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsItems(opskinsItems other) : this() {
      acceptedItems_ = other.acceptedItems_.Clone();
      rejectedItems_ = other.rejectedItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsItems Clone() {
      return new opskinsItems(this);
    }

    /// <summary>Field number for the "acceptedItems" field.</summary>
    public const int AcceptedItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::RpcCommunication.OpskinItem> _repeated_acceptedItems_codec
        = pb::FieldCodec.ForMessage(26, global::RpcCommunication.OpskinItem.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.OpskinItem> acceptedItems_ = new pbc::RepeatedField<global::RpcCommunication.OpskinItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.OpskinItem> AcceptedItems {
      get { return acceptedItems_; }
    }

    /// <summary>Field number for the "rejectedItems" field.</summary>
    public const int RejectedItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::RpcCommunication.OpskinItem> _repeated_rejectedItems_codec
        = pb::FieldCodec.ForMessage(34, global::RpcCommunication.OpskinItem.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunication.OpskinItem> rejectedItems_ = new pbc::RepeatedField<global::RpcCommunication.OpskinItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunication.OpskinItem> RejectedItems {
      get { return rejectedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as opskinsItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(opskinsItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!acceptedItems_.Equals(other.acceptedItems_)) return false;
      if(!rejectedItems_.Equals(other.rejectedItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= acceptedItems_.GetHashCode();
      hash ^= rejectedItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      acceptedItems_.WriteTo(output, _repeated_acceptedItems_codec);
      rejectedItems_.WriteTo(output, _repeated_rejectedItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += acceptedItems_.CalculateSize(_repeated_acceptedItems_codec);
      size += rejectedItems_.CalculateSize(_repeated_rejectedItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(opskinsItems other) {
      if (other == null) {
        return;
      }
      acceptedItems_.Add(other.acceptedItems_);
      rejectedItems_.Add(other.rejectedItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            acceptedItems_.AddEntriesFrom(input, _repeated_acceptedItems_codec);
            break;
          }
          case 34: {
            rejectedItems_.AddEntriesFrom(input, _repeated_rejectedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpskinItem : pb::IMessage<OpskinItem> {
    private static readonly pb::MessageParser<OpskinItem> _parser = new pb::MessageParser<OpskinItem>(() => new OpskinItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpskinItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinItem(OpskinItem other) : this() {
      classId_ = other.classId_;
      instanceId_ = other.instanceId_;
      assetId_ = other.assetId_;
      instantsellCredits_ = other.instantsellCredits_;
      instantsellMoney_ = other.instantsellMoney_;
      amount_ = other.amount_;
      contextId_ = other.contextId_;
      appId_ = other.appId_;
      errMessage_ = other.errMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpskinItem Clone() {
      return new OpskinItem(this);
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 1;
    private string classId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private string instanceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instantsellCredits" field.</summary>
    public const int InstantsellCreditsFieldNumber = 4;
    private int instantsellCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantsellCredits {
      get { return instantsellCredits_; }
      set {
        instantsellCredits_ = value;
      }
    }

    /// <summary>Field number for the "instantsellMoney" field.</summary>
    public const int InstantsellMoneyFieldNumber = 5;
    private int instantsellMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantsellMoney {
      get { return instantsellMoney_; }
      set {
        instantsellMoney_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 7;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 8;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "errMessage" field.</summary>
    public const int ErrMessageFieldNumber = 9;
    private string errMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMessage {
      get { return errMessage_; }
      set {
        errMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpskinItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpskinItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassId != other.ClassId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (AssetId != other.AssetId) return false;
      if (InstantsellCredits != other.InstantsellCredits) return false;
      if (InstantsellMoney != other.InstantsellMoney) return false;
      if (Amount != other.Amount) return false;
      if (ContextId != other.ContextId) return false;
      if (AppId != other.AppId) return false;
      if (ErrMessage != other.ErrMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (InstantsellCredits != 0) hash ^= InstantsellCredits.GetHashCode();
      if (InstantsellMoney != 0) hash ^= InstantsellMoney.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ErrMessage.Length != 0) hash ^= ErrMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClassId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassId);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (InstantsellCredits != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InstantsellCredits);
      }
      if (InstantsellMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InstantsellMoney);
      }
      if (Amount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Amount);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ContextId);
      }
      if (AppId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AppId);
      }
      if (ErrMessage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ErrMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (InstantsellCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantsellCredits);
      }
      if (InstantsellMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantsellMoney);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ErrMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpskinItem other) {
      if (other == null) {
        return;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.InstantsellCredits != 0) {
        InstantsellCredits = other.InstantsellCredits;
      }
      if (other.InstantsellMoney != 0) {
        InstantsellMoney = other.InstantsellMoney;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ErrMessage.Length != 0) {
        ErrMessage = other.ErrMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClassId = input.ReadString();
            break;
          }
          case 18: {
            InstanceId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 32: {
            InstantsellCredits = input.ReadInt32();
            break;
          }
          case 40: {
            InstantsellMoney = input.ReadInt32();
            break;
          }
          case 48: {
            Amount = input.ReadInt32();
            break;
          }
          case 58: {
            ContextId = input.ReadString();
            break;
          }
          case 64: {
            AppId = input.ReadInt32();
            break;
          }
          case 74: {
            ErrMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class opskinsRejectedItem : pb::IMessage<opskinsRejectedItem> {
    private static readonly pb::MessageParser<opskinsRejectedItem> _parser = new pb::MessageParser<opskinsRejectedItem>(() => new opskinsRejectedItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<opskinsRejectedItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsRejectedItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsRejectedItem(opskinsRejectedItem other) : this() {
      appId_ = other.appId_;
      contextId_ = other.contextId_;
      assetId_ = other.assetId_;
      classId_ = other.classId_;
      instaceId_ = other.instaceId_;
      amount_ = other.amount_;
      errMessage_ = other.errMessage_;
      instantSellCredits_ = other.instantSellCredits_;
      instantSellMoney_ = other.instantSellMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsRejectedItem Clone() {
      return new opskinsRejectedItem(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 4;
    private string classId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instaceId" field.</summary>
    public const int InstaceIdFieldNumber = 5;
    private string instaceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstaceId {
      get { return instaceId_; }
      set {
        instaceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "errMessage" field.</summary>
    public const int ErrMessageFieldNumber = 7;
    private string errMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMessage {
      get { return errMessage_; }
      set {
        errMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instantSellCredits" field.</summary>
    public const int InstantSellCreditsFieldNumber = 8;
    private int instantSellCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantSellCredits {
      get { return instantSellCredits_; }
      set {
        instantSellCredits_ = value;
      }
    }

    /// <summary>Field number for the "instantSellMoney" field.</summary>
    public const int InstantSellMoneyFieldNumber = 9;
    private int instantSellMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantSellMoney {
      get { return instantSellMoney_; }
      set {
        instantSellMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as opskinsRejectedItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(opskinsRejectedItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (ContextId != other.ContextId) return false;
      if (AssetId != other.AssetId) return false;
      if (ClassId != other.ClassId) return false;
      if (InstaceId != other.InstaceId) return false;
      if (Amount != other.Amount) return false;
      if (ErrMessage != other.ErrMessage) return false;
      if (InstantSellCredits != other.InstantSellCredits) return false;
      if (InstantSellMoney != other.InstantSellMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (InstaceId.Length != 0) hash ^= InstaceId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (ErrMessage.Length != 0) hash ^= ErrMessage.GetHashCode();
      if (InstantSellCredits != 0) hash ^= InstantSellCredits.GetHashCode();
      if (InstantSellMoney != 0) hash ^= InstantSellMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassId);
      }
      if (InstaceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstaceId);
      }
      if (Amount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Amount);
      }
      if (ErrMessage.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ErrMessage);
      }
      if (InstantSellCredits != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(InstantSellCredits);
      }
      if (InstantSellMoney != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InstantSellMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (InstaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstaceId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (ErrMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMessage);
      }
      if (InstantSellCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantSellCredits);
      }
      if (InstantSellMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantSellMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(opskinsRejectedItem other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.InstaceId.Length != 0) {
        InstaceId = other.InstaceId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.ErrMessage.Length != 0) {
        ErrMessage = other.ErrMessage;
      }
      if (other.InstantSellCredits != 0) {
        InstantSellCredits = other.InstantSellCredits;
      }
      if (other.InstantSellMoney != 0) {
        InstantSellMoney = other.InstantSellMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            ClassId = input.ReadString();
            break;
          }
          case 42: {
            InstaceId = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt32();
            break;
          }
          case 58: {
            ErrMessage = input.ReadString();
            break;
          }
          case 64: {
            InstantSellCredits = input.ReadInt32();
            break;
          }
          case 72: {
            InstantSellMoney = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class opskinsAcceptedItem : pb::IMessage<opskinsAcceptedItem> {
    private static readonly pb::MessageParser<opskinsAcceptedItem> _parser = new pb::MessageParser<opskinsAcceptedItem>(() => new opskinsAcceptedItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<opskinsAcceptedItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsAcceptedItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsAcceptedItem(opskinsAcceptedItem other) : this() {
      appId_ = other.appId_;
      contextId_ = other.contextId_;
      assetId_ = other.assetId_;
      classId_ = other.classId_;
      instaceId_ = other.instaceId_;
      amount_ = other.amount_;
      instantSellCredits_ = other.instantSellCredits_;
      instantSellMoney_ = other.instantSellMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public opskinsAcceptedItem Clone() {
      return new opskinsAcceptedItem(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "contextId" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 4;
    private string classId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instaceId" field.</summary>
    public const int InstaceIdFieldNumber = 5;
    private string instaceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstaceId {
      get { return instaceId_; }
      set {
        instaceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "instantSellCredits" field.</summary>
    public const int InstantSellCreditsFieldNumber = 7;
    private int instantSellCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantSellCredits {
      get { return instantSellCredits_; }
      set {
        instantSellCredits_ = value;
      }
    }

    /// <summary>Field number for the "instantSellMoney" field.</summary>
    public const int InstantSellMoneyFieldNumber = 8;
    private int instantSellMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstantSellMoney {
      get { return instantSellMoney_; }
      set {
        instantSellMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as opskinsAcceptedItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(opskinsAcceptedItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (ContextId != other.ContextId) return false;
      if (AssetId != other.AssetId) return false;
      if (ClassId != other.ClassId) return false;
      if (InstaceId != other.InstaceId) return false;
      if (Amount != other.Amount) return false;
      if (InstantSellCredits != other.InstantSellCredits) return false;
      if (InstantSellMoney != other.InstantSellMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (InstaceId.Length != 0) hash ^= InstaceId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (InstantSellCredits != 0) hash ^= InstantSellCredits.GetHashCode();
      if (InstantSellMoney != 0) hash ^= InstantSellMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassId);
      }
      if (InstaceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstaceId);
      }
      if (Amount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Amount);
      }
      if (InstantSellCredits != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InstantSellCredits);
      }
      if (InstantSellMoney != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(InstantSellMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (InstaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstaceId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (InstantSellCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantSellCredits);
      }
      if (InstantSellMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstantSellMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(opskinsAcceptedItem other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.InstaceId.Length != 0) {
        InstaceId = other.InstaceId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.InstantSellCredits != 0) {
        InstantSellCredits = other.InstantSellCredits;
      }
      if (other.InstantSellMoney != 0) {
        InstantSellMoney = other.InstantSellMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            ClassId = input.ReadString();
            break;
          }
          case 42: {
            InstaceId = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt32();
            break;
          }
          case 56: {
            InstantSellCredits = input.ReadInt32();
            break;
          }
          case 64: {
            InstantSellMoney = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// error //
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bot : pb::IMessage<Bot> {
    private static readonly pb::MessageParser<Bot> _parser = new pb::MessageParser<Bot>(() => new Bot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunication.MessagesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bot(Bot other) : this() {
      username_ = other.username_;
      steamId_ = other.steamId_;
      botType_ = other.botType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bot Clone() {
      return new Bot(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "botType" field.</summary>
    public const int BotTypeFieldNumber = 3;
    private global::RpcCommunication.botType botType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunication.botType BotType {
      get { return botType_; }
      set {
        botType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (SteamId != other.SteamId) return false;
      if (BotType != other.BotType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (BotType != 0) hash ^= BotType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (BotType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BotType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (BotType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BotType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bot other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.BotType != 0) {
        BotType = other.BotType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
          case 24: {
            botType_ = (global::RpcCommunication.botType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
