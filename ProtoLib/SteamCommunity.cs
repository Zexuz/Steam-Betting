// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/steamCommunity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunicationSteamCommunity {

  /// <summary>Holder for reflection information generated from protofiles/steamCommunity.proto</summary>
  public static partial class SteamCommunityReflection {

    #region Descriptor
    /// <summary>File descriptor for protofiles/steamCommunity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SteamCommunityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9wcm90b2ZpbGVzL3N0ZWFtQ29tbXVuaXR5LnByb3RvEg5TdGVhbUNvbW11",
            "bml0eSJDChpQcmljZUhpc3RvcnlGb3JJdGVtUmVxdWVzdBINCgVhcHBJZBgB",
            "IAEoBRIWCg5NYXJrZXRIYXNoTmFtZRgCIAEoCSJVChtQcmljZUhpc3RvcnlG",
            "b3JJdGVtUmVzcG9uc2USDwoHU3VjY2VzcxgBIAEoCBIlCgZQcmljZXMYAiAD",
            "KAsyFS5TdGVhbUNvbW11bml0eS5QcmljZSI+CgVQcmljZRIMCgRUaW1lGAEg",
            "ASgJEhIKCkFtb3VudFNvbGQYAiABKAUSEwoLTWVkaWFuUHJpY2UYAyABKAEi",
            "DgoMRW1wdHlNZXNzYWdlMsgBCgtDaGF0U2VydmljZRJECgRQaW5nEhwuU3Rl",
            "YW1Db21tdW5pdHkuRW1wdHlNZXNzYWdlGhwuU3RlYW1Db21tdW5pdHkuRW1w",
            "dHlNZXNzYWdlIgAScwoWR2V0UHJpY2VIaXN0b3J5Rm9ySXRlbRIqLlN0ZWFt",
            "Q29tbXVuaXR5LlByaWNlSGlzdG9yeUZvckl0ZW1SZXF1ZXN0GisuU3RlYW1D",
            "b21tdW5pdHkuUHJpY2VIaXN0b3J5Rm9ySXRlbVJlc3BvbnNlIgBCIaoCHlJw",
            "Y0NvbW11bmljYXRpb25TdGVhbUNvbW11bml0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationSteamCommunity.PriceHistoryForItemRequest), global::RpcCommunicationSteamCommunity.PriceHistoryForItemRequest.Parser, new[]{ "AppId", "MarketHashName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationSteamCommunity.PriceHistoryForItemResponse), global::RpcCommunicationSteamCommunity.PriceHistoryForItemResponse.Parser, new[]{ "Success", "Prices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationSteamCommunity.Price), global::RpcCommunicationSteamCommunity.Price.Parser, new[]{ "Time", "AmountSold", "MedianPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationSteamCommunity.EmptyMessage), global::RpcCommunicationSteamCommunity.EmptyMessage.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PriceHistoryForItemRequest : pb::IMessage<PriceHistoryForItemRequest> {
    private static readonly pb::MessageParser<PriceHistoryForItemRequest> _parser = new pb::MessageParser<PriceHistoryForItemRequest>(() => new PriceHistoryForItemRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceHistoryForItemRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationSteamCommunity.SteamCommunityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemRequest(PriceHistoryForItemRequest other) : this() {
      appId_ = other.appId_;
      marketHashName_ = other.marketHashName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemRequest Clone() {
      return new PriceHistoryForItemRequest(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private int appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "MarketHashName" field.</summary>
    public const int MarketHashNameFieldNumber = 2;
    private string marketHashName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketHashName {
      get { return marketHashName_; }
      set {
        marketHashName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceHistoryForItemRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceHistoryForItemRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (MarketHashName != other.MarketHashName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId != 0) hash ^= AppId.GetHashCode();
      if (MarketHashName.Length != 0) hash ^= MarketHashName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AppId);
      }
      if (MarketHashName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MarketHashName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppId);
      }
      if (MarketHashName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketHashName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceHistoryForItemRequest other) {
      if (other == null) {
        return;
      }
      if (other.AppId != 0) {
        AppId = other.AppId;
      }
      if (other.MarketHashName.Length != 0) {
        MarketHashName = other.MarketHashName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppId = input.ReadInt32();
            break;
          }
          case 18: {
            MarketHashName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PriceHistoryForItemResponse : pb::IMessage<PriceHistoryForItemResponse> {
    private static readonly pb::MessageParser<PriceHistoryForItemResponse> _parser = new pb::MessageParser<PriceHistoryForItemResponse>(() => new PriceHistoryForItemResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceHistoryForItemResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationSteamCommunity.SteamCommunityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemResponse(PriceHistoryForItemResponse other) : this() {
      success_ = other.success_;
      prices_ = other.prices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceHistoryForItemResponse Clone() {
      return new PriceHistoryForItemResponse(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "Prices" field.</summary>
    public const int PricesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RpcCommunicationSteamCommunity.Price> _repeated_prices_codec
        = pb::FieldCodec.ForMessage(18, global::RpcCommunicationSteamCommunity.Price.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationSteamCommunity.Price> prices_ = new pbc::RepeatedField<global::RpcCommunicationSteamCommunity.Price>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationSteamCommunity.Price> Prices {
      get { return prices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceHistoryForItemResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceHistoryForItemResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!prices_.Equals(other.prices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= prices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      prices_.WriteTo(output, _repeated_prices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += prices_.CalculateSize(_repeated_prices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceHistoryForItemResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      prices_.Add(other.prices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            prices_.AddEntriesFrom(input, _repeated_prices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Price : pb::IMessage<Price> {
    private static readonly pb::MessageParser<Price> _parser = new pb::MessageParser<Price>(() => new Price());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Price> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationSteamCommunity.SteamCommunityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price(Price other) : this() {
      time_ = other.time_;
      amountSold_ = other.amountSold_;
      medianPrice_ = other.medianPrice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price Clone() {
      return new Price(this);
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AmountSold" field.</summary>
    public const int AmountSoldFieldNumber = 2;
    private int amountSold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AmountSold {
      get { return amountSold_; }
      set {
        amountSold_ = value;
      }
    }

    /// <summary>Field number for the "MedianPrice" field.</summary>
    public const int MedianPriceFieldNumber = 3;
    private double medianPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MedianPrice {
      get { return medianPrice_; }
      set {
        medianPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Price);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Price other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (AmountSold != other.AmountSold) return false;
      if (MedianPrice != other.MedianPrice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (AmountSold != 0) hash ^= AmountSold.GetHashCode();
      if (MedianPrice != 0D) hash ^= MedianPrice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (AmountSold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AmountSold);
      }
      if (MedianPrice != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MedianPrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (AmountSold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AmountSold);
      }
      if (MedianPrice != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Price other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.AmountSold != 0) {
        AmountSold = other.AmountSold;
      }
      if (other.MedianPrice != 0D) {
        MedianPrice = other.MedianPrice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            AmountSold = input.ReadInt32();
            break;
          }
          case 25: {
            MedianPrice = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationSteamCommunity.SteamCommunityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
