// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/ticket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunicationTicket {

  /// <summary>Holder for reflection information generated from protofiles/ticket.proto</summary>
  public static partial class TicketReflection {

    #region Descriptor
    /// <summary>File descriptor for protofiles/ticket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TicketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdwcm90b2ZpbGVzL3RpY2tldC5wcm90bxITVGlja2V0Q29tbXVuaWNhdGlv",
            "biIOCgxFbXB0eU1lc3NhZ2UiQAobVXNlck1hcmtUaWNrZXRBc1JlYWRSZXF1",
            "ZXN0Eg8KB3N0ZWFtSWQYASABKAkSEAoIdGlja2V0SWQYAiABKAkiGgoHU3Rl",
            "YW1pZBIPCgdzdGVhbUlkGAEgASgJIjAKHlVzZXJDb3VudFVucmVhZFRpY2tl",
            "dHNSZXNwb25zZRIOCgZhbW91bnQYASABKAUicwoaVXNlclJlc3BvbmRUb1Rp",
            "Y2tldFJlcXVlc3QSDwoHc3RlYW1JZBgBIAEoCRIQCgh0aWNrZXRJZBgCIAEo",
            "CRIyCgdtZXNzYWdlGAMgASgLMiEuVGlja2V0Q29tbXVuaWNhdGlvbi5JbnB1",
            "dE1lc3NhZ2UibQoXVXNlckNyZWF0ZVRpY2tldFJlcXVlc3QSDwoHc3RlYW1J",
            "ZBgBIAEoCRINCgV0aXRsZRgCIAEoCRIyCgdtZXNzYWdlGAMgASgLMiEuVGlj",
            "a2V0Q29tbXVuaWNhdGlvbi5JbnB1dE1lc3NhZ2UidQodQWRtaW5HZXRUaWNr",
            "ZXRzT25RdWVyeVJlcXVlc3QSEAoIdGlja2V0SWQYASABKAkSDwoHc3RlYW1J",
            "ZBgCIAEoCRIxCgZzdGF0dXMYAyABKA4yIS5UaWNrZXRDb21tdW5pY2F0aW9u",
            "LlRpY2tldFN0YXR1cyJuChhBZG1pbkNyZWF0ZVRpY2tldFJlcXVlc3QSDwoH",
            "c3RlYW1JZBgBIAEoCRINCgV0aXRsZRgCIAEoCRIyCgdtZXNzYWdlGAMgASgL",
            "MiEuVGlja2V0Q29tbXVuaWNhdGlvbi5JbnB1dE1lc3NhZ2UiZwogQWRtaW5D",
            "aGFuZ2VTdGF0dXNPblRpY2tldFJlcXVlc3QSEAoIdGlja2V0SWQYASABKAkS",
            "MQoGc3RhdHVzGAIgASgOMiEuVGlja2V0Q29tbXVuaWNhdGlvbi5UaWNrZXRT",
            "dGF0dXMiYwobQWRtaW5SZXNwb25kVG9UaWNrZXRSZXF1ZXN0EhAKCHRpY2tl",
            "dElkGAEgASgJEjIKB21lc3NhZ2UYAyABKAsyIS5UaWNrZXRDb21tdW5pY2F0",
            "aW9uLklucHV0TWVzc2FnZSIxCgxJbnB1dE1lc3NhZ2USEwoLbWVzc2FnZUJv",
            "ZHkYASABKAkSDAoEbmFtZRgCIAEoCSJYCg9SZXNwb25zZU1lc3NhZ2USEwoL",
            "bWVzc2FnZUJvZHkYASABKAkSDwoHc3RlYW1JZBgCIAEoCRIMCgRuYW1lGAMg",
            "ASgJEhEKCXRpbWVzdGFtcBgEIAEoCSKAAQoTTGlzdFRpY2tldHNSZXNwb25z",
            "ZRI0Cgd0aWNrZXRzGAEgASgLMiEuVGlja2V0Q29tbXVuaWNhdGlvbi5UaWNr",
            "ZXRzQXJyYXlIABIrCgVlcnJvchgCIAEoCzIaLlRpY2tldENvbW11bmljYXRp",
            "b24uRXJyb3JIAEIGCgREYXRhInoKFFNpbmdsZVRpY2tldFJlc3BvbnNlEi0K",
            "BnRpY2tldBgBIAEoCzIbLlRpY2tldENvbW11bmljYXRpb24uVGlja2V0SAAS",
            "KwoFZXJyb3IYAiABKAsyGi5UaWNrZXRDb21tdW5pY2F0aW9uLkVycm9ySABC",
            "BgoERGF0YSI/CgxUaWNrZXRzQXJyYXkSLwoKdGlja2V0TGlzdBgBIAMoCzIb",
            "LlRpY2tldENvbW11bmljYXRpb24uVGlja2V0IqMBCgZUaWNrZXQSEAoIdGlj",
            "a2V0SWQYASABKAkSEQoJdGltZXN0YW1wGAIgASgJEg0KBXRpdGxlGAMgASgJ",
            "Eg8KB3N0ZWFtSWQYBCABKAkSDgoGc3RhdHVzGAUgASgJEgwKBHJlYWQYBiAB",
            "KAgSNgoIbWVzc2FnZXMYByADKAsyJC5UaWNrZXRDb21tdW5pY2F0aW9uLlJl",
            "c3BvbnNlTWVzc2FnZSIYCgVFcnJvchIPCgdtZXNzYWdlGAEgASgJKkYKDFRp",
            "Y2tldFN0YXR1cxIJCgVlbXB0eRAAEgcKA25ldxABEgwKCGFuc3dlcmVkEAIS",
            "CAoEb3BlbhADEgoKBmNsb3NlZBAEMusICg1UaWNrZXRTZXJ2aWNlEm0KEFVz",
            "ZXJDcmVhdGVUaWNrZXQSLC5UaWNrZXRDb21tdW5pY2F0aW9uLlVzZXJDcmVh",
            "dGVUaWNrZXRSZXF1ZXN0GikuVGlja2V0Q29tbXVuaWNhdGlvbi5TaW5nbGVU",
            "aWNrZXRSZXNwb25zZSIAEnMKE1VzZXJSZXNwb25kVG9UaWNrZXQSLy5UaWNr",
            "ZXRDb21tdW5pY2F0aW9uLlVzZXJSZXNwb25kVG9UaWNrZXRSZXF1ZXN0Giku",
            "VGlja2V0Q29tbXVuaWNhdGlvbi5TaW5nbGVUaWNrZXRSZXNwb25zZSIAEl0K",
            "EVVzZXJHZXRBbGxUaWNrZXRzEhwuVGlja2V0Q29tbXVuaWNhdGlvbi5TdGVh",
            "bWlkGiguVGlja2V0Q29tbXVuaWNhdGlvbi5MaXN0VGlja2V0c1Jlc3BvbnNl",
            "IgASbQoWVXNlckNvdW50VW5yZWFkVGlja2V0cxIcLlRpY2tldENvbW11bmlj",
            "YXRpb24uU3RlYW1pZBozLlRpY2tldENvbW11bmljYXRpb24uVXNlckNvdW50",
            "VW5yZWFkVGlja2V0c1Jlc3BvbnNlIgASdQoUVXNlck1hcmtUaWNrZXRBc1Jl",
            "YWQSMC5UaWNrZXRDb21tdW5pY2F0aW9uLlVzZXJNYXJrVGlja2V0QXNSZWFk",
            "UmVxdWVzdBopLlRpY2tldENvbW11bmljYXRpb24uU2luZ2xlVGlja2V0UmVz",
            "cG9uc2UiABJOCgRQaW5nEiEuVGlja2V0Q29tbXVuaWNhdGlvbi5FbXB0eU1l",
            "c3NhZ2UaIS5UaWNrZXRDb21tdW5pY2F0aW9uLkVtcHR5TWVzc2FnZSIAEm8K",
            "EUFkbWluQ3JlYXRlVGlja2V0Ei0uVGlja2V0Q29tbXVuaWNhdGlvbi5BZG1p",
            "bkNyZWF0ZVRpY2tldFJlcXVlc3QaKS5UaWNrZXRDb21tdW5pY2F0aW9uLlNp",
            "bmdsZVRpY2tldFJlc3BvbnNlIgASdQoUQWRtaW5SZXNwb25kVG9UaWNrZXQS",
            "MC5UaWNrZXRDb21tdW5pY2F0aW9uLkFkbWluUmVzcG9uZFRvVGlja2V0UmVx",
            "dWVzdBopLlRpY2tldENvbW11bmljYXRpb24uU2luZ2xlVGlja2V0UmVzcG9u",
            "c2UiABJ/ChlBZG1pbkNoYW5nZVN0YXR1c09uVGlja2V0EjUuVGlja2V0Q29t",
            "bXVuaWNhdGlvbi5BZG1pbkNoYW5nZVN0YXR1c09uVGlja2V0UmVxdWVzdBop",
            "LlRpY2tldENvbW11bmljYXRpb24uU2luZ2xlVGlja2V0UmVzcG9uc2UiABJ4",
            "ChZBZG1pbkdldFRpY2tldHNPblF1ZXJ5EjIuVGlja2V0Q29tbXVuaWNhdGlv",
            "bi5BZG1pbkdldFRpY2tldHNPblF1ZXJ5UmVxdWVzdBooLlRpY2tldENvbW11",
            "bmljYXRpb24uTGlzdFRpY2tldHNSZXNwb25zZSIAQhmqAhZScGNDb21tdW5p",
            "Y2F0aW9uVGlja2V0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RpcCommunicationTicket.TicketStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.EmptyMessage), global::RpcCommunicationTicket.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.UserMarkTicketAsReadRequest), global::RpcCommunicationTicket.UserMarkTicketAsReadRequest.Parser, new[]{ "SteamId", "TicketId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.Steamid), global::RpcCommunicationTicket.Steamid.Parser, new[]{ "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.UserCountUnreadTicketsResponse), global::RpcCommunicationTicket.UserCountUnreadTicketsResponse.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.UserRespondToTicketRequest), global::RpcCommunicationTicket.UserRespondToTicketRequest.Parser, new[]{ "SteamId", "TicketId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.UserCreateTicketRequest), global::RpcCommunicationTicket.UserCreateTicketRequest.Parser, new[]{ "SteamId", "Title", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest), global::RpcCommunicationTicket.AdminGetTicketsOnQueryRequest.Parser, new[]{ "TicketId", "SteamId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.AdminCreateTicketRequest), global::RpcCommunicationTicket.AdminCreateTicketRequest.Parser, new[]{ "SteamId", "Title", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest), global::RpcCommunicationTicket.AdminChangeStatusOnTicketRequest.Parser, new[]{ "TicketId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.AdminRespondToTicketRequest), global::RpcCommunicationTicket.AdminRespondToTicketRequest.Parser, new[]{ "TicketId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.InputMessage), global::RpcCommunicationTicket.InputMessage.Parser, new[]{ "MessageBody", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.ResponseMessage), global::RpcCommunicationTicket.ResponseMessage.Parser, new[]{ "MessageBody", "SteamId", "Name", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.ListTicketsResponse), global::RpcCommunicationTicket.ListTicketsResponse.Parser, new[]{ "Tickets", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.SingleTicketResponse), global::RpcCommunicationTicket.SingleTicketResponse.Parser, new[]{ "Ticket", "Error" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.TicketsArray), global::RpcCommunicationTicket.TicketsArray.Parser, new[]{ "TicketList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.Ticket), global::RpcCommunicationTicket.Ticket.Parser, new[]{ "TicketId", "Timestamp", "Title", "SteamId", "Status", "Read", "Messages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationTicket.Error), global::RpcCommunicationTicket.Error.Parser, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TicketStatus {
    [pbr::OriginalName("empty")] Empty = 0,
    /// <summary>
    ///User created a new ticket.
    /// </summary>
    [pbr::OriginalName("new")] New = 1,
    /// <summary>
    ///Admin have responded to ticket.
    /// </summary>
    [pbr::OriginalName("answered")] Answered = 2,
    /// <summary>
    ///User has responded to ticket.
    /// </summary>
    [pbr::OriginalName("open")] Open = 3,
    /// <summary>
    ///Ticket is closed
    /// </summary>
    [pbr::OriginalName("closed")] Closed = 4,
  }

  #endregion

  #region Messages
  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// USER Endpoints
  /// </summary>
  public sealed partial class UserMarkTicketAsReadRequest : pb::IMessage<UserMarkTicketAsReadRequest> {
    private static readonly pb::MessageParser<UserMarkTicketAsReadRequest> _parser = new pb::MessageParser<UserMarkTicketAsReadRequest>(() => new UserMarkTicketAsReadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMarkTicketAsReadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMarkTicketAsReadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMarkTicketAsReadRequest(UserMarkTicketAsReadRequest other) : this() {
      steamId_ = other.steamId_;
      ticketId_ = other.ticketId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMarkTicketAsReadRequest Clone() {
      return new UserMarkTicketAsReadRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Should not be user input, append via api
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 2;
    private string ticketId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMarkTicketAsReadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMarkTicketAsReadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (TicketId != other.TicketId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (TicketId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMarkTicketAsReadRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            TicketId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steamid : pb::IMessage<Steamid> {
    private static readonly pb::MessageParser<Steamid> _parser = new pb::MessageParser<Steamid>(() => new Steamid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steamid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steamid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steamid(Steamid other) : this() {
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steamid Clone() {
      return new Steamid(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Should not be user input, append via api
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steamid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steamid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steamid other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserCountUnreadTicketsResponse : pb::IMessage<UserCountUnreadTicketsResponse> {
    private static readonly pb::MessageParser<UserCountUnreadTicketsResponse> _parser = new pb::MessageParser<UserCountUnreadTicketsResponse>(() => new UserCountUnreadTicketsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCountUnreadTicketsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountUnreadTicketsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountUnreadTicketsResponse(UserCountUnreadTicketsResponse other) : this() {
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountUnreadTicketsResponse Clone() {
      return new UserCountUnreadTicketsResponse(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCountUnreadTicketsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCountUnreadTicketsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCountUnreadTicketsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserRespondToTicketRequest : pb::IMessage<UserRespondToTicketRequest> {
    private static readonly pb::MessageParser<UserRespondToTicketRequest> _parser = new pb::MessageParser<UserRespondToTicketRequest>(() => new UserRespondToTicketRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRespondToTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRespondToTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRespondToTicketRequest(UserRespondToTicketRequest other) : this() {
      steamId_ = other.steamId_;
      ticketId_ = other.ticketId_;
      Message = other.message_ != null ? other.Message.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRespondToTicketRequest Clone() {
      return new UserRespondToTicketRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Should not be user input, append via api
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 2;
    private string ticketId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::RpcCommunicationTicket.InputMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.InputMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserRespondToTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserRespondToTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (TicketId != other.TicketId) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (TicketId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketId);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserRespondToTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::RpcCommunicationTicket.InputMessage();
        }
        Message.MergeFrom(other.Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            TicketId = input.ReadString();
            break;
          }
          case 26: {
            if (message_ == null) {
              message_ = new global::RpcCommunicationTicket.InputMessage();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserCreateTicketRequest : pb::IMessage<UserCreateTicketRequest> {
    private static readonly pb::MessageParser<UserCreateTicketRequest> _parser = new pb::MessageParser<UserCreateTicketRequest>(() => new UserCreateTicketRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCreateTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCreateTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCreateTicketRequest(UserCreateTicketRequest other) : this() {
      steamId_ = other.steamId_;
      title_ = other.title_;
      Message = other.message_ != null ? other.Message.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCreateTicketRequest Clone() {
      return new UserCreateTicketRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Should not be user input, append via api
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::RpcCommunicationTicket.InputMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.InputMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCreateTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCreateTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (Title != other.Title) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCreateTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::RpcCommunicationTicket.InputMessage();
        }
        Message.MergeFrom(other.Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            if (message_ == null) {
              message_ = new global::RpcCommunicationTicket.InputMessage();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///ADMIN Endpoints
  /// </summary>
  public sealed partial class AdminGetTicketsOnQueryRequest : pb::IMessage<AdminGetTicketsOnQueryRequest> {
    private static readonly pb::MessageParser<AdminGetTicketsOnQueryRequest> _parser = new pb::MessageParser<AdminGetTicketsOnQueryRequest>(() => new AdminGetTicketsOnQueryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminGetTicketsOnQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminGetTicketsOnQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminGetTicketsOnQueryRequest(AdminGetTicketsOnQueryRequest other) : this() {
      ticketId_ = other.ticketId_;
      steamId_ = other.steamId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminGetTicketsOnQueryRequest Clone() {
      return new AdminGetTicketsOnQueryRequest(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    /// <summary>
    ///optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    /// <summary>
    ///optional (allow admin input)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::RpcCommunicationTicket.TicketStatus status_ = 0;
    /// <summary>
    ///optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminGetTicketsOnQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminGetTicketsOnQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (SteamId != other.SteamId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminGetTicketsOnQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
          case 24: {
            status_ = (global::RpcCommunicationTicket.TicketStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminCreateTicketRequest : pb::IMessage<AdminCreateTicketRequest> {
    private static readonly pb::MessageParser<AdminCreateTicketRequest> _parser = new pb::MessageParser<AdminCreateTicketRequest>(() => new AdminCreateTicketRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminCreateTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminCreateTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminCreateTicketRequest(AdminCreateTicketRequest other) : this() {
      steamId_ = other.steamId_;
      title_ = other.title_;
      Message = other.message_ != null ? other.Message.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminCreateTicketRequest Clone() {
      return new AdminCreateTicketRequest(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    /// <summary>
    ///Admin can put any steamid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::RpcCommunicationTicket.InputMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.InputMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminCreateTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminCreateTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (Title != other.Title) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminCreateTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::RpcCommunicationTicket.InputMessage();
        }
        Message.MergeFrom(other.Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            if (message_ == null) {
              message_ = new global::RpcCommunicationTicket.InputMessage();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminChangeStatusOnTicketRequest : pb::IMessage<AdminChangeStatusOnTicketRequest> {
    private static readonly pb::MessageParser<AdminChangeStatusOnTicketRequest> _parser = new pb::MessageParser<AdminChangeStatusOnTicketRequest>(() => new AdminChangeStatusOnTicketRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminChangeStatusOnTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminChangeStatusOnTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminChangeStatusOnTicketRequest(AdminChangeStatusOnTicketRequest other) : this() {
      ticketId_ = other.ticketId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminChangeStatusOnTicketRequest Clone() {
      return new AdminChangeStatusOnTicketRequest(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::RpcCommunicationTicket.TicketStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminChangeStatusOnTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminChangeStatusOnTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminChangeStatusOnTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 16: {
            status_ = (global::RpcCommunicationTicket.TicketStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminRespondToTicketRequest : pb::IMessage<AdminRespondToTicketRequest> {
    private static readonly pb::MessageParser<AdminRespondToTicketRequest> _parser = new pb::MessageParser<AdminRespondToTicketRequest>(() => new AdminRespondToTicketRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminRespondToTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminRespondToTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminRespondToTicketRequest(AdminRespondToTicketRequest other) : this() {
      ticketId_ = other.ticketId_;
      Message = other.message_ != null ? other.Message.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminRespondToTicketRequest Clone() {
      return new AdminRespondToTicketRequest(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::RpcCommunicationTicket.InputMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.InputMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminRespondToTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminRespondToTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminRespondToTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::RpcCommunicationTicket.InputMessage();
        }
        Message.MergeFrom(other.Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 26: {
            if (message_ == null) {
              message_ = new global::RpcCommunicationTicket.InputMessage();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Data types
  /// </summary>
  public sealed partial class InputMessage : pb::IMessage<InputMessage> {
    private static readonly pb::MessageParser<InputMessage> _parser = new pb::MessageParser<InputMessage>(() => new InputMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputMessage(InputMessage other) : this() {
      messageBody_ = other.messageBody_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputMessage Clone() {
      return new InputMessage(this);
    }

    /// <summary>Field number for the "messageBody" field.</summary>
    public const int MessageBodyFieldNumber = 1;
    private string messageBody_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageBody {
      get { return messageBody_; }
      set {
        messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///optional, why not (kan vara bra för oss att upptäcka spelaren i tex chatten)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageBody != other.MessageBody) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageBody.Length != 0) hash ^= MessageBody.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageBody.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageBody);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageBody);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageBody.Length != 0) {
        MessageBody = other.MessageBody;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MessageBody = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseMessage : pb::IMessage<ResponseMessage> {
    private static readonly pb::MessageParser<ResponseMessage> _parser = new pb::MessageParser<ResponseMessage>(() => new ResponseMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage(ResponseMessage other) : this() {
      messageBody_ = other.messageBody_;
      steamId_ = other.steamId_;
      name_ = other.name_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage Clone() {
      return new ResponseMessage(this);
    }

    /// <summary>Field number for the "messageBody" field.</summary>
    public const int MessageBodyFieldNumber = 1;
    private string messageBody_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageBody {
      get { return messageBody_; }
      set {
        messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageBody != other.MessageBody) return false;
      if (SteamId != other.SteamId) return false;
      if (Name != other.Name) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageBody.Length != 0) hash ^= MessageBody.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageBody.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageBody);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageBody);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageBody.Length != 0) {
        MessageBody = other.MessageBody;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MessageBody = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTicketsResponse : pb::IMessage<ListTicketsResponse> {
    private static readonly pb::MessageParser<ListTicketsResponse> _parser = new pb::MessageParser<ListTicketsResponse>(() => new ListTicketsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTicketsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketsResponse(ListTicketsResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.Tickets:
          Tickets = other.Tickets.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketsResponse Clone() {
      return new ListTicketsResponse(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.TicketsArray Tickets {
      get { return dataCase_ == DataOneofCase.Tickets ? (global::RpcCommunicationTicket.TicketsArray) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Tickets;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunicationTicket.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Tickets = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTicketsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTicketsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tickets, other.Tickets)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.Tickets) hash ^= Tickets.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.Tickets) {
        output.WriteRawTag(10);
        output.WriteMessage(Tickets);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.Tickets) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tickets);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTicketsResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.Tickets:
          Tickets = other.Tickets;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunicationTicket.TicketsArray subBuilder = new global::RpcCommunicationTicket.TicketsArray();
            if (dataCase_ == DataOneofCase.Tickets) {
              subBuilder.MergeFrom(Tickets);
            }
            input.ReadMessage(subBuilder);
            Tickets = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunicationTicket.Error subBuilder = new global::RpcCommunicationTicket.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleTicketResponse : pb::IMessage<SingleTicketResponse> {
    private static readonly pb::MessageParser<SingleTicketResponse> _parser = new pb::MessageParser<SingleTicketResponse>(() => new SingleTicketResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleTicketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTicketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTicketResponse(SingleTicketResponse other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.Ticket:
          Ticket = other.Ticket.Clone();
          break;
        case DataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTicketResponse Clone() {
      return new SingleTicketResponse(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.Ticket Ticket {
      get { return dataCase_ == DataOneofCase.Ticket ? (global::RpcCommunicationTicket.Ticket) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Ticket;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationTicket.Error Error {
      get { return dataCase_ == DataOneofCase.Error ? (global::RpcCommunicationTicket.Error) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Error;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Ticket = 1,
      Error = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleTicketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleTicketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.Ticket) hash ^= Ticket.GetHashCode();
      if (dataCase_ == DataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.Ticket) {
        output.WriteRawTag(10);
        output.WriteMessage(Ticket);
      }
      if (dataCase_ == DataOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.Ticket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (dataCase_ == DataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleTicketResponse other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.Ticket:
          Ticket = other.Ticket;
          break;
        case DataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::RpcCommunicationTicket.Ticket subBuilder = new global::RpcCommunicationTicket.Ticket();
            if (dataCase_ == DataOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
          case 18: {
            global::RpcCommunicationTicket.Error subBuilder = new global::RpcCommunicationTicket.Error();
            if (dataCase_ == DataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketsArray : pb::IMessage<TicketsArray> {
    private static readonly pb::MessageParser<TicketsArray> _parser = new pb::MessageParser<TicketsArray>(() => new TicketsArray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketsArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsArray(TicketsArray other) : this() {
      ticketList_ = other.ticketList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsArray Clone() {
      return new TicketsArray(this);
    }

    /// <summary>Field number for the "ticketList" field.</summary>
    public const int TicketListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RpcCommunicationTicket.Ticket> _repeated_ticketList_codec
        = pb::FieldCodec.ForMessage(10, global::RpcCommunicationTicket.Ticket.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationTicket.Ticket> ticketList_ = new pbc::RepeatedField<global::RpcCommunicationTicket.Ticket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationTicket.Ticket> TicketList {
      get { return ticketList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketsArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketsArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ticketList_.Equals(other.ticketList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ticketList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ticketList_.WriteTo(output, _repeated_ticketList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ticketList_.CalculateSize(_repeated_ticketList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketsArray other) {
      if (other == null) {
        return;
      }
      ticketList_.Add(other.ticketList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ticketList_.AddEntriesFrom(input, _repeated_ticketList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      ticketId_ = other.ticketId_;
      timestamp_ = other.timestamp_;
      title_ = other.title_;
      steamId_ = other.steamId_;
      status_ = other.status_;
      read_ = other.read_;
      messages_ = other.messages_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 4;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 6;
    private bool read_;
    /// <summary>
    ///Has user read the ticket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Read {
      get { return read_; }
      set {
        read_ = value;
      }
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::RpcCommunicationTicket.ResponseMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(58, global::RpcCommunicationTicket.ResponseMessage.Parser);
    private readonly pbc::RepeatedField<global::RpcCommunicationTicket.ResponseMessage> messages_ = new pbc::RepeatedField<global::RpcCommunicationTicket.ResponseMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RpcCommunicationTicket.ResponseMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Title != other.Title) return false;
      if (SteamId != other.SteamId) return false;
      if (Status != other.Status) return false;
      if (Read != other.Read) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Read != false) hash ^= Read.GetHashCode();
      hash ^= messages_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timestamp);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SteamId);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (Read != false) {
        output.WriteRawTag(48);
        output.WriteBool(Read);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Read != false) {
        size += 1 + 1;
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Read != false) {
        Read = other.Read;
      }
      messages_.Add(other.messages_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            Timestamp = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            SteamId = input.ReadString();
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
          case 48: {
            Read = input.ReadBool();
            break;
          }
          case 58: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationTicket.TicketReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
