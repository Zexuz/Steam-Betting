// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoLib/Discord.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RpcCommunicationDiscord {

  /// <summary>Holder for reflection information generated from ProtoLib/Discord.proto</summary>
  public static partial class DiscordReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoLib/Discord.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DiscordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90b0xpYi9EaXNjb3JkLnByb3RvEhFDaGF0Q29tbXVuaWNhdGlvbiJR",
            "ChtHbG9iYWxFeGNlcHRpb25FcnJvclJlcXVlc3QSMgoFZXJyb3IYASABKAsy",
            "Iy5DaGF0Q29tbXVuaWNhdGlvbi5FeGNlcHRpb25NZXNzYWdlIlIKFUNvaW5G",
            "bGlwQ3JlYXRlUmVxdWVzdBI5CgdyZXF1ZXN0GAEgASgLMiguQ2hhdENvbW11",
            "bmljYXRpb24uQ29pbkZsaXBDcmVhdGVNZXNzYWdlIk4KE0NvaW5GbGlwSm9p",
            "blJlcXVlc3QSNwoHcmVxdWVzdBgBIAEoCzImLkNoYXRDb21tdW5pY2F0aW9u",
            "LkNvaW5GbGlwSm9pbk1lc3NhZ2UiTAoSQ2hhdE1lc3NhZ2VSZXF1ZXN0EjYK",
            "B3JlcXVlc3QYASABKAsyJS5DaGF0Q29tbXVuaWNhdGlvbi5DaGF0TWVzc2Fn",
            "ZU1lc3NhZ2UiSgoRSmFja3BvdEJldFJlcXVlc3QSNQoHcmVxdWVzdBgBIAEo",
            "CzIkLkNoYXRDb21tdW5pY2F0aW9uLkphY2twb3RCZXRNZXNzYWdlIkgKEFVz",
            "ZXJMb2dpblJlcXVlc3QSNAoHcmVxdWVzdBgBIAEoCzIjLkNoYXRDb21tdW5p",
            "Y2F0aW9uLlVzZXJMb2dpbk1lc3NhZ2UiUAoUSmFja3BvdFdpbm5lclJlcXVl",
            "c3QSOAoHcmVxdWVzdBgBIAEoCzInLkNoYXRDb21tdW5pY2F0aW9uLkphY2tw",
            "b3RXaW5uZXJNZXNzYWdlIlIKFUNvaW5GbGlwV2lubmVyUmVxdWVzdBI5Cgdy",
            "ZXF1ZXN0GAEgASgLMiguQ2hhdENvbW11bmljYXRpb24uQ29pbkZsaXBXaW5u",
            "ZXJNZXNzYWdlIg8KDUVtcHR5UmVzcG9uc2UiOgoWUGVyc29uYWxNZXNzYWdl",
            "UmVxdWVzdBIPCgdtZXNzYWdlGAEgASgJEg8KB3N0ZWFtSWQYAiABKAkiGQoX",
            "UGVyc29uYWxNZXNzYWdlUmVzcG9uc2UiFAoSVXNlckJldHRlZFJlc3BvbnNl",
            "Ig0KC1BpbmdSZXF1ZXN0Ig4KDFBpbmdSZXNwb25zZSItCg5BZGRVc2VyUmVx",
            "dWVzdBIKCgJJZBgBIAEoCRIPCgdzdGVhbUlkGAIgASgJIhEKD0FkZFVzZXJS",
            "ZXNwb25zZSJwChVDb2luRmxpcENyZWF0ZU1lc3NhZ2USDgoGdXNlcklkGAEg",
            "ASgJEhIKCmNvaW5GbGlwSWQYAiABKAkSEQoJYWxsb3dQdWJnGAMgASgIEhEK",
            "CWFsbG93Q3NnbxgEIAEoCBINCgV2YWx1ZRgFIAEoASJIChNDb2luRmxpcEpv",
            "aW5NZXNzYWdlEg4KBnVzZXJJZBgBIAEoCRISCgpjb2luRmxpcElkGAIgASgJ",
            "Eg0KBXZhbHVlGAUgASgBIj8KFUNvaW5GbGlwV2lubmVyTWVzc2FnZRISCgpj",
            "b2luRmxpcElkGAEgASgJEhIKCnRvdGFsVmFsdWUYAiABKAEiMwoSQ2hhdE1l",
            "c3NhZ2VNZXNzYWdlEgwKBG5hbWUYASABKAkSDwoHbWVzc2FnZRgCIAEoCSJD",
            "ChFKYWNrcG90QmV0TWVzc2FnZRIOCgZ1c2VySWQYASABKAkSDQoFdmFsdWUY",
            "AiABKAESDwoHcm91bmRJZBgDIAEoCSI2ChRKYWNrcG90V2lubmVyTWVzc2Fn",
            "ZRIPCgdyb3VuZElkGAEgASgJEg0KBXZhbHVlGAIgASgBImUKEEV4Y2VwdGlv",
            "bk1lc3NhZ2USFQoNY29yZWxjYXRpb25JZBgBIAEoCRIOCgZ1c2VySWQYAiAB",
            "KAkSEAoIbG9jYXRpb24YAyABKAkSGAoQZXhjZXB0aW9uTWVzc2FnZRgEIAEo",
            "CSIwChBVc2VyTG9naW5NZXNzYWdlEg4KBnVzZXJJZBgBIAEoCRIMCgRuYW1l",
            "GAIgASgJKj0KCUdhbWVNb2RlcxIICgRub25lEAASCwoHSmFja3BvdBABEgwK",
            "CENvaW5GbGlwEAISCwoHVXBncmFkZRADMvcHCg5EaXNjb3JkU2VydmljZRJQ",
            "CgdBZGRVc2VyEiEuQ2hhdENvbW11bmljYXRpb24uQWRkVXNlclJlcXVlc3Qa",
            "Ii5DaGF0Q29tbXVuaWNhdGlvbi5BZGRVc2VyUmVzcG9uc2USRwoEUGluZxIe",
            "LkNoYXRDb21tdW5pY2F0aW9uLlBpbmdSZXF1ZXN0Gh8uQ2hhdENvbW11bmlj",
            "YXRpb24uUGluZ1Jlc3BvbnNlEmwKE1NlbmRQZXJzb25hbE1lc3NhZ2USKS5D",
            "aGF0Q29tbXVuaWNhdGlvbi5QZXJzb25hbE1lc3NhZ2VSZXF1ZXN0GiouQ2hh",
            "dENvbW11bmljYXRpb24uUGVyc29uYWxNZXNzYWdlUmVzcG9uc2USaAoUR2xv",
            "YmFsRXhjZXB0aW9uRXJyb3ISLi5DaGF0Q29tbXVuaWNhdGlvbi5HbG9iYWxF",
            "eGNlcHRpb25FcnJvclJlcXVlc3QaIC5DaGF0Q29tbXVuaWNhdGlvbi5FbXB0",
            "eVJlc3BvbnNlElwKDkNvaW5GbGlwQ3JlYXRlEiguQ2hhdENvbW11bmljYXRp",
            "b24uQ29pbkZsaXBDcmVhdGVSZXF1ZXN0GiAuQ2hhdENvbW11bmljYXRpb24u",
            "RW1wdHlSZXNwb25zZRJYCgxDb2luRmxpcEpvaW4SJi5DaGF0Q29tbXVuaWNh",
            "dGlvbi5Db2luRmxpcEpvaW5SZXF1ZXN0GiAuQ2hhdENvbW11bmljYXRpb24u",
            "RW1wdHlSZXNwb25zZRJWCgtDaGF0TWVzc2FnZRIlLkNoYXRDb21tdW5pY2F0",
            "aW9uLkNoYXRNZXNzYWdlUmVxdWVzdBogLkNoYXRDb21tdW5pY2F0aW9uLkVt",
            "cHR5UmVzcG9uc2USVAoKSmFja3BvdEJldBIkLkNoYXRDb21tdW5pY2F0aW9u",
            "LkphY2twb3RCZXRSZXF1ZXN0GiAuQ2hhdENvbW11bmljYXRpb24uRW1wdHlS",
            "ZXNwb25zZRJSCglVc2VyTG9naW4SIy5DaGF0Q29tbXVuaWNhdGlvbi5Vc2Vy",
            "TG9naW5SZXF1ZXN0GiAuQ2hhdENvbW11bmljYXRpb24uRW1wdHlSZXNwb25z",
            "ZRJaCg1KYWNrcG90V2lubmVyEicuQ2hhdENvbW11bmljYXRpb24uSmFja3Bv",
            "dFdpbm5lclJlcXVlc3QaIC5DaGF0Q29tbXVuaWNhdGlvbi5FbXB0eVJlc3Bv",
            "bnNlElwKDkNvaW5GbGlwV2lubmVyEiguQ2hhdENvbW11bmljYXRpb24uQ29p",
            "bkZsaXBXaW5uZXJSZXF1ZXN0GiAuQ2hhdENvbW11bmljYXRpb24uRW1wdHlS",
            "ZXNwb25zZUIaqgIXUnBjQ29tbXVuaWNhdGlvbkRpc2NvcmRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RpcCommunicationDiscord.GameModes), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest), global::RpcCommunicationDiscord.GlobalExceptionErrorRequest.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipCreateRequest), global::RpcCommunicationDiscord.CoinFlipCreateRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipJoinRequest), global::RpcCommunicationDiscord.CoinFlipJoinRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.ChatMessageRequest), global::RpcCommunicationDiscord.ChatMessageRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.JackpotBetRequest), global::RpcCommunicationDiscord.JackpotBetRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.UserLoginRequest), global::RpcCommunicationDiscord.UserLoginRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.JackpotWinnerRequest), global::RpcCommunicationDiscord.JackpotWinnerRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipWinnerRequest), global::RpcCommunicationDiscord.CoinFlipWinnerRequest.Parser, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.EmptyResponse), global::RpcCommunicationDiscord.EmptyResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.PersonalMessageRequest), global::RpcCommunicationDiscord.PersonalMessageRequest.Parser, new[]{ "Message", "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.PersonalMessageResponse), global::RpcCommunicationDiscord.PersonalMessageResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.UserBettedResponse), global::RpcCommunicationDiscord.UserBettedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.PingRequest), global::RpcCommunicationDiscord.PingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.PingResponse), global::RpcCommunicationDiscord.PingResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.AddUserRequest), global::RpcCommunicationDiscord.AddUserRequest.Parser, new[]{ "Id", "SteamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.AddUserResponse), global::RpcCommunicationDiscord.AddUserResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipCreateMessage), global::RpcCommunicationDiscord.CoinFlipCreateMessage.Parser, new[]{ "UserId", "CoinFlipId", "AllowPubg", "AllowCsgo", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipJoinMessage), global::RpcCommunicationDiscord.CoinFlipJoinMessage.Parser, new[]{ "UserId", "CoinFlipId", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.CoinFlipWinnerMessage), global::RpcCommunicationDiscord.CoinFlipWinnerMessage.Parser, new[]{ "CoinFlipId", "TotalValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.ChatMessageMessage), global::RpcCommunicationDiscord.ChatMessageMessage.Parser, new[]{ "Name", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.JackpotBetMessage), global::RpcCommunicationDiscord.JackpotBetMessage.Parser, new[]{ "UserId", "Value", "RoundId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.JackpotWinnerMessage), global::RpcCommunicationDiscord.JackpotWinnerMessage.Parser, new[]{ "RoundId", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.ExceptionMessage), global::RpcCommunicationDiscord.ExceptionMessage.Parser, new[]{ "CorelcationId", "UserId", "Location", "ExceptionMessage_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RpcCommunicationDiscord.UserLoginMessage), global::RpcCommunicationDiscord.UserLoginMessage.Parser, new[]{ "UserId", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameModes {
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("Jackpot")] Jackpot = 1,
    [pbr::OriginalName("CoinFlip")] CoinFlip = 2,
    [pbr::OriginalName("Upgrade")] Upgrade = 3,
  }

  #endregion

  #region Messages
  public sealed partial class GlobalExceptionErrorRequest : pb::IMessage<GlobalExceptionErrorRequest> {
    private static readonly pb::MessageParser<GlobalExceptionErrorRequest> _parser = new pb::MessageParser<GlobalExceptionErrorRequest>(() => new GlobalExceptionErrorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalExceptionErrorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalExceptionErrorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalExceptionErrorRequest(GlobalExceptionErrorRequest other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalExceptionErrorRequest Clone() {
      return new GlobalExceptionErrorRequest(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::RpcCommunicationDiscord.ExceptionMessage error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.ExceptionMessage Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalExceptionErrorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalExceptionErrorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalExceptionErrorRequest other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::RpcCommunicationDiscord.ExceptionMessage();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::RpcCommunicationDiscord.ExceptionMessage();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinFlipCreateRequest : pb::IMessage<CoinFlipCreateRequest> {
    private static readonly pb::MessageParser<CoinFlipCreateRequest> _parser = new pb::MessageParser<CoinFlipCreateRequest>(() => new CoinFlipCreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateRequest(CoinFlipCreateRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateRequest Clone() {
      return new CoinFlipCreateRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.CoinFlipCreateMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.CoinFlipCreateMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.CoinFlipCreateMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.CoinFlipCreateMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinFlipJoinRequest : pb::IMessage<CoinFlipJoinRequest> {
    private static readonly pb::MessageParser<CoinFlipJoinRequest> _parser = new pb::MessageParser<CoinFlipJoinRequest>(() => new CoinFlipJoinRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipJoinRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinRequest(CoinFlipJoinRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinRequest Clone() {
      return new CoinFlipJoinRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.CoinFlipJoinMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.CoinFlipJoinMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipJoinRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipJoinRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipJoinRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.CoinFlipJoinMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.CoinFlipJoinMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessageRequest : pb::IMessage<ChatMessageRequest> {
    private static readonly pb::MessageParser<ChatMessageRequest> _parser = new pb::MessageParser<ChatMessageRequest>(() => new ChatMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRequest(ChatMessageRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRequest Clone() {
      return new ChatMessageRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.ChatMessageMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.ChatMessageMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.ChatMessageMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.ChatMessageMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JackpotBetRequest : pb::IMessage<JackpotBetRequest> {
    private static readonly pb::MessageParser<JackpotBetRequest> _parser = new pb::MessageParser<JackpotBetRequest>(() => new JackpotBetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JackpotBetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetRequest(JackpotBetRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetRequest Clone() {
      return new JackpotBetRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.JackpotBetMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.JackpotBetMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JackpotBetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JackpotBetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JackpotBetRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.JackpotBetMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.JackpotBetMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserLoginRequest : pb::IMessage<UserLoginRequest> {
    private static readonly pb::MessageParser<UserLoginRequest> _parser = new pb::MessageParser<UserLoginRequest>(() => new UserLoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest(UserLoginRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest Clone() {
      return new UserLoginRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.UserLoginMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.UserLoginMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.UserLoginMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.UserLoginMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JackpotWinnerRequest : pb::IMessage<JackpotWinnerRequest> {
    private static readonly pb::MessageParser<JackpotWinnerRequest> _parser = new pb::MessageParser<JackpotWinnerRequest>(() => new JackpotWinnerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JackpotWinnerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerRequest(JackpotWinnerRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerRequest Clone() {
      return new JackpotWinnerRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.JackpotWinnerMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.JackpotWinnerMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JackpotWinnerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JackpotWinnerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JackpotWinnerRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.JackpotWinnerMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.JackpotWinnerMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinFlipWinnerRequest : pb::IMessage<CoinFlipWinnerRequest> {
    private static readonly pb::MessageParser<CoinFlipWinnerRequest> _parser = new pb::MessageParser<CoinFlipWinnerRequest>(() => new CoinFlipWinnerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipWinnerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerRequest(CoinFlipWinnerRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerRequest Clone() {
      return new CoinFlipWinnerRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::RpcCommunicationDiscord.CoinFlipWinnerMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RpcCommunicationDiscord.CoinFlipWinnerMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipWinnerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipWinnerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipWinnerRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::RpcCommunicationDiscord.CoinFlipWinnerMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::RpcCommunicationDiscord.CoinFlipWinnerMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyResponse : pb::IMessage<EmptyResponse> {
    private static readonly pb::MessageParser<EmptyResponse> _parser = new pb::MessageParser<EmptyResponse>(() => new EmptyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyResponse(EmptyResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyResponse Clone() {
      return new EmptyResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PersonalMessageRequest : pb::IMessage<PersonalMessageRequest> {
    private static readonly pb::MessageParser<PersonalMessageRequest> _parser = new pb::MessageParser<PersonalMessageRequest>(() => new PersonalMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageRequest(PersonalMessageRequest other) : this() {
      message_ = other.message_;
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageRequest Clone() {
      return new PersonalMessageRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PersonalMessageResponse : pb::IMessage<PersonalMessageResponse> {
    private static readonly pb::MessageParser<PersonalMessageResponse> _parser = new pb::MessageParser<PersonalMessageResponse>(() => new PersonalMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageResponse(PersonalMessageResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalMessageResponse Clone() {
      return new PersonalMessageResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalMessageResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UserBettedResponse : pb::IMessage<UserBettedResponse> {
    private static readonly pb::MessageParser<UserBettedResponse> _parser = new pb::MessageParser<UserBettedResponse>(() => new UserBettedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBettedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBettedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBettedResponse(UserBettedResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBettedResponse Clone() {
      return new UserBettedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBettedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBettedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBettedResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AddUserRequest : pb::IMessage<AddUserRequest> {
    private static readonly pb::MessageParser<AddUserRequest> _parser = new pb::MessageParser<AddUserRequest>(() => new AddUserRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserRequest(AddUserRequest other) : this() {
      id_ = other.id_;
      steamId_ = other.steamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserRequest Clone() {
      return new AddUserRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SteamId != other.SteamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddUserResponse : pb::IMessage<AddUserResponse> {
    private static readonly pb::MessageParser<AddUserResponse> _parser = new pb::MessageParser<AddUserResponse>(() => new AddUserResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserResponse(AddUserResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUserResponse Clone() {
      return new AddUserResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddUserResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CoinFlipCreateMessage : pb::IMessage<CoinFlipCreateMessage> {
    private static readonly pb::MessageParser<CoinFlipCreateMessage> _parser = new pb::MessageParser<CoinFlipCreateMessage>(() => new CoinFlipCreateMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipCreateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateMessage(CoinFlipCreateMessage other) : this() {
      userId_ = other.userId_;
      coinFlipId_ = other.coinFlipId_;
      allowPubg_ = other.allowPubg_;
      allowCsgo_ = other.allowCsgo_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipCreateMessage Clone() {
      return new CoinFlipCreateMessage(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinFlipId" field.</summary>
    public const int CoinFlipIdFieldNumber = 2;
    private string coinFlipId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinFlipId {
      get { return coinFlipId_; }
      set {
        coinFlipId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowPubg" field.</summary>
    public const int AllowPubgFieldNumber = 3;
    private bool allowPubg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowPubg {
      get { return allowPubg_; }
      set {
        allowPubg_ = value;
      }
    }

    /// <summary>Field number for the "allowCsgo" field.</summary>
    public const int AllowCsgoFieldNumber = 4;
    private bool allowCsgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCsgo {
      get { return allowCsgo_; }
      set {
        allowCsgo_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipCreateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipCreateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (CoinFlipId != other.CoinFlipId) return false;
      if (AllowPubg != other.AllowPubg) return false;
      if (AllowCsgo != other.AllowCsgo) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CoinFlipId.Length != 0) hash ^= CoinFlipId.GetHashCode();
      if (AllowPubg != false) hash ^= AllowPubg.GetHashCode();
      if (AllowCsgo != false) hash ^= AllowCsgo.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (CoinFlipId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinFlipId);
      }
      if (AllowPubg != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowPubg);
      }
      if (AllowCsgo != false) {
        output.WriteRawTag(32);
        output.WriteBool(AllowCsgo);
      }
      if (Value != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CoinFlipId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinFlipId);
      }
      if (AllowPubg != false) {
        size += 1 + 1;
      }
      if (AllowCsgo != false) {
        size += 1 + 1;
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipCreateMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CoinFlipId.Length != 0) {
        CoinFlipId = other.CoinFlipId;
      }
      if (other.AllowPubg != false) {
        AllowPubg = other.AllowPubg;
      }
      if (other.AllowCsgo != false) {
        AllowCsgo = other.AllowCsgo;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            CoinFlipId = input.ReadString();
            break;
          }
          case 24: {
            AllowPubg = input.ReadBool();
            break;
          }
          case 32: {
            AllowCsgo = input.ReadBool();
            break;
          }
          case 41: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinFlipJoinMessage : pb::IMessage<CoinFlipJoinMessage> {
    private static readonly pb::MessageParser<CoinFlipJoinMessage> _parser = new pb::MessageParser<CoinFlipJoinMessage>(() => new CoinFlipJoinMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipJoinMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinMessage(CoinFlipJoinMessage other) : this() {
      userId_ = other.userId_;
      coinFlipId_ = other.coinFlipId_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipJoinMessage Clone() {
      return new CoinFlipJoinMessage(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinFlipId" field.</summary>
    public const int CoinFlipIdFieldNumber = 2;
    private string coinFlipId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinFlipId {
      get { return coinFlipId_; }
      set {
        coinFlipId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipJoinMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipJoinMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (CoinFlipId != other.CoinFlipId) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CoinFlipId.Length != 0) hash ^= CoinFlipId.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (CoinFlipId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinFlipId);
      }
      if (Value != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CoinFlipId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinFlipId);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipJoinMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CoinFlipId.Length != 0) {
        CoinFlipId = other.CoinFlipId;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            CoinFlipId = input.ReadString();
            break;
          }
          case 41: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinFlipWinnerMessage : pb::IMessage<CoinFlipWinnerMessage> {
    private static readonly pb::MessageParser<CoinFlipWinnerMessage> _parser = new pb::MessageParser<CoinFlipWinnerMessage>(() => new CoinFlipWinnerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinFlipWinnerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerMessage(CoinFlipWinnerMessage other) : this() {
      coinFlipId_ = other.coinFlipId_;
      totalValue_ = other.totalValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinFlipWinnerMessage Clone() {
      return new CoinFlipWinnerMessage(this);
    }

    /// <summary>Field number for the "coinFlipId" field.</summary>
    public const int CoinFlipIdFieldNumber = 1;
    private string coinFlipId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinFlipId {
      get { return coinFlipId_; }
      set {
        coinFlipId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalValue" field.</summary>
    public const int TotalValueFieldNumber = 2;
    private double totalValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalValue {
      get { return totalValue_; }
      set {
        totalValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinFlipWinnerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinFlipWinnerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoinFlipId != other.CoinFlipId) return false;
      if (TotalValue != other.TotalValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoinFlipId.Length != 0) hash ^= CoinFlipId.GetHashCode();
      if (TotalValue != 0D) hash ^= TotalValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CoinFlipId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CoinFlipId);
      }
      if (TotalValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoinFlipId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinFlipId);
      }
      if (TotalValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinFlipWinnerMessage other) {
      if (other == null) {
        return;
      }
      if (other.CoinFlipId.Length != 0) {
        CoinFlipId = other.CoinFlipId;
      }
      if (other.TotalValue != 0D) {
        TotalValue = other.TotalValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CoinFlipId = input.ReadString();
            break;
          }
          case 17: {
            TotalValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessageMessage : pb::IMessage<ChatMessageMessage> {
    private static readonly pb::MessageParser<ChatMessageMessage> _parser = new pb::MessageParser<ChatMessageMessage>(() => new ChatMessageMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessageMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageMessage(ChatMessageMessage other) : this() {
      name_ = other.name_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageMessage Clone() {
      return new ChatMessageMessage(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessageMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessageMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessageMessage other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JackpotBetMessage : pb::IMessage<JackpotBetMessage> {
    private static readonly pb::MessageParser<JackpotBetMessage> _parser = new pb::MessageParser<JackpotBetMessage>(() => new JackpotBetMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JackpotBetMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetMessage(JackpotBetMessage other) : this() {
      userId_ = other.userId_;
      value_ = other.value_;
      roundId_ = other.roundId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotBetMessage Clone() {
      return new JackpotBetMessage(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 3;
    private string roundId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundId {
      get { return roundId_; }
      set {
        roundId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JackpotBetMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JackpotBetMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Value != other.Value) return false;
      if (RoundId != other.RoundId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (RoundId.Length != 0) hash ^= RoundId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (RoundId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoundId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (RoundId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoundId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JackpotBetMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.RoundId.Length != 0) {
        RoundId = other.RoundId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            RoundId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JackpotWinnerMessage : pb::IMessage<JackpotWinnerMessage> {
    private static readonly pb::MessageParser<JackpotWinnerMessage> _parser = new pb::MessageParser<JackpotWinnerMessage>(() => new JackpotWinnerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JackpotWinnerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerMessage(JackpotWinnerMessage other) : this() {
      roundId_ = other.roundId_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JackpotWinnerMessage Clone() {
      return new JackpotWinnerMessage(this);
    }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private string roundId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundId {
      get { return roundId_; }
      set {
        roundId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JackpotWinnerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JackpotWinnerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundId != other.RoundId) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundId.Length != 0) hash ^= RoundId.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoundId);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoundId);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JackpotWinnerMessage other) {
      if (other == null) {
        return;
      }
      if (other.RoundId.Length != 0) {
        RoundId = other.RoundId;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoundId = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExceptionMessage : pb::IMessage<ExceptionMessage> {
    private static readonly pb::MessageParser<ExceptionMessage> _parser = new pb::MessageParser<ExceptionMessage>(() => new ExceptionMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExceptionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionMessage(ExceptionMessage other) : this() {
      corelcationId_ = other.corelcationId_;
      userId_ = other.userId_;
      location_ = other.location_;
      exceptionMessage_ = other.exceptionMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionMessage Clone() {
      return new ExceptionMessage(this);
    }

    /// <summary>Field number for the "corelcationId" field.</summary>
    public const int CorelcationIdFieldNumber = 1;
    private string corelcationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorelcationId {
      get { return corelcationId_; }
      set {
        corelcationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exceptionMessage" field.</summary>
    public const int ExceptionMessage_FieldNumber = 4;
    private string exceptionMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExceptionMessage_ {
      get { return exceptionMessage_; }
      set {
        exceptionMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExceptionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExceptionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorelcationId != other.CorelcationId) return false;
      if (UserId != other.UserId) return false;
      if (Location != other.Location) return false;
      if (ExceptionMessage_ != other.ExceptionMessage_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorelcationId.Length != 0) hash ^= CorelcationId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (ExceptionMessage_.Length != 0) hash ^= ExceptionMessage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorelcationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorelcationId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (ExceptionMessage_.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExceptionMessage_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorelcationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorelcationId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (ExceptionMessage_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionMessage_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExceptionMessage other) {
      if (other == null) {
        return;
      }
      if (other.CorelcationId.Length != 0) {
        CorelcationId = other.CorelcationId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.ExceptionMessage_.Length != 0) {
        ExceptionMessage_ = other.ExceptionMessage_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorelcationId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            ExceptionMessage_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserLoginMessage : pb::IMessage<UserLoginMessage> {
    private static readonly pb::MessageParser<UserLoginMessage> _parser = new pb::MessageParser<UserLoginMessage>(() => new UserLoginMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginMessage(UserLoginMessage other) : this() {
      userId_ = other.userId_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginMessage Clone() {
      return new UserLoginMessage(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
