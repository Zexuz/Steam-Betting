// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoLib/Discord.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace RpcCommunicationDiscord {
  public static partial class DiscordService
  {
    static readonly string __ServiceName = "ChatCommunication.DiscordService";

    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.AddUserRequest> __Marshaller_AddUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.AddUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.AddUserResponse> __Marshaller_AddUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.AddUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.PingRequest> __Marshaller_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.PingResponse> __Marshaller_PingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.PingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.PersonalMessageRequest> __Marshaller_PersonalMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.PersonalMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.PersonalMessageResponse> __Marshaller_PersonalMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.PersonalMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.GlobalExceptionErrorRequest> __Marshaller_GlobalExceptionErrorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.GlobalExceptionErrorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.EmptyResponse> __Marshaller_EmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.EmptyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.CoinFlipCreateRequest> __Marshaller_CoinFlipCreateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.CoinFlipCreateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.CoinFlipJoinRequest> __Marshaller_CoinFlipJoinRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.CoinFlipJoinRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.ChatMessageRequest> __Marshaller_ChatMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.ChatMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.JackpotBetRequest> __Marshaller_JackpotBetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.JackpotBetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.UserLoginRequest> __Marshaller_UserLoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.UserLoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.JackpotWinnerRequest> __Marshaller_JackpotWinnerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.JackpotWinnerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationDiscord.CoinFlipWinnerRequest> __Marshaller_CoinFlipWinnerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationDiscord.CoinFlipWinnerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::RpcCommunicationDiscord.AddUserRequest, global::RpcCommunicationDiscord.AddUserResponse> __Method_AddUser = new grpc::Method<global::RpcCommunicationDiscord.AddUserRequest, global::RpcCommunicationDiscord.AddUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddUser",
        __Marshaller_AddUserRequest,
        __Marshaller_AddUserResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.PingRequest, global::RpcCommunicationDiscord.PingResponse> __Method_Ping = new grpc::Method<global::RpcCommunicationDiscord.PingRequest, global::RpcCommunicationDiscord.PingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.PersonalMessageRequest, global::RpcCommunicationDiscord.PersonalMessageResponse> __Method_SendPersonalMessage = new grpc::Method<global::RpcCommunicationDiscord.PersonalMessageRequest, global::RpcCommunicationDiscord.PersonalMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendPersonalMessage",
        __Marshaller_PersonalMessageRequest,
        __Marshaller_PersonalMessageResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.GlobalExceptionErrorRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_GlobalExceptionError = new grpc::Method<global::RpcCommunicationDiscord.GlobalExceptionErrorRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GlobalExceptionError",
        __Marshaller_GlobalExceptionErrorRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.CoinFlipCreateRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_CoinFlipCreate = new grpc::Method<global::RpcCommunicationDiscord.CoinFlipCreateRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CoinFlipCreate",
        __Marshaller_CoinFlipCreateRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.CoinFlipJoinRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_CoinFlipJoin = new grpc::Method<global::RpcCommunicationDiscord.CoinFlipJoinRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CoinFlipJoin",
        __Marshaller_CoinFlipJoinRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.ChatMessageRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_ChatMessage = new grpc::Method<global::RpcCommunicationDiscord.ChatMessageRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChatMessage",
        __Marshaller_ChatMessageRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.JackpotBetRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_JackpotBet = new grpc::Method<global::RpcCommunicationDiscord.JackpotBetRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JackpotBet",
        __Marshaller_JackpotBetRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.UserLoginRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_UserLogin = new grpc::Method<global::RpcCommunicationDiscord.UserLoginRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserLogin",
        __Marshaller_UserLoginRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.JackpotWinnerRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_JackpotWinner = new grpc::Method<global::RpcCommunicationDiscord.JackpotWinnerRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JackpotWinner",
        __Marshaller_JackpotWinnerRequest,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::RpcCommunicationDiscord.CoinFlipWinnerRequest, global::RpcCommunicationDiscord.EmptyResponse> __Method_CoinFlipWinner = new grpc::Method<global::RpcCommunicationDiscord.CoinFlipWinnerRequest, global::RpcCommunicationDiscord.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CoinFlipWinner",
        __Marshaller_CoinFlipWinnerRequest,
        __Marshaller_EmptyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RpcCommunicationDiscord.DiscordReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DiscordService</summary>
    public abstract partial class DiscordServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.AddUserResponse> AddUser(global::RpcCommunicationDiscord.AddUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.PingResponse> Ping(global::RpcCommunicationDiscord.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.PersonalMessageResponse> SendPersonalMessage(global::RpcCommunicationDiscord.PersonalMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> GlobalExceptionError(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipCreate(global::RpcCommunicationDiscord.CoinFlipCreateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipJoin(global::RpcCommunicationDiscord.CoinFlipJoinRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> ChatMessage(global::RpcCommunicationDiscord.ChatMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> JackpotBet(global::RpcCommunicationDiscord.JackpotBetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> UserLogin(global::RpcCommunicationDiscord.UserLoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> JackpotWinner(global::RpcCommunicationDiscord.JackpotWinnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipWinner(global::RpcCommunicationDiscord.CoinFlipWinnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DiscordService</summary>
    public partial class DiscordServiceClient : grpc::ClientBase<DiscordServiceClient>
    {
      /// <summary>Creates a new client for DiscordService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DiscordServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DiscordService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DiscordServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DiscordServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DiscordServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcCommunicationDiscord.AddUserResponse AddUser(global::RpcCommunicationDiscord.AddUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.AddUserResponse AddUser(global::RpcCommunicationDiscord.AddUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.AddUserResponse> AddUserAsync(global::RpcCommunicationDiscord.AddUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.AddUserResponse> AddUserAsync(global::RpcCommunicationDiscord.AddUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddUser, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.PingResponse Ping(global::RpcCommunicationDiscord.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.PingResponse Ping(global::RpcCommunicationDiscord.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.PingResponse> PingAsync(global::RpcCommunicationDiscord.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.PingResponse> PingAsync(global::RpcCommunicationDiscord.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.PersonalMessageResponse SendPersonalMessage(global::RpcCommunicationDiscord.PersonalMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPersonalMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.PersonalMessageResponse SendPersonalMessage(global::RpcCommunicationDiscord.PersonalMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendPersonalMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.PersonalMessageResponse> SendPersonalMessageAsync(global::RpcCommunicationDiscord.PersonalMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPersonalMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.PersonalMessageResponse> SendPersonalMessageAsync(global::RpcCommunicationDiscord.PersonalMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendPersonalMessage, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse GlobalExceptionError(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GlobalExceptionError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse GlobalExceptionError(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GlobalExceptionError, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> GlobalExceptionErrorAsync(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GlobalExceptionErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> GlobalExceptionErrorAsync(global::RpcCommunicationDiscord.GlobalExceptionErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GlobalExceptionError, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipCreate(global::RpcCommunicationDiscord.CoinFlipCreateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipCreate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipCreate(global::RpcCommunicationDiscord.CoinFlipCreateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CoinFlipCreate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipCreateAsync(global::RpcCommunicationDiscord.CoinFlipCreateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipCreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipCreateAsync(global::RpcCommunicationDiscord.CoinFlipCreateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CoinFlipCreate, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipJoin(global::RpcCommunicationDiscord.CoinFlipJoinRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipJoin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipJoin(global::RpcCommunicationDiscord.CoinFlipJoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CoinFlipJoin, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipJoinAsync(global::RpcCommunicationDiscord.CoinFlipJoinRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipJoinAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipJoinAsync(global::RpcCommunicationDiscord.CoinFlipJoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CoinFlipJoin, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse ChatMessage(global::RpcCommunicationDiscord.ChatMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChatMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse ChatMessage(global::RpcCommunicationDiscord.ChatMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChatMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> ChatMessageAsync(global::RpcCommunicationDiscord.ChatMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChatMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> ChatMessageAsync(global::RpcCommunicationDiscord.ChatMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChatMessage, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse JackpotBet(global::RpcCommunicationDiscord.JackpotBetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JackpotBet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse JackpotBet(global::RpcCommunicationDiscord.JackpotBetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JackpotBet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> JackpotBetAsync(global::RpcCommunicationDiscord.JackpotBetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JackpotBetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> JackpotBetAsync(global::RpcCommunicationDiscord.JackpotBetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JackpotBet, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse UserLogin(global::RpcCommunicationDiscord.UserLoginRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse UserLogin(global::RpcCommunicationDiscord.UserLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> UserLoginAsync(global::RpcCommunicationDiscord.UserLoginRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> UserLoginAsync(global::RpcCommunicationDiscord.UserLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse JackpotWinner(global::RpcCommunicationDiscord.JackpotWinnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JackpotWinner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse JackpotWinner(global::RpcCommunicationDiscord.JackpotWinnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JackpotWinner, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> JackpotWinnerAsync(global::RpcCommunicationDiscord.JackpotWinnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JackpotWinnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> JackpotWinnerAsync(global::RpcCommunicationDiscord.JackpotWinnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JackpotWinner, null, options, request);
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipWinner(global::RpcCommunicationDiscord.CoinFlipWinnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipWinner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationDiscord.EmptyResponse CoinFlipWinner(global::RpcCommunicationDiscord.CoinFlipWinnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CoinFlipWinner, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipWinnerAsync(global::RpcCommunicationDiscord.CoinFlipWinnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CoinFlipWinnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationDiscord.EmptyResponse> CoinFlipWinnerAsync(global::RpcCommunicationDiscord.CoinFlipWinnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CoinFlipWinner, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DiscordServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DiscordServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DiscordServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddUser, serviceImpl.AddUser)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_SendPersonalMessage, serviceImpl.SendPersonalMessage)
          .AddMethod(__Method_GlobalExceptionError, serviceImpl.GlobalExceptionError)
          .AddMethod(__Method_CoinFlipCreate, serviceImpl.CoinFlipCreate)
          .AddMethod(__Method_CoinFlipJoin, serviceImpl.CoinFlipJoin)
          .AddMethod(__Method_ChatMessage, serviceImpl.ChatMessage)
          .AddMethod(__Method_JackpotBet, serviceImpl.JackpotBet)
          .AddMethod(__Method_UserLogin, serviceImpl.UserLogin)
          .AddMethod(__Method_JackpotWinner, serviceImpl.JackpotWinner)
          .AddMethod(__Method_CoinFlipWinner, serviceImpl.CoinFlipWinner).Build();
    }

  }
}
#endregion
