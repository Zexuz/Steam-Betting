// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protofiles/chat.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace RpcCommunicationChat {
  /// <summary>
  ///these endpoints is on the nodejs server
  /// </summary>
  public static partial class ChatService
  {
    static readonly string __ServiceName = "ChatCommunication.ChatService";

    static readonly grpc::Marshaller<global::RpcCommunicationChat.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.InsertMessageRequest> __Marshaller_InsertMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.InsertMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.InsertMessageResponse> __Marshaller_InsertMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.InsertMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.GetLatestMessagesRequest> __Marshaller_GetLatestMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.GetLatestMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.MessagesResponse> __Marshaller_MessagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.MessagesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.MuteUserRequest> __Marshaller_MuteUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.MuteUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.MuteUserResponse> __Marshaller_MuteUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.MuteUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.MutedUsersResponse> __Marshaller_MutedUsersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.MutedUsersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.UnMuteUserRequest> __Marshaller_UnMuteUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.UnMuteUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcCommunicationChat.GetMessagesOnParamsRequest> __Marshaller_GetMessagesOnParamsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcCommunicationChat.GetMessagesOnParamsRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::RpcCommunicationChat.EmptyMessage, global::RpcCommunicationChat.EmptyMessage> __Method_Ping = new grpc::Method<global::RpcCommunicationChat.EmptyMessage, global::RpcCommunicationChat.EmptyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_EmptyMessage,
        __Marshaller_EmptyMessage);

    static readonly grpc::Method<global::RpcCommunicationChat.InsertMessageRequest, global::RpcCommunicationChat.InsertMessageResponse> __Method_InsertMessage = new grpc::Method<global::RpcCommunicationChat.InsertMessageRequest, global::RpcCommunicationChat.InsertMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertMessage",
        __Marshaller_InsertMessageRequest,
        __Marshaller_InsertMessageResponse);

    static readonly grpc::Method<global::RpcCommunicationChat.GetLatestMessagesRequest, global::RpcCommunicationChat.MessagesResponse> __Method_GetLatestMessages = new grpc::Method<global::RpcCommunicationChat.GetLatestMessagesRequest, global::RpcCommunicationChat.MessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLatestMessages",
        __Marshaller_GetLatestMessagesRequest,
        __Marshaller_MessagesResponse);

    static readonly grpc::Method<global::RpcCommunicationChat.MuteUserRequest, global::RpcCommunicationChat.MuteUserResponse> __Method_MuteUser = new grpc::Method<global::RpcCommunicationChat.MuteUserRequest, global::RpcCommunicationChat.MuteUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MuteUser",
        __Marshaller_MuteUserRequest,
        __Marshaller_MuteUserResponse);

    static readonly grpc::Method<global::RpcCommunicationChat.EmptyMessage, global::RpcCommunicationChat.MutedUsersResponse> __Method_GetMutedUsers = new grpc::Method<global::RpcCommunicationChat.EmptyMessage, global::RpcCommunicationChat.MutedUsersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMutedUsers",
        __Marshaller_EmptyMessage,
        __Marshaller_MutedUsersResponse);

    static readonly grpc::Method<global::RpcCommunicationChat.UnMuteUserRequest, global::RpcCommunicationChat.EmptyMessage> __Method_UnMuteUser = new grpc::Method<global::RpcCommunicationChat.UnMuteUserRequest, global::RpcCommunicationChat.EmptyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnMuteUser",
        __Marshaller_UnMuteUserRequest,
        __Marshaller_EmptyMessage);

    static readonly grpc::Method<global::RpcCommunicationChat.GetMessagesOnParamsRequest, global::RpcCommunicationChat.MessagesResponse> __Method_GetMessagesOnParams = new grpc::Method<global::RpcCommunicationChat.GetMessagesOnParamsRequest, global::RpcCommunicationChat.MessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMessagesOnParams",
        __Marshaller_GetMessagesOnParamsRequest,
        __Marshaller_MessagesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RpcCommunicationChat.ChatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatService</summary>
    public abstract partial class ChatServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.EmptyMessage> Ping(global::RpcCommunicationChat.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Sends message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.InsertMessageResponse> InsertMessage(global::RpcCommunicationChat.InsertMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///"On connect" Gets the 10 latest messages in db.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.MessagesResponse> GetLatestMessages(global::RpcCommunicationChat.GetLatestMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Only for staff.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.MuteUserResponse> MuteUser(global::RpcCommunicationChat.MuteUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Get muted users
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.MutedUsersResponse> GetMutedUsers(global::RpcCommunicationChat.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Unmute user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.EmptyMessage> UnMuteUser(global::RpcCommunicationChat.UnMuteUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcCommunicationChat.MessagesResponse> GetMessagesOnParams(global::RpcCommunicationChat.GetMessagesOnParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatService</summary>
    public partial class ChatServiceClient : grpc::ClientBase<ChatServiceClient>
    {
      /// <summary>Creates a new client for ChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcCommunicationChat.EmptyMessage Ping(global::RpcCommunicationChat.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationChat.EmptyMessage Ping(global::RpcCommunicationChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.EmptyMessage> PingAsync(global::RpcCommunicationChat.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.EmptyMessage> PingAsync(global::RpcCommunicationChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      ///Sends message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.InsertMessageResponse InsertMessage(global::RpcCommunicationChat.InsertMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Sends message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.InsertMessageResponse InsertMessage(global::RpcCommunicationChat.InsertMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertMessage, null, options, request);
      }
      /// <summary>
      ///Sends message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.InsertMessageResponse> InsertMessageAsync(global::RpcCommunicationChat.InsertMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Sends message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.InsertMessageResponse> InsertMessageAsync(global::RpcCommunicationChat.InsertMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertMessage, null, options, request);
      }
      /// <summary>
      ///"On connect" Gets the 10 latest messages in db.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MessagesResponse GetLatestMessages(global::RpcCommunicationChat.GetLatestMessagesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLatestMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///"On connect" Gets the 10 latest messages in db.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MessagesResponse GetLatestMessages(global::RpcCommunicationChat.GetLatestMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLatestMessages, null, options, request);
      }
      /// <summary>
      ///"On connect" Gets the 10 latest messages in db.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MessagesResponse> GetLatestMessagesAsync(global::RpcCommunicationChat.GetLatestMessagesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLatestMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///"On connect" Gets the 10 latest messages in db.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MessagesResponse> GetLatestMessagesAsync(global::RpcCommunicationChat.GetLatestMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLatestMessages, null, options, request);
      }
      /// <summary>
      ///Only for staff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MuteUserResponse MuteUser(global::RpcCommunicationChat.MuteUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MuteUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Only for staff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MuteUserResponse MuteUser(global::RpcCommunicationChat.MuteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MuteUser, null, options, request);
      }
      /// <summary>
      ///Only for staff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MuteUserResponse> MuteUserAsync(global::RpcCommunicationChat.MuteUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MuteUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Only for staff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MuteUserResponse> MuteUserAsync(global::RpcCommunicationChat.MuteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MuteUser, null, options, request);
      }
      /// <summary>
      ///Get muted users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MutedUsersResponse GetMutedUsers(global::RpcCommunicationChat.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMutedUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get muted users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.MutedUsersResponse GetMutedUsers(global::RpcCommunicationChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMutedUsers, null, options, request);
      }
      /// <summary>
      ///Get muted users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MutedUsersResponse> GetMutedUsersAsync(global::RpcCommunicationChat.EmptyMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMutedUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get muted users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MutedUsersResponse> GetMutedUsersAsync(global::RpcCommunicationChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMutedUsers, null, options, request);
      }
      /// <summary>
      ///Unmute user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.EmptyMessage UnMuteUser(global::RpcCommunicationChat.UnMuteUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnMuteUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Unmute user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RpcCommunicationChat.EmptyMessage UnMuteUser(global::RpcCommunicationChat.UnMuteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnMuteUser, null, options, request);
      }
      /// <summary>
      ///Unmute user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.EmptyMessage> UnMuteUserAsync(global::RpcCommunicationChat.UnMuteUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnMuteUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Unmute user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.EmptyMessage> UnMuteUserAsync(global::RpcCommunicationChat.UnMuteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnMuteUser, null, options, request);
      }
      public virtual global::RpcCommunicationChat.MessagesResponse GetMessagesOnParams(global::RpcCommunicationChat.GetMessagesOnParamsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMessagesOnParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcCommunicationChat.MessagesResponse GetMessagesOnParams(global::RpcCommunicationChat.GetMessagesOnParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMessagesOnParams, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MessagesResponse> GetMessagesOnParamsAsync(global::RpcCommunicationChat.GetMessagesOnParamsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMessagesOnParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcCommunicationChat.MessagesResponse> GetMessagesOnParamsAsync(global::RpcCommunicationChat.GetMessagesOnParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMessagesOnParams, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_InsertMessage, serviceImpl.InsertMessage)
          .AddMethod(__Method_GetLatestMessages, serviceImpl.GetLatestMessages)
          .AddMethod(__Method_MuteUser, serviceImpl.MuteUser)
          .AddMethod(__Method_GetMutedUsers, serviceImpl.GetMutedUsers)
          .AddMethod(__Method_UnMuteUser, serviceImpl.UnMuteUser)
          .AddMethod(__Method_GetMessagesOnParams, serviceImpl.GetMessagesOnParams).Build();
    }

  }
}
#endregion
